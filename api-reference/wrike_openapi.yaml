openapi: 3.0.1
info:
  title: Wrike API
  version: "4.0"
servers:
- url: https://www.wrike.com/api/v4
paths:
  /access_roles:
    get:
      tags:
      - Access Roles
      summary: Get Access Roles
      description: Access roles.
      operationId: GET:/access_roles/empty
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AccessRole'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadOnlyAccessRole
  /account:
    get:
      tags:
      - Account
      summary: Query Accounts
      description: Returns current account.
      operationId: GET:/account/empty
      parameters:
      - name: metadata
        in: query
        description: "Metadata filter, exact match for metadata key or key-value pair"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `metadata` - Account metadata
          * `customFields` - Account custom fields
          * `subscription` - Account subscription
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - metadata
                - customFields
                - subscription
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Account'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
    put:
      tags:
      - Account
      summary: Modify Account
      description: Update current account.
      operationId: PUT:/account/empty
      parameters:
      - name: metadata
        in: query
        description: "Metadata to be updated. Limit : 100"
        required: false
        content:
          application/json:
            schema:
              maxItems: 100
              type: array
              description: Metadata to be updated
              items:
                $ref: '#/components/schemas/Metadata'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Account'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /approvals:
    get:
      tags:
      - Approvals
      summary: Get approvals
      description: Reads approvals by filter. When no filter parameters passed returns
        all approvals shared with a user.
      operationId: GET:/approvals/empty
      parameters:
      - name: statuses
        in: query
        description: "Get approvals for specified statuses\n* `Draft` - \n* `Approved`\
          \ - \n* `Rejected` - \n* `Cancelled` - \n* `Pending` - "
        required: false
        schema:
          $ref: '#/components/schemas/ApprovalStatus'
      - name: updatedDate
        in: query
        description: "Last updated date filter, exact match or range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: approvers
        in: query
        description: "Approvers filter, match of any"
        required: false
        content:
          application/json:
            schema:
              type: array
              description: "Approvers filter, match of any"
              items:
                $ref: '#/components/schemas/UserId'
      - name: pendingApprovers
        in: query
        description: "Pending approvers filter, match of any"
        required: false
        content:
          application/json:
            schema:
              type: array
              description: "Pending approvers filter, match of any"
              items:
                $ref: '#/components/schemas/UserId'
      - name: limit
        in: query
        description: Limit on number of returned approvals
        required: false
        schema:
          type: number
          description: Limit on number of returned approvals
      - name: pageSize
        in: query
        description: Page size
        required: false
        schema:
          type: number
          description: Page size
      - name: nextPageToken
        in: query
        description: "Next page token, overrides any other parameters in request"
        required: false
        schema:
          type: string
          description: "Next page token, overrides any other parameters in request"
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Approval'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /folders/{folderId}/approvals:
    get:
      tags:
      - Approvals
      summary: Get approvals
      description: Reads all approvals on folder/project.
      operationId: GET:/folders/single/approvals
      parameters:
      - name: folderId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FolderId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Approval'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
    post:
      tags:
      - Approvals
      summary: Create approval
      description: "Create an approval for folder/project. Creates approval in draft\
        \ status when no approvers assigned. Otherwise creates in pending status.\
        \ Approvals created via API will not be affected by workflow automation, e.g.\
        \ task status will not be automatically transitioned when approval finishes."
      operationId: POST:/folders/single/approvals
      parameters:
      - name: folderId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FolderId'
      - name: description
        in: query
        description: Description
        required: false
        schema:
          type: string
          description: Description
      - name: dueDate
        in: query
        description: Due date
        required: false
        schema:
          type: string
          description: Due date
      - name: approvers
        in: query
        description: Assign approvers
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Assign approvers
              items:
                $ref: '#/components/schemas/UserId'
      - name: attachments
        in: query
        description: List of origin version attachments to set in approval
        required: false
        content:
          application/json:
            schema:
              type: array
              description: List of origin version attachments to set in approval
              items:
                $ref: '#/components/schemas/AttachmentId'
      - name: autoFinishOnApprove
        in: query
        description: Is finish approval automatically when all approvers have approved.
          Set to true by default
        required: false
        schema:
          type: string
          description: Is finish approval automatically when all approvers have approved.
            Set to true by default
      - name: autoFinishOnReject
        in: query
        description: Is finish approval automatically when some of approvers have
          rejected. Set to true by default
        required: false
        schema:
          type: string
          description: Is finish approval automatically when some of approvers have
            rejected. Set to true by default
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Approval'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /tasks/{taskId}/approvals:
    get:
      tags:
      - Approvals
      summary: Get approvals
      description: Reads all approvals on task.
      operationId: GET:/tasks/single/approvals
      parameters:
      - name: taskId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaskId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Approval'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
    post:
      tags:
      - Approvals
      summary: Create approval
      description: "Create an approval for task. Creates approval in draft status\
        \ when no approvers assigned. Otherwise creates in pending status. Approvals\
        \ created via API will not be affected by workflow automation, e.g. task status\
        \ will not be automatically transitioned when approval finishes."
      operationId: POST:/tasks/single/approvals
      parameters:
      - name: taskId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaskId'
      - name: description
        in: query
        description: Description
        required: false
        schema:
          type: string
          description: Description
      - name: dueDate
        in: query
        description: Due date
        required: false
        schema:
          type: string
          description: Due date
      - name: approvers
        in: query
        description: Assign approvers
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Assign approvers
              items:
                $ref: '#/components/schemas/UserId'
      - name: attachments
        in: query
        description: List of origin version attachments to set in approval
        required: false
        content:
          application/json:
            schema:
              type: array
              description: List of origin version attachments to set in approval
              items:
                $ref: '#/components/schemas/AttachmentId'
      - name: autoFinishOnApprove
        in: query
        description: Is finish approval automatically when all approvers have approved.
          Set to true by default
        required: false
        schema:
          type: string
          description: Is finish approval automatically when all approvers have approved.
            Set to true by default
      - name: autoFinishOnReject
        in: query
        description: Is finish approval automatically when some of approvers have
          rejected. Set to true by default
        required: false
        schema:
          type: string
          description: Is finish approval automatically when some of approvers have
            rejected. Set to true by default
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Approval'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /approvals/{approvalIds}:
    get:
      tags:
      - Approvals
      summary: Get approvals
      description: Reads approvals by ids.
      operationId: GET:/approvals/multi
      parameters:
      - name: approvalIds
        in: path
        description: "Comma-separated list of ids. Limit : 1000"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 1000
              type: array
              items:
                $ref: '#/components/schemas/ApprovalId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Approval'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /approvals/{approvalId}:
    put:
      tags:
      - Approvals
      summary: Update approval
      description: Update approval.
      operationId: PUT:/approvals/single
      parameters:
      - name: approvalId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ApprovalId'
      - name: description
        in: query
        description: description
        required: false
        schema:
          type: string
          description: description
      - name: dueDate
        in: query
        description: due date
        required: false
        schema:
          type: string
          description: due date
      - name: addApprovers
        in: query
        description: Assign approvers
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Assign approvers
              items:
                $ref: '#/components/schemas/UserId'
      - name: removeApprovers
        in: query
        description: Remove approvers
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Remove approvers
              items:
                $ref: '#/components/schemas/UserId'
      - name: addAttachments
        in: query
        description: Add origin version attachments to approval
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Add origin version attachments to approval
              items:
                $ref: '#/components/schemas/AttachmentId'
      - name: removeAttachments
        in: query
        description: Remove origin version attachments from approval
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Remove origin version attachments from approval
              items:
                $ref: '#/components/schemas/AttachmentId'
      - name: autoFinishOnApprove
        in: query
        description: Is finish approval automatically when all approvers have approved
        required: false
        schema:
          type: string
          description: Is finish approval automatically when all approvers have approved
      - name: autoFinishOnReject
        in: query
        description: Is finish approval automatically when some of approvers have
          rejected
        required: false
        schema:
          type: string
          description: Is finish approval automatically when some of approvers have
            rejected
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Approval'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
    delete:
      tags:
      - Approvals
      summary: Cancel approval
      description: Cancel approval.
      operationId: DELETE:/approvals/single
      parameters:
      - name: approvalId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ApprovalId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Approval'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /async_job/{asyncJobId}:
    get:
      tags:
      - Async job
      summary: Get async job
      description: Get Async job specified by id.
      operationId: GET:/async_job/single
      parameters:
      - name: asyncJobId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AsyncJobId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AsyncJob'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /attachments:
    get:
      tags:
      - Attachments
      summary: Get Attachments
      description: Return all Attachments of account tasks and folders.
      operationId: GET:/attachments/empty
      parameters:
      - name: versions
        in: query
        description: Get attachments with previous versions
        required: false
        schema:
          type: boolean
          description: Get attachments with previous versions
      - name: createdDate
        in: query
        description: Created date filter. Required to request attachments in account.
          Time range duration should be less than 31 day
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: withUrls
        in: query
        description: Get attachment URLs. The link for attachment from Wrike is valid
          for 24 hours from when you make the request
        required: false
        schema:
          type: boolean
          description: Get attachment URLs. The link for attachment from Wrike is
            valid for 24 hours from when you make the request
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Attachment'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /folders/{folderId}/attachments:
    get:
      tags:
      - Attachments
      summary: Get Attachments
      description: Returns all Attachments of a folder.
      operationId: GET:/folders/single/attachments
      parameters:
      - name: folderId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FolderId'
      - name: versions
        in: query
        description: Get attachments with previous versions
        required: false
        schema:
          type: boolean
          description: Get attachments with previous versions
      - name: createdDate
        in: query
        description: Created date filter. Required to request attachments in account.
          Time range duration should be less than 31 day
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: withUrls
        in: query
        description: Get attachment URLs. The link for attachment from Wrike is valid
          for 24 hours from when you make the request
        required: false
        schema:
          type: boolean
          description: Get attachment URLs. The link for attachment from Wrike is
            valid for 24 hours from when you make the request
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Attachment'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
    post:
      tags:
      - Attachments
      summary: Create Wrike Attachment
      description: Add an attachment to a folder.
      operationId: POST:/folders/single/attachments
      parameters:
      - name: folderId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FolderId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Attachment'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /tasks/{taskId}/attachments:
    get:
      tags:
      - Attachments
      summary: Get Attachments
      description: Returns all Attachments of a task.
      operationId: GET:/tasks/single/attachments
      parameters:
      - name: taskId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaskId'
      - name: versions
        in: query
        description: Get attachments with previous versions
        required: false
        schema:
          type: boolean
          description: Get attachments with previous versions
      - name: createdDate
        in: query
        description: Created date filter. Required to request attachments in account.
          Time range duration should be less than 31 day
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: withUrls
        in: query
        description: Get attachment URLs. The link for attachment from Wrike is valid
          for 24 hours from when you make the request
        required: false
        schema:
          type: boolean
          description: Get attachment URLs. The link for attachment from Wrike is
            valid for 24 hours from when you make the request
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Attachment'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
    post:
      tags:
      - Attachments
      summary: Create Wrike Attachment
      description: Add an attachment to a task.
      operationId: POST:/tasks/single/attachments
      parameters:
      - name: taskId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaskId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Attachment'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /attachments/{attachmentIds}:
    get:
      tags:
      - Attachments
      summary: Get Attachments
      description: Returns complete information about multiple attachments.
      operationId: GET:/attachments/multi
      parameters:
      - name: attachmentIds
        in: path
        description: "Comma-separated list of ids. Limit : 1000"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 1000
              type: array
              items:
                $ref: '#/components/schemas/AttachmentId'
      - name: versions
        in: query
        description: Get attachments with previous versions
        required: false
        schema:
          type: boolean
          description: Get attachments with previous versions
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Attachment'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /attachments/{attachmentId}/download:
    get:
      tags:
      - Attachments
      summary: Download Wrike Attachment
      description: "Returns attachment content. It can be accessed via /attachments/id/download/name.ext\
        \ URL. In this case, 'name.ext' will be returned as the file name."
      operationId: GET:/attachments/single/download
      parameters:
      - name: attachmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AttachmentId'
      responses:
        "2XX":
          description: success response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /attachments/{attachmentId}/preview:
    get:
      tags:
      - Attachments
      summary: Download Attachment Preview
      description: "Returns Preview for the attachment. The preview can be accessed\
        \ via /attachments/id/preview/name.ext URL. In this case, 'name.ext' will\
        \ be returned as the file name."
      operationId: GET:/attachments/single/preview
      parameters:
      - name: attachmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AttachmentId'
      - name: size
        in: query
        description: |-
          Preview dimensions
          * `w44` - Width = 44, height = auto
          * `w300` - Width = 300, height = auto
          * `w400` - Width = 400, height = auto
          * `w100` - Width = 100, height = auto
          * `h400` - Width = auto, height = 400
          * `w200` - Width = 200, height = auto
          * `full` - Full size
        required: false
        schema:
          $ref: '#/components/schemas/PreviewSize'
      responses:
        "2XX":
          description: success response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /attachments/{attachmentId}/url:
    get:
      tags:
      - Attachments
      summary: Get Access URL for Attachment
      description: Public URL to an attachment from Wrike or an external service.
        The link for attachment from Wrike is valid for 24 hours from when you make
        the request.
      operationId: GET:/attachments/single/url
      parameters:
      - name: attachmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AttachmentId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AttachmentUrl'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /attachments/{attachmentId}:
    put:
      tags:
      - Attachments
      summary: Update Attachment
      description: Update previously uploaded Attachment with new version.
      operationId: PUT:/attachments/single
      parameters:
      - name: attachmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AttachmentId'
      - name: url
        in: query
        description: Download attachment by url
        required: false
        schema:
          type: string
          description: Download attachment by url
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Attachment'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
    delete:
      tags:
      - Attachments
      summary: Delete Attachment
      description: Delete Attachment by ID.
      operationId: DELETE:/attachments/single
      parameters:
      - name: attachmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/AttachmentId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      type: string
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /audit_log:
    get:
      tags:
      - Audit Log
      summary: Get Audit Log
      description: "Get <a href=\"https://help.wrike.com/hc/en-us/articles/209606309-Audit-Log-Reports\"\
        >Audit Log Reports</a>, that contains audit trail for actions in the account.\
        \ Available to Enterprise admins with \"Create user activity reports\" right."
      operationId: GET:/audit_log/empty
      parameters:
      - name: eventDate
        in: query
        description: "Event date filter, range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: operations
        in: query
        description: "Operations filter\n* `SecondFactorEnabled` - \n* `CustomFieldRemoved`\
          \ - \n* `CalendarExternalLinksActivated` - \n* `TaskDuplication` - \n* `GanttSnapshotDeleted`\
          \ - \n* `CalendarExternalLinkDeleted` - \n* `TaskRestored` - \n* `CalendarExternalLinksDeactivated`\
          \ - \n* `PowerBIPublicLinkDeleted` - \n* `ApprovalCanceled` - \n* `RequestFormCreated`\
          \ - \n* `SamlClearPasswordForSamlUsers` - \n* `OneTimePasswordUsed` - \n\
          * `AnalyzeWidgetPublicLinkCreated` - \n* `TaskErased` - \n* `InvitationPolicyChanged`\
          \ - \n* `CalendarExternalLinkCreated` - \n* `UserTaskGroupRolesChanged`\
          \ - \n* `UserJoinedSpace` - \n* `SamlSSOSettingsChanged` - \n* `UserFailLogin`\
          \ - \n* `SamlSSODisabled` - \n* `AdminMailSettingsChanged` - \n* `CustomFieldRemovedFromFolder`\
          \ - \n* `UserLoggedIn` - \n* `UserRoleChanged` - \n* `CustomFieldAddedToFolder`\
          \ - \n* `UserTypeModified` - \n* `AccessCodeAccepted` - \n* `PublicLinkExpirationChanged`\
          \ - \n* `UserLogout` - \n* `PowerBIPublicLinkCreated` - \n* `GuestReviewerRevoked`\
          \ - \n* `ApprovedIpRangesOrSubnetsChanged` - \n* `TaskScheduleChanged` -\
          \ \n* `CustomFieldRestored` - \n* `AccountDeleted` - \n* `UserAdminPermissionsChanged`\
          \ - \n* `AttachDeleted` - \n* `SpaceDeleted` - \n* `AuditReportCreated`\
          \ - \n* `UserTypeCreated` - \n* `ExcelExportCreated` - \n* `AdminLoggedInAsUser`\
          \ - \n* `WorkflowCreated` - \n* `TaskUnsharedFromAuthor` - \n* `AccessAuditReportCsvExport`\
          \ - \n* `AttachMarkAsFinal` - \n* `OneTimePasswordStatusSwitched` - \n*\
          \ `ApproverAdded` - \n* `UserLeftSpace` - \n* `TaskUnarchived` - \n* `ApprovalDescriptionChanged`\
          \ - \n* `GroupParentRemoved` - \n* `GuestReviewAccountSettingsChanged` -\
          \ \n* `WorkflowDeleted` - \n* `PasswordPolicyModified` - \n* `GroupInviteeAdded`\
          \ - \n* `UserRestored` - \n* `ApprovalDueDateChanged` - \n* `AnalyzeWidgetPublicLinkDeleted`\
          \ - \n* `SpaceArchivedUnarchived` - \n* `TaskStatusChanged` - \n* `TaskCommentChanged`\
          \ - \n* `AccessRoleDeleted` - \n* `TaskUnassigned` - \n* `AnalyzePublicLinkCreated`\
          \ - \n* `GuestReviewRejected` - \n* `TaskUnshared` - \n* `PasswordChanged`\
          \ - \n* `RequestFormDeleted` - \n* `AttemptDownloadInfectedAttach` - \n\
          * `InvitationSend` - \n* `AccessRoleModified` - \n* `SpaceCreated` - \n\
          * `ApprovedDomainsChanged` - \n* `TimesheetStatusChanged` - \n* `TimelogLocked`\
          \ - \n* `UserRevokeAdmin` - \n* `RecycleBinErased` - \n* `ApproverRemoved`\
          \ - \n* `UserDeleted` - \n* `GanttSnapshotCreated` - \n* `GroupMemberRemoved`\
          \ - \n* `UserProfileUpdated` - \n* `SecondFactorUsageReportCreated` - \n\
          * `SecondFactorDisabled` - \n* `AttachViewed` - \n* `AccessRoleCreated`\
          \ - \n* `GroupMemberAdded` - \n* `AccountDataExportRequested` - \n* `SamlSSOMetadataChanged`\
          \ - \n* `GroupRenamed` - \n* `PublicLinkCreated` - \n* `TaskShared` - \n\
          * `AccountModified` - \n* `PublicLinkPasswordRequested` - \n* `WorkflowModified`\
          \ - \n* `PublicLinkDeleted` - \n* `AccessCodeDeclined` - \n* `AnalyzeWidgetPublicLinkAccessed`\
          \ - \n* `ApprovalCreated` - \n* `Oauth2AccessRevoked` - \n* `TaskParentRemoved`\
          \ - \n* `AntivirusDeletedInfectedAttach` - \n* `RequestFormModified` - \n\
          * `GroupInviteeRemoved` - \n* `GuestReviewerInvited` - \n* `TaskArchived`\
          \ - \n* `AccountBackupCreated` - \n* `FeedCreated` - \n* `AccessCodeGenerated`\
          \ - \n* `UserDeactivated` - \n* `AttachCopied` - \n* `GroupParentAdded`\
          \ - \n* `GuestReviewerChanged` - \n* `TimelogUnlocked` - \n* `TaskCreated`\
          \ - \n* `OneTimePasswordRevoked` - \n* `ApprovalFinished` - \n* `TaskAssigned`\
          \ - \n* `OneTimePasswordCreated` - \n* `GroupCreated` - \n* `TimesheetCreated`\
          \ - \n* `UsersAndGroupsExported` - \n* `AttachMoved` - \n* `CustomFieldCreated`\
          \ - \n* `AutomatedIntegrationsExecution` - \n* `PowerBIPublicLinkAccessed`\
          \ - \n* `AttachUnmarkAsFinal` - \n* `AnalyzePublicLinkAccessed` - \n* `GroupDeleted`\
          \ - \n* `CustomFieldModified` - \n* `TaskCommentDeleted` - \n* `AnalyzePublicLinkDeleted`\
          \ - \n* `UserTypeDeleted` - \n* `Oauth2AccessGranted` - \n* `UserGrantAdmin`\
          \ - \n* `PublicLinksAccountSettingsChanged` - \n* `TaskDeleted` - \n* `InvitationAccepted`\
          \ - \n* `AccountDataExportGenerated` - \n* `SamlSSOEnabled` - \n* `PublicLinkPasswordChanged`\
          \ - \n* `TaskParentAdded` - \n* `ApprovalDecisionMade` - \n* `GuestReviewAccepted`\
          \ - \n* `UserCustomFieldValueChanged` - \n* `UserActivated` - \n* `AttachUploaded`\
          \ - \n* `AttachDownloaded` - "
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Operations filter
              items:
                $ref: '#/components/schemas/AuditLogOperation'
      - name: pageSize
        in: query
        description: Page size
        required: false
        schema:
          type: number
          description: Page size
      - name: nextPageToken
        in: query
        description: "Next page token, overrides any other parameters in request"
        required: false
        schema:
          type: string
          description: "Next page token, overrides any other parameters in request"
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLog'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadOnlyAuditLog
  /bookings/{bookingIds}:
    get:
      tags:
      - Bookings
      summary: Query Bookings
      description: Get bookings list.
      operationId: GET:/bookings/multi
      parameters:
      - name: bookingIds
        in: path
        description: "Comma-separated list of ids. Limit : 1000"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 1000
              type: array
              items:
                $ref: '#/components/schemas/BookingId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Booking'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /bookings:
    get:
      tags:
      - Bookings
      summary: Query Bookings
      description: Returns list of all bookings in account.
      operationId: GET:/bookings/empty
      parameters:
      - name: startDate
        in: query
        description: Start date
        required: false
        schema:
          type: string
          description: Start date
      - name: finishDate
        in: query
        description: Finish date
        required: false
        schema:
          type: string
          description: Finish date
      - name: responsibleIds
        in: query
        description: "IDs of responsible users. Limit : 15000"
        required: false
        content:
          application/json:
            schema:
              maxItems: 15000
              type: array
              description: IDs of responsible users
              items:
                $ref: '#/components/schemas/UserId'
      - name: responsiblePlaceholderIds
        in: query
        description: "IDs of responsible placeholders. Limit : 15000"
        required: false
        content:
          application/json:
            schema:
              maxItems: 15000
              type: array
              description: IDs of responsible placeholders
              items:
                $ref: '#/components/schemas/PlaceholderId'
      - name: showDescendants
        in: query
        description: If true return bookings from descendant folders
        required: false
        schema:
          type: string
          description: If true return bookings from descendant folders
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Booking'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /folders/{folderId}/bookings:
    get:
      tags:
      - Bookings
      summary: Query Bookings
      description: Get bookings from folder.
      operationId: GET:/folders/single/bookings
      parameters:
      - name: folderId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FolderId'
      - name: startDate
        in: query
        description: Start date
        required: false
        schema:
          type: string
          description: Start date
      - name: finishDate
        in: query
        description: Finish date
        required: false
        schema:
          type: string
          description: Finish date
      - name: responsibleIds
        in: query
        description: "IDs of responsible users. Limit : 15000"
        required: false
        content:
          application/json:
            schema:
              maxItems: 15000
              type: array
              description: IDs of responsible users
              items:
                $ref: '#/components/schemas/UserId'
      - name: responsiblePlaceholderIds
        in: query
        description: "IDs of responsible placeholders. Limit : 15000"
        required: false
        content:
          application/json:
            schema:
              maxItems: 15000
              type: array
              description: IDs of responsible placeholders
              items:
                $ref: '#/components/schemas/PlaceholderId'
      - name: showDescendants
        in: query
        description: If true return bookings from descendant folders
        required: false
        schema:
          type: string
          description: If true return bookings from descendant folders
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Booking'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
    post:
      tags:
      - Bookings
      summary: Create Booking
      description: Create Booking.
      operationId: POST:/folders/single/bookings
      parameters:
      - name: folderId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FolderId'
      - name: bookingDates
        in: query
        description: Booking dates
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingDates'
      - name: responsibleId
        in: query
        description: ID of responsible
        required: false
        schema:
          $ref: '#/components/schemas/UserId'
      - name: responsiblePlaceholderId
        in: query
        description: ID of responsible placeholder
        required: false
        schema:
          $ref: '#/components/schemas/PlaceholderId'
      - name: effortAllocation
        in: query
        description: Effort allocation
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingEffort'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Booking'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /bookings/{bookingId}:
    put:
      tags:
      - Bookings
      summary: Update Booking
      description: Update Booking.
      operationId: PUT:/bookings/single
      parameters:
      - name: bookingId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BookingId'
      - name: bookingDates
        in: query
        description: Booking dates
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingDates'
      - name: responsibleId
        in: query
        description: ID of responsible
        required: false
        schema:
          $ref: '#/components/schemas/UserId'
      - name: responsiblePlaceholderId
        in: query
        description: ID of responsible placeholder
        required: false
        schema:
          $ref: '#/components/schemas/PlaceholderId'
      - name: effortAllocation
        in: query
        description: Effort allocation
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingEffort'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Booking'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
    delete:
      tags:
      - Bookings
      summary: Delete Booking
      description: Delete booking by Id.
      operationId: DELETE:/bookings/single
      parameters:
      - name: bookingId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BookingId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Booking'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /colors:
    get:
      tags:
      - Colors
      summary: Query Colors
      description: Get color name - code mapping.
      operationId: GET:/colors/empty
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ColorsInfo'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /comments:
    get:
      tags:
      - Comments
      summary: Get Comments
      description: Get all comments in current account.
      operationId: GET:/comments/empty
      parameters:
      - name: plainText
        in: query
        description: "Get comment text as plain text, HTML otherwise"
        required: false
        schema:
          type: boolean
          description: "Get comment text as plain text, HTML otherwise"
      - name: types
        in: query
        description: "Comment type filter\n* `Email` - \n* `Regular` - "
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Comment type filter
              items:
                $ref: '#/components/schemas/CommentType'
      - name: updatedDate
        in: query
        description: Deprecated because this parameter filters by created date instead
          of updated date. Please use the createdDate parameter instead
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: createdDate
        in: query
        description: Use the createdDate parameter to get all comments created within
          a specific date range. The date range must be 7 days or shorter
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: limit
        in: query
        description: Maximum number of returned comments
        required: false
        schema:
          type: number
          description: Maximum number of returned comments
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `type` - Comment type
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - type
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /folders/{folderId}/comments:
    get:
      tags:
      - Comments
      summary: Get Comments
      description: Get folder comments.
      operationId: GET:/folders/single/comments
      parameters:
      - name: folderId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FolderId'
      - name: plainText
        in: query
        description: "Get comment text as plain text, HTML otherwise"
        required: false
        schema:
          type: boolean
          description: "Get comment text as plain text, HTML otherwise"
      - name: types
        in: query
        description: "Comment type filter\n* `Email` - \n* `Regular` - "
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Comment type filter
              items:
                $ref: '#/components/schemas/CommentType'
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `type` - Comment type
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - type
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
    post:
      tags:
      - Comments
      summary: Create Comment
      description: Create a comment in the folder. The virtual Root and Recycle Bin
        folders cannot have comments.
      operationId: POST:/folders/single/comments
      parameters:
      - name: folderId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FolderId'
      - name: text
        in: query
        description: "Comment text, can not be empty. Supported HTML tags can be found\
          \ in <a href=\"https://developers.wrike.com/special-syntax\">Special syntax</a>"
        required: true
        schema:
          type: string
          description: "Comment text, can not be empty. Supported HTML tags can be\
            \ found in <a href=\"https://developers.wrike.com/special-syntax\">Special\
            \ syntax</a>"
      - name: plainText
        in: query
        description: "Treat comment text as plain text, HTML otherwise"
        required: false
        schema:
          type: boolean
          description: "Treat comment text as plain text, HTML otherwise"
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /tasks/{taskId}/comments:
    get:
      tags:
      - Comments
      summary: Get Comments
      description: Get task comments.
      operationId: GET:/tasks/single/comments
      parameters:
      - name: taskId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaskId'
      - name: plainText
        in: query
        description: "Get comment text as plain text, HTML otherwise"
        required: false
        schema:
          type: boolean
          description: "Get comment text as plain text, HTML otherwise"
      - name: types
        in: query
        description: "Comment type filter\n* `Email` - \n* `Regular` - "
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Comment type filter
              items:
                $ref: '#/components/schemas/CommentType'
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `type` - Comment type
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - type
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
    post:
      tags:
      - Comments
      summary: Create Comment
      description: Create comment in task.
      operationId: POST:/tasks/single/comments
      parameters:
      - name: taskId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaskId'
      - name: text
        in: query
        description: "Comment text, can not be empty. Supported HTML tags can be found\
          \ in <a href=\"https://developers.wrike.com/special-syntax\">Special syntax</a>"
        required: true
        schema:
          type: string
          description: "Comment text, can not be empty. Supported HTML tags can be\
            \ found in <a href=\"https://developers.wrike.com/special-syntax\">Special\
            \ syntax</a>"
      - name: plainText
        in: query
        description: "Treat comment text as plain text, HTML otherwise"
        required: false
        schema:
          type: boolean
          description: "Treat comment text as plain text, HTML otherwise"
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /comments/{commentIds}:
    get:
      tags:
      - Comments
      summary: Get Comments
      description: Get single or multiple comments by their IDs.
      operationId: GET:/comments/multi
      parameters:
      - name: commentIds
        in: path
        description: "Comma-separated list of ids. Limit : 1000"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 1000
              type: array
              items:
                $ref: '#/components/schemas/CommentId'
      - name: plainText
        in: query
        description: "Get comment text as plain text, HTML otherwise"
        required: false
        schema:
          type: boolean
          description: "Get comment text as plain text, HTML otherwise"
      - name: types
        in: query
        description: "Comment type filter\n* `Email` - \n* `Regular` - "
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Comment type filter
              items:
                $ref: '#/components/schemas/CommentType'
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `type` - Comment type
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - type
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /comments/{commentId}:
    put:
      tags:
      - Comments
      summary: Update Comment
      description: Update Comment by ID. A comment is available for updates only during
        the 5 minutes after creation.
      operationId: PUT:/comments/single
      parameters:
      - name: commentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/CommentId'
      - name: text
        in: query
        description: "Comment text, can not be empty. Supported HTML tags can be found\
          \ in <a href=\"https://developers.wrike.com/special-syntax\">Special syntax</a>"
        required: true
        schema:
          type: string
          description: "Comment text, can not be empty. Supported HTML tags can be\
            \ found in <a href=\"https://developers.wrike.com/special-syntax\">Special\
            \ syntax</a>"
      - name: plainText
        in: query
        description: "Get comment text as plain text, HTML otherwise"
        required: false
        schema:
          type: boolean
          description: "Get comment text as plain text, HTML otherwise"
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
    delete:
      tags:
      - Comments
      summary: Delete Comment
      description: Delete comment by ID.
      operationId: DELETE:/comments/single
      parameters:
      - name: commentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/CommentId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      type: string
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /contacts:
    get:
      tags:
      - Contacts
      summary: Query Contacts
      description: List contacts of all users and user groups in current account.
      operationId: GET:/contacts/empty
      parameters:
      - name: me
        in: query
        description: If present - only contact info of requesting user is returned
        required: true
        schema:
          type: boolean
          description: If present - only contact info of requesting user is returned
      - name: metadata
        in: query
        description: "Metadata filter, exact match for metadata key or key-value pair"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      - name: deleted
        in: query
        description: Deleted flag filter
        required: false
        schema:
          type: boolean
          description: Deleted flag filter
      - name: customFields
        in: query
        description: Custom field filter
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Custom field filter
              items:
                $ref: '#/components/schemas/CustomFieldFilter'
      - name: emails
        in: query
        description: "Email contacts filter. Limit : 100"
        required: false
        content:
          application/json:
            schema:
              maxItems: 100
              type: array
              description: Email contacts filter
              items:
                type: string
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `metadata` - Contact metadata
          * `currentCostRate` - Current user's cost rate
          * `customFields` - User's custom fields
          * `currentBillRate` - Current user's bill rate
          * `jobRoleId` - Current user's jobRoleId
          * `workScheduleId` - Contact work schedule id
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - metadata
                - currentCostRate
                - customFields
                - currentBillRate
                - jobRoleId
                - workScheduleId
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Contact'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /contacts/{contactIds}:
    get:
      tags:
      - Contacts
      summary: Query Contacts
      description: List contacts of specified users and user groups.
      operationId: GET:/contacts/multi
      parameters:
      - name: contactIds
        in: path
        description: "Comma-separated list of ids. Limit : 1000"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 1000
              type: array
              items:
                oneOf:
                - $ref: '#/components/schemas/UserId'
                - $ref: '#/components/schemas/InvitationId'
      - name: metadata
        in: query
        description: "Metadata filter, exact match for metadata key or key-value pair"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `metadata` - Contact metadata
          * `currentCostRate` - Current user's cost rate
          * `customFields` - User's custom fields
          * `currentBillRate` - Current user's bill rate
          * `jobRoleId` - Current user's jobRoleId
          * `workScheduleId` - Contact work schedule id
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - metadata
                - currentCostRate
                - customFields
                - currentBillRate
                - jobRoleId
                - workScheduleId
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Contact'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /contacts/{contactIds}/contacts_history:
    get:
      tags:
      - Contacts
      summary: Query Contacts fields history
      description: Query Contacts fields history.
      operationId: GET:/contacts/multi/contacts_history
      parameters:
      - name: contactIds
        in: path
        description: "Comma-separated list of ids. Limit : 1000"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 1000
              type: array
              items:
                oneOf:
                - $ref: '#/components/schemas/UserId'
                - $ref: '#/components/schemas/InvitationId'
      - name: updatedDate
        in: query
        description: Update date filter
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `billRate` - User's bill rate
          * `costRate` - User's cost rate
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - billRate
                - costRate
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ContactChangeHistory'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /contacts/{contactId}:
    put:
      tags:
      - Contacts
      summary: Modify Contact
      description: Update contact of requesting user by ID (use 'Modify User' method
        to update other users). Account Admins may use this method to update group
        info by group ID. .
      operationId: PUT:/contacts/single
      parameters:
      - name: contactId
        in: path
        required: true
        schema:
          oneOf:
          - $ref: '#/components/schemas/UserId'
          - $ref: '#/components/schemas/InvitationId'
      - name: metadata
        in: query
        description: "Metadata to be updated. Requesting user has read/write access\
          \ to his own metadata, other entries are read-only. Limit : 100"
        required: false
        content:
          application/json:
            schema:
              maxItems: 100
              type: array
              description: "Metadata to be updated. Requesting user has read/write\
                \ access to his own metadata, other entries are read-only"
              items:
                $ref: '#/components/schemas/Metadata'
      - name: currentBillRate
        in: query
        description: Update current user's bill rate
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BudgetRate'
      - name: currentCostRate
        in: query
        description: Update current user's cost rate
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BudgetRate'
      - name: jobRoleId
        in: query
        description: Update current user's job role id
        required: false
        schema:
          $ref: '#/components/schemas/JobRoleId'
      - name: customFields
        in: query
        description: "Custom fields to be updated or deleted (null value removes field).\
          \ Limit : 100"
        required: false
        content:
          application/json:
            schema:
              maxItems: 100
              type: array
              description: Custom fields to be updated or deleted (null value removes
                field)
              items:
                $ref: '#/components/schemas/CustomField'
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `currentCostRate` - Current user's cost rate
          * `customFields` - User's custom fields
          * `currentBillRate` - Current user's bill rate
          * `jobRoleId` - Current user's job role id
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - currentCostRate
                - customFields
                - currentBillRate
                - jobRoleId
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Contact'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /workschedules/{workscheduleId}/duplicate:
    post:
      tags:
      - Copy Work Schedule
      summary: Copy Work Schedule
      description: Duplicate work schedule in account.
      operationId: POST:/workschedules/single/duplicate
      parameters:
      - name: workscheduleId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkScheduleId'
      - name: title
        in: query
        description: Name of work schedule
        required: true
        schema:
          type: string
          description: Name of work schedule
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorkSchedule'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadWriteWorkSchedule
  /customfields:
    get:
      tags:
      - Custom Fields
      summary: Query Custom Fields
      description: Returns a list of custom fields in current account.
      operationId: GET:/customfields/empty
      parameters:
      - name: applicableEntityTypes
        in: query
        description: "Applicable entity types\n* `User` - \n* `WorkItem` - "
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Applicable entity types
              items:
                $ref: '#/components/schemas/CustomFieldApplicableEntityType'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CustomFieldDescription'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
    post:
      tags:
      - Custom Fields
      summary: Create Custom Field
      description: Create custom field in specified account.
      operationId: POST:/customfields/empty
      parameters:
      - name: title
        in: query
        description: Custom field title
        required: true
        schema:
          type: string
          description: Custom field title
      - name: type
        in: query
        description: |-
          Custom field type
          * `Numeric` - Comparable field
          * `Multiple` - Collection field
          * `Contacts` - Collection field
          * `Percentage` - Comparable field
          * `Checkbox` - Boolean field
          * `Currency` - Comparable field
          * `Text` - String field, Comparable field
          * `DropDown` - String field, Comparable field
          * `Duration` - Comparable field
          * `LinkToDatabase` - Link to database field
          * `Date` - Comparable field
        required: true
        schema:
          $ref: '#/components/schemas/CustomFieldType'
      - name: spaceId
        in: query
        description: Custom field space ID
        required: false
        schema:
          $ref: '#/components/schemas/SpaceId'
      - name: sharing
        in: query
        description: Custom field access settings
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldSharing'
      - name: shareds
        in: query
        description: "Users to share custom field with. Parameter is obsolete, use\
          \ 'sharing' instead"
        required: false
        content:
          application/json:
            schema:
              type: array
              description: "Users to share custom field with. Parameter is obsolete,\
                \ use 'sharing' instead"
              items:
                $ref: '#/components/schemas/UserId'
      - name: settings
        in: query
        description: Custom field settings
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldSettings'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CustomFieldDescription'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /customfields/{customfieldIds}:
    get:
      tags:
      - Custom Fields
      summary: Query Custom Fields
      description: Returns complete information about specified custom fields.
      operationId: GET:/customfields/multi
      parameters:
      - name: customfieldIds
        in: path
        description: "Comma-separated list of ids. Limit : 1000"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 1000
              type: array
              items:
                $ref: '#/components/schemas/CustomFieldId'
      - name: applicableEntityTypes
        in: query
        description: "Applicable entity types\n* `User` - \n* `WorkItem` - "
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Applicable entity types
              items:
                $ref: '#/components/schemas/CustomFieldApplicableEntityType'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CustomFieldDescription'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /customfields/{customfieldId}:
    put:
      tags:
      - Custom Fields
      summary: Modify Custom Field
      description: Modify custom field.
      operationId: PUT:/customfields/single
      parameters:
      - name: customfieldId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/CustomFieldId'
      - name: title
        in: query
        description: Custom field title
        required: false
        schema:
          type: string
          description: Custom field title
      - name: type
        in: query
        description: |-
          Custom field type
          * `Numeric` - Comparable field
          * `Multiple` - Collection field
          * `Contacts` - Collection field
          * `Percentage` - Comparable field
          * `Checkbox` - Boolean field
          * `Currency` - Comparable field
          * `Text` - String field, Comparable field
          * `DropDown` - String field, Comparable field
          * `Duration` - Comparable field
          * `LinkToDatabase` - Link to database field
          * `Date` - Comparable field
        required: false
        schema:
          $ref: '#/components/schemas/CustomFieldType'
      - name: changeScope
        in: query
        description: |-
          Custom field scope
          * `Space` - Use it with valid 'spaceId' parameter to move custom field to space level
          * `Account` - Use it with null 'spaceId' parameter to move custom field to account level
        required: false
        schema:
          $ref: '#/components/schemas/CustomFieldScope'
      - name: spaceId
        in: query
        description: Custom field space ID
        required: false
        schema:
          $ref: '#/components/schemas/SpaceId'
      - name: sharing
        in: query
        description: Custom field access settings
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldSharing'
      - name: addShareds
        in: query
        description: "Share custom field with specified users. Parameter is obsolete,\
          \ use 'sharing' instead"
        required: false
        content:
          application/json:
            schema:
              type: array
              description: "Share custom field with specified users. Parameter is\
                \ obsolete, use 'sharing' instead"
              items:
                $ref: '#/components/schemas/UserId'
      - name: removeShareds
        in: query
        description: "Unshare custom field from specified users. Parameter is obsolete,\
          \ use 'sharing' instead"
        required: false
        content:
          application/json:
            schema:
              type: array
              description: "Unshare custom field from specified users. Parameter is\
                \ obsolete, use 'sharing' instead"
              items:
                $ref: '#/components/schemas/UserId'
      - name: settings
        in: query
        description: Custom field type settings
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldSettings'
      - name: addMirrors
        in: query
        description: Add mirror fields to LinkToDatabase field
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Add mirror fields to LinkToDatabase field
              items:
                $ref: '#/components/schemas/CustomFieldLinkToDatabaseMirrorField'
      - name: removeMirrors
        in: query
        description: Remove mirror fields from to LinkToDatabase field
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Remove mirror fields from to LinkToDatabase field
              items:
                $ref: '#/components/schemas/CustomFieldId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CustomFieldDescription'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /custom_item_types:
    get:
      tags:
      - Custom Item Types
      summary: Query All Custom Item Types
      description: Returns all custom item types that belong to the whole account.
      operationId: GET:/custom_item_types/empty
      parameters:
      - name: title
        in: query
        description: Filter search results by title
        required: false
        schema:
          type: string
          description: Filter search results by title
      - name: limit
        in: query
        description: Result entries limit
        required: false
        schema:
          type: number
          description: Result entries limit
      - name: type
        in: query
        description: |-
          Related type of returned custom item types
          * `Project` - Project based
          * `Task` - Task based
          * `Folder` - Folder based
        required: false
        schema:
          $ref: '#/components/schemas/CustomItemTypeRelatedType'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CustomItemType'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /spaces/{spaceId}/custom_item_types:
    get:
      tags:
      - Custom Item Types
      summary: Query All Custom Item Types
      description: Returns all custom item types that belong to the specific space.
      operationId: GET:/spaces/single/custom_item_types
      parameters:
      - name: spaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SpaceId'
      - name: title
        in: query
        description: Filter search results by title
        required: false
        schema:
          type: string
          description: Filter search results by title
      - name: limit
        in: query
        description: Result entries limit
        required: false
        schema:
          type: number
          description: Result entries limit
      - name: type
        in: query
        description: |-
          Related type of returned custom item types
          * `Project` - Project based
          * `Task` - Task based
          * `Folder` - Folder based
        required: false
        schema:
          $ref: '#/components/schemas/CustomItemTypeRelatedType'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CustomItemType'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /custom_item_types/{customItemTypeIds}:
    get:
      tags:
      - Custom Item Types
      summary: Query Specific Custom Item Type by ID
      description: Returns custom item type(s) for specified type ID(s).
      operationId: GET:/custom_item_types/multi
      parameters:
      - name: customItemTypeIds
        in: path
        description: "Comma-separated list of ids. Limit : 1000"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 1000
              type: array
              items:
                $ref: '#/components/schemas/EntityTypeId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CustomItemType'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /custom_item_types/{customItemTypeId}/instantiate:
    post:
      tags:
      - Custom Item Types
      summary: Create Work from Custom Item Type
      description: Create work using the specific custom item type.
      operationId: POST:/custom_item_types/single/instantiate
      parameters:
      - name: customItemTypeId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/EntityTypeId'
      - name: superTaskId
        in: query
        description: ID of parent task. Set this to add work from the task-based custom
          item type as a subtask. Either this parameter or parentId  is required.
          parentId and superTaskId cannot be set simultaneously.
        required: false
        schema:
          $ref: '#/components/schemas/TaskId'
      - name: parentId
        in: query
        description: ID of parent folder or project.  Set this to put work from the
          custom item type to the specific folder or project. Either this parameter
          or superTaskId  is required. parentId and superTaskId cannot be set simultaneously
        required: false
        schema:
          $ref: '#/components/schemas/FolderId'
      - name: title
        in: query
        description: Title
        required: true
        schema:
          type: string
          description: Title
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorkItemMetadata'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /data_export:
    get:
      tags:
      - Data Export
      summary: Get Data Export
      description: Get last completed Data Export.
      operationId: GET:/data_export/empty
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DataExportOperation'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - dataExportFull
    post:
      tags:
      - Data Export
      summary: Refresh Data Export
      description: "Forces new data export generation (if it is not in progress already).\
        \ 202 code is returned in case new export generation is started. Data export\
        \ can be requested no sooner than 1 hour after last successful data export.\
        \ If there is fresh data export already, 200 code and latest export in format\
        \ similar to [GET] /data_export is returned."
      operationId: POST:/data_export/empty
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DataExportOperation'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - dataExportFull
  /data_export/{dataExportId}:
    get:
      tags:
      - Data Export
      summary: Get Data Export
      description: Get Data Export specified by id.
      operationId: GET:/data_export/single
      parameters:
      - name: dataExportId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DataExportId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DataExportOperation'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - dataExportFull
  /data_export_schema:
    get:
      tags:
      - Data export schema
      summary: Get Data Export Schema
      description: Get data export schema specified by version.
      operationId: GET:/data_export_schema/empty
      parameters:
      - name: version
        in: query
        description: "Version\n* `V0` - \n* `V1` - \n* `V2` - "
        required: false
        schema:
          $ref: '#/components/schemas/DataExportVersion'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DataExportTableSchema'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - dataExportFull
  /tasks/{taskId}/dependencies:
    get:
      tags:
      - Dependencies
      summary: Query Dependencies
      description: Get task dependencies.
      operationId: GET:/tasks/single/dependencies
      parameters:
      - name: taskId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaskId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dependency'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
    post:
      tags:
      - Dependencies
      summary: Create Dependency
      description: "Add dependency between tasks. If a dependency already exists,\
        \ attempting to recreate will result in an error."
      operationId: POST:/tasks/single/dependencies
      parameters:
      - name: taskId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaskId'
      - name: predecessorId
        in: query
        description: "Add predecessor task, only one of predecessorId/successorId\
          \ fields can be specified"
        required: true
        schema:
          $ref: '#/components/schemas/TaskId'
      - name: successorId
        in: query
        description: "Add successor task, only one of predecessorId/successorId fields\
          \ can be specified"
        required: true
        schema:
          $ref: '#/components/schemas/TaskId'
      - name: relationType
        in: query
        description: |-
          Relation between Predecessor and Successor
          * `FinishToFinish` - Finish to finish. Allowed only when predecessor and successor are Planned or Milestone tasks
          * `StartToStart` - Start to start. Allowed only when both predecessor and successor are Planned tasks
          * `StartToFinish` - Start to finish. Allowed only when predecessor is Planned, and successor is Planned or Milestone task
          * `FinishToStart` - Finish to start. Allowed only when predecessor is Planned or Milestone, and successor is Planned task
        required: true
        schema:
          $ref: '#/components/schemas/DependencyRelationType'
      - name: lagTime
        in: query
        description: "Always in minutes, positive numbers are lag time and negative\
          \ numbers are lead time"
        required: false
        schema:
          type: number
          description: "Always in minutes, positive numbers are lag time and negative\
            \ numbers are lead time"
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dependency'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /dependencies/{dependencyIds}:
    get:
      tags:
      - Dependencies
      summary: Query Dependencies
      description: Returns complete information about single or multiple dependencies.
      operationId: GET:/dependencies/multi
      parameters:
      - name: dependencyIds
        in: path
        description: "Comma-separated list of ids. Limit : 1000"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 1000
              type: array
              items:
                $ref: '#/components/schemas/DependencyId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dependency'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /dependencies/{dependencyId}:
    put:
      tags:
      - Dependencies
      summary: Modify Dependency
      description: Change relationType of task dependency.
      operationId: PUT:/dependencies/single
      parameters:
      - name: dependencyId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DependencyId'
      - name: relationType
        in: query
        description: |-
          Relation between Predecessor and Successor
          * `FinishToFinish` - Finish to finish. Allowed only when predecessor and successor are Planned or Milestone tasks
          * `StartToStart` - Start to start. Allowed only when both predecessor and successor are Planned tasks
          * `StartToFinish` - Start to finish. Allowed only when predecessor is Planned, and successor is Planned or Milestone task
          * `FinishToStart` - Finish to start. Allowed only when predecessor is Planned or Milestone, and successor is Planned task
        required: true
        schema:
          $ref: '#/components/schemas/DependencyRelationType'
      - name: lagTime
        in: query
        description: "Always in minutes, positive numbers are lag time and negative\
          \ numbers are lead time"
        required: false
        schema:
          type: number
          description: "Always in minutes, positive numbers are lag time and negative\
            \ numbers are lead time"
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dependency'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
    delete:
      tags:
      - Dependencies
      summary: Delete Dependency
      description: Delete dependency between tasks.
      operationId: DELETE:/dependencies/single
      parameters:
      - name: dependencyId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/DependencyId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Dependency'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /ediscovery_search:
    post:
      tags:
      - EDiscovery
      summary: eDiscovery Search
      description: Search entities for eDiscovery report.
      operationId: POST:/ediscovery_search/empty
      parameters:
      - name: scopes
        in: query
        description: "Scopes to limit the result\n* `task` - \n* `folder` - \n* `attachment`\
          \ - \n* `project` - \n* `space` - "
        required: true
        content:
          application/json:
            schema:
              maxItems: 1000
              type: array
              description: Scopes to limit the result
              items:
                $ref: '#/components/schemas/EDiscoveryScope'
      - name: terms
        in: query
        description: Terms to search
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Terms to search
              items:
                type: string
      - name: targetUserId
        in: query
        description: User id to limit the result
        required: false
        schema:
          $ref: '#/components/schemas/UserId'
      - name: timeout
        in: query
        description: Maximum approximate duration to handle requests
        required: false
        schema:
          type: string
          description: Maximum approximate duration to handle requests
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      type: string
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /folder_blueprints:
    get:
      tags:
      - Folder Blueprints
      summary: Get Folder Blueprints tree
      description: Account-level Folder Blueprints tree.
      operationId: GET:/folder_blueprints/empty
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FolderBlueprint'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /spaces/{spaceId}/folder_blueprints:
    get:
      tags:
      - Folder Blueprints
      summary: Get Folder Blueprints tree
      description: Space-level Folder Blueprints tree.
      operationId: GET:/spaces/single/folder_blueprints
      parameters:
      - name: spaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SpaceId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FolderBlueprint'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /folder_blueprints/{folderBlueprintId}/launch_async:
    post:
      tags:
      - Folder Blueprints
      summary: Async Work Creation
      description: "Folder Blueprint Launch, returns async job."
      operationId: POST:/folder_blueprints/single/launch_async
      parameters:
      - name: folderBlueprintId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FolderBlueprintId'
      - name: parent
        in: query
        description: ID of parent folder
        required: true
        schema:
          $ref: '#/components/schemas/FolderId'
      - name: title
        in: query
        description: Title (required)
        required: true
        schema:
          type: string
          description: Title (required)
      - name: titlePrefix
        in: query
        description: Title prefix for all copied tasks
        required: false
        schema:
          type: string
          description: Title prefix for all copied tasks
      - name: copyDescriptions
        in: query
        description: Copy descriptions or leave empty
        required: false
        schema:
          type: boolean
          description: Copy descriptions or leave empty
      - name: notifyResponsibles
        in: query
        description: Notify those responsible
        required: false
        schema:
          type: boolean
          description: Notify those responsible
      - name: copyResponsibles
        in: query
        description: Copy those responsible
        required: false
        schema:
          type: boolean
          description: Copy those responsible
      - name: copyCustomFields
        in: query
        description: Copy custom fields
        required: false
        schema:
          type: boolean
          description: Copy custom fields
      - name: copyAttachments
        in: query
        description: Copy attachments
        required: false
        schema:
          type: boolean
          description: Copy attachments
      - name: rescheduleDate
        in: query
        description: "Date to use in task rescheduling. Note: Only active tasks can\
          \ be rescheduled. Format: yyyy-MM-dd"
        required: false
        schema:
          type: string
          description: "Date to use in task rescheduling. Note: Only active tasks\
            \ can be rescheduled. Format: yyyy-MM-dd"
      - name: rescheduleMode
        in: query
        description: |-
          Mode to be used for rescheduling (based on first or last date). Used only if reschedule date is specified.
          * `Start` - Tasks in scope are rescheduled starting from reschedule date
          * `End` - Tasks in scope are rescheduled ending with reschedule date
        required: false
        schema:
          $ref: '#/components/schemas/RescheduleMode'
      - name: entryLimit
        in: query
        description: Maximum number of tasks/folders in tree for copy. The operation
          will fail if limit is exceeded. This should be 1..250
        required: false
        schema:
          type: number
          description: Maximum number of tasks/folders in tree for copy. The operation
            will fail if limit is exceeded. This should be 1..250
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AsyncJob'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /folders:
    get:
      tags:
      - Folders & Projects
      summary: Get Folder Tree
      description: |-
        Returns a list of folders for the current account.<br>
        The method operates in two modes:<br>
        <ul>
        <li><b>Folder Tree Mode</b>: Activated if no filter parameters are provided. This mode returns the account's
        folders (spaces), their descendant folders, the root folder, and the recycle bin folder
        (note that "deleted" parameter can affect the result, see below).
        Filtering can be requested in this mode using the descendants=true parameter along with filter parameters.

        <li><b>Folders Mode</b>: Activated if the parameter descendant=false is specified or if there is at least
        one filter parameter, e.g., project=true. This mode returns only the account's folders filtered by the
        specified parameters.
        </ul>

        The chosen mode can be identified by the "kind" key in the result JSON body, with "kind": "folderTree"
        for Folder Tree Mode and "kind": "folders" for Folders Mode.
      operationId: GET:/folders/empty
      parameters:
      - name: permalink
        in: query
        description: "Folder permalink, exact match"
        required: false
        schema:
          type: string
          description: "Folder permalink, exact match"
      - name: descendants
        in: query
        description: Adds all descendant folders to search scope
        required: false
        schema:
          type: boolean
          description: Adds all descendant folders to search scope
      - name: metadata
        in: query
        description: Folders metadata filter
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      - name: customField
        in: query
        description: "[Deprecated] It is recommended to use 'customFields' parameter.\
          \ Custom field filter"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldFilter'
      - name: customFields
        in: query
        description: "Custom field filters, exact match. Limit : 25"
        required: false
        content:
          application/json:
            schema:
              maxItems: 25
              type: array
              description: "Custom field filters, exact match"
              items:
                $ref: '#/components/schemas/CustomFieldFilter'
      - name: updatedDate
        in: query
        description: "Updated date filter, range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: withInvitations
        in: query
        description: Include invitations in sharedIds list
        required: false
        schema:
          type: boolean
          description: Include invitations in sharedIds list
      - name: project
        in: query
        description: Filter only projects (true) / only folders (false)
        required: false
        schema:
          type: boolean
          description: Filter only projects (true) / only folders (false)
      - name: deleted
        in: query
        description: Get folders from Root (false) / Recycle Bin (true). This parameter
          does not affect method's mode.
        required: false
        schema:
          type: boolean
          description: Get folders from Root (false) / Recycle Bin (true). This parameter
            does not affect method's mode.
      - name: contractTypes
        in: query
        description: |-
          Contract type filter
          * `Billable` - Billable
          * `NonBillable` - Non-Billable
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Contract type filter
              items:
                $ref: '#/components/schemas/ContractType'
      - name: plainTextCustomFields
        in: query
        description: Strip HTML tags from custom fields
        required: false
        schema:
          type: boolean
          description: Strip HTML tags from custom fields
      - name: customItemTypes
        in: query
        description: "Custom item types filter. Standard types (project, folder) IDs\
          \ are not allowed. Limit : 1000"
        required: false
        content:
          application/json:
            schema:
              maxItems: 1000
              type: array
              description: "Custom item types filter. Standard types (project, folder)\
                \ IDs are not allowed."
              items:
                $ref: '#/components/schemas/EntityTypeId'
      - name: pageSize
        in: query
        description: The number of folders to return (max 1000 items per page). Only
          'folders' kind is supported
        required: false
        schema:
          type: number
          description: The number of folders to return (max 1000 items per page).
            Only 'folders' kind is supported
      - name: nextPageToken
        in: query
        description: "A pagination request will return a token that applies an offset\
          \ to the next page. The returned value should be used as an input parameter\
          \ in the next request. Parameter pageSize can be omitted in this case. If\
          \ you included optional fields to the first request, you will need to include\
          \ those in each new call. Only 'folders' kind is supported"
        required: false
        schema:
          type: string
          description: "A pagination request will return a token that applies an offset\
            \ to the next page. The returned value should be used as an input parameter\
            \ in the next request. Parameter pageSize can be omitted in this case.\
            \ If you included optional fields to the first request, you will need\
            \ to include those in each new call. Only 'folders' kind is supported"
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `superParentIds` - List of super parent folder IDs (applicable to 'Selective Sharing' labs feature)
          * `metadata` - Folder metadata entries
          * `customItemTypeId` - Work Item custom item type Id
          * `customFields` - Custom fields
          * `customColumnIds` - Associated custom field IDs
          * `contractType` - Contract type
          * `description` - Description
          * `attachmentCount` - Attachment count
          * `hasAttachments` - Has attachments
          * `briefDescription` - Brief description
          * `space` - Is folder a space
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - superParentIds
                - metadata
                - customItemTypeId
                - customFields
                - customColumnIds
                - contractType
                - description
                - attachmentCount
                - hasAttachments
                - briefDescription
                - space
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Folder'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /folders/{folderId}/folders:
    get:
      tags:
      - Folders & Projects
      summary: Get Folder Tree
      description: |-
        Returns the list of folders from a specific folder in the current account. If the root or recycle bin
        folder id is specified, the method returns the list of folders of the root and recycle bin respectively.<br>
        The method operates in two modes:
        <ul>
        <li><b>Folder Tree Mode</b>: Activated if no filter parameters are provided. This mode returns the requested
        folders (spaces), their descendant folders, the root folder, and the recycle bin folder.

        <li><b>Folders Mode</b>: Activated if the parameter descendant=false is specified or if there is at least
        one filter parameter, e.g., project=true. This mode returns only the account's folders filtered by the
        specified parameters.
        </ul>

        The chosen mode can be identified by the "kind" key in the result JSON body, with "kind": "folderTree"
        for Folder Tree Mode and "kind": "folders" for Folders Mode.
      operationId: GET:/folders/single/folders
      parameters:
      - name: folderId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FolderId'
      - name: permalink
        in: query
        description: "Folder permalink, exact match"
        required: false
        schema:
          type: string
          description: "Folder permalink, exact match"
      - name: descendants
        in: query
        description: Adds all descendant folders to search scope
        required: false
        schema:
          type: boolean
          description: Adds all descendant folders to search scope
      - name: metadata
        in: query
        description: Folders metadata filter
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      - name: customField
        in: query
        description: "[Deprecated] It is recommended to use 'customFields' parameter.\
          \ Custom field filter"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldFilter'
      - name: customFields
        in: query
        description: "Custom field filters, exact match. Limit : 25"
        required: false
        content:
          application/json:
            schema:
              maxItems: 25
              type: array
              description: "Custom field filters, exact match"
              items:
                $ref: '#/components/schemas/CustomFieldFilter'
      - name: updatedDate
        in: query
        description: "Updated date filter, range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: withInvitations
        in: query
        description: Include invitations in sharedIds list
        required: false
        schema:
          type: boolean
          description: Include invitations in sharedIds list
      - name: project
        in: query
        description: Filter only projects (true) / only folders (false)
        required: false
        schema:
          type: boolean
          description: Filter only projects (true) / only folders (false)
      - name: contractTypes
        in: query
        description: |-
          Contract type filter
          * `Billable` - Billable
          * `NonBillable` - Non-Billable
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Contract type filter
              items:
                $ref: '#/components/schemas/ContractType'
      - name: plainTextCustomFields
        in: query
        description: Strip HTML tags from custom fields
        required: false
        schema:
          type: boolean
          description: Strip HTML tags from custom fields
      - name: customItemTypes
        in: query
        description: "Custom item types filter. Standard types (project, folder) IDs\
          \ are not allowed. Limit : 1000"
        required: false
        content:
          application/json:
            schema:
              maxItems: 1000
              type: array
              description: "Custom item types filter. Standard types (project, folder)\
                \ IDs are not allowed."
              items:
                $ref: '#/components/schemas/EntityTypeId'
      - name: pageSize
        in: query
        description: The number of folders to return (max 1000 items per page). Only
          'folders' kind is supported
        required: false
        schema:
          type: number
          description: The number of folders to return (max 1000 items per page).
            Only 'folders' kind is supported
      - name: nextPageToken
        in: query
        description: "A pagination request will return a token that applies an offset\
          \ to the next page. The returned value should be used as an input parameter\
          \ in the next request. Parameter pageSize can be omitted in this case. If\
          \ you included optional fields to the first request, you will need to include\
          \ those in each new call. Only 'folders' kind is supported"
        required: false
        schema:
          type: string
          description: "A pagination request will return a token that applies an offset\
            \ to the next page. The returned value should be used as an input parameter\
            \ in the next request. Parameter pageSize can be omitted in this case.\
            \ If you included optional fields to the first request, you will need\
            \ to include those in each new call. Only 'folders' kind is supported"
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `superParentIds` - List of super parent folder IDs (applicable to 'Selective Sharing' labs feature)
          * `metadata` - Folder metadata entries
          * `customItemTypeId` - Work Item custom item type Id
          * `customFields` - Custom fields
          * `customColumnIds` - Associated custom field IDs
          * `contractType` - Contract type
          * `description` - Description
          * `attachmentCount` - Attachment count
          * `hasAttachments` - Has attachments
          * `briefDescription` - Brief description
          * `space` - Is folder a space
          * `finance` - Project Finance fields
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - superParentIds
                - metadata
                - customItemTypeId
                - customFields
                - customColumnIds
                - contractType
                - description
                - attachmentCount
                - hasAttachments
                - briefDescription
                - space
                - finance
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Folder'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
    post:
      tags:
      - Folders & Projects
      summary: Create Folder
      description: Create a folder within a folder. Specify virtual rootFolderId in
        order to create a folder in the account root.
      operationId: POST:/folders/single/folders
      parameters:
      - name: folderId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FolderId'
      - name: title
        in: query
        description: "Title, cannot be empty"
        required: true
        schema:
          type: string
          description: "Title, cannot be empty"
      - name: description
        in: query
        description: "Folder description. If not specified, will be left blank"
        required: false
        schema:
          type: string
          description: "Folder description. If not specified, will be left blank"
      - name: shareds
        in: query
        description: Users or invited users to share folder with. Folder is always
          shared with creator
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Users or invited users to share folder with. Folder is
                always shared with creator
              items:
                $ref: '#/components/schemas/UserId'
      - name: metadata
        in: query
        description: "Metadata to be added to newly created folder. Limit : 100"
        required: false
        content:
          application/json:
            schema:
              maxItems: 100
              type: array
              description: Metadata to be added to newly created folder
              items:
                $ref: '#/components/schemas/Metadata'
      - name: customFields
        in: query
        description: "List of custom fields to be set upon task creation. Limit :\
          \ 100"
        required: false
        content:
          application/json:
            schema:
              maxItems: 100
              type: array
              description: List of custom fields to be set upon task creation
              items:
                $ref: '#/components/schemas/CustomField'
      - name: customColumns
        in: query
        description: List of custom fields associated with folder
        required: false
        content:
          application/json:
            schema:
              type: array
              description: List of custom fields associated with folder
              items:
                $ref: '#/components/schemas/CustomFieldId'
      - name: project
        in: query
        description: Project settings in order to create project
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FolderProjectCreate'
      - name: userAccessRoles
        in: query
        description: Access Roles assigned to users with which folder will be shared
        required: false
        schema:
          $ref: '#/components/schemas/UserId'
      - name: withInvitations
        in: query
        description: Include invitations in ownerIds & sharedIds list
        required: false
        schema:
          type: boolean
          description: Include invitations in ownerIds & sharedIds list
      - name: customItemTypeId
        in: query
        description: Custom Item Type ID to create a project from
        required: true
        schema:
          type: string
          description: Custom Item Type ID to create a project from
      - name: plainTextCustomFields
        in: query
        description: Strip HTML tags from custom fields
        required: false
        schema:
          type: boolean
          description: Strip HTML tags from custom fields
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `customItemTypeId` - Custom Item Type ID
          * `contractType` - Contract type
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - customItemTypeId
                - contractType
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Folder'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /spaces/{spaceId}/folders:
    get:
      tags:
      - Folders & Projects
      summary: Get Folder Tree
      description: |-
        Returns the list of folders from a specific space in the current account.<br>
        The method operates in two modes:<br>
        <ul>
        <li><b>Folder Tree Mode</b>: Activated if no filter parameters are provided. This mode returns the required
        space, it's descendant folders, the root folder, and the recycle bin folder (note that "deleted" parameter
        can affect the result, see below).
        Filtering can be requested in this mode using the descendants=true parameter along with filter parameters.

        <li><b>Folders Mode</b>: Activated if the parameter descendant=false is specified or if there is at least
        one filter parameter, e.g., project=true. This mode returns only required space's folders filtered by the
        specified parameters.
        </ul>
        The chosen mode can be identified by the "kind" key in the result JSON body, with "kind": "folderTree"
        for Folder Tree Mode and "kind": "folders" for Folders Mode.
      operationId: GET:/spaces/single/folders
      parameters:
      - name: spaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SpaceId'
      - name: permalink
        in: query
        description: "Folder permalink, exact match"
        required: false
        schema:
          type: string
          description: "Folder permalink, exact match"
      - name: descendants
        in: query
        description: Adds all descendant folders to search scope
        required: false
        schema:
          type: boolean
          description: Adds all descendant folders to search scope
      - name: metadata
        in: query
        description: Folders metadata filter
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      - name: customField
        in: query
        description: "[Deprecated] It is recommended to use 'customFields' parameter.\
          \ Custom field filter"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldFilter'
      - name: customFields
        in: query
        description: "Custom field filters, exact match. Limit : 25"
        required: false
        content:
          application/json:
            schema:
              maxItems: 25
              type: array
              description: "Custom field filters, exact match"
              items:
                $ref: '#/components/schemas/CustomFieldFilter'
      - name: updatedDate
        in: query
        description: "Updated date filter, range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: withInvitations
        in: query
        description: Include invitations in sharedIds list
        required: false
        schema:
          type: boolean
          description: Include invitations in sharedIds list
      - name: project
        in: query
        description: Filter only projects (true) / only folders (false)
        required: false
        schema:
          type: boolean
          description: Filter only projects (true) / only folders (false)
      - name: deleted
        in: query
        description: Get folders from Root (false) / Recycle Bin (true). This parameter
          does not affect method's mode.
        required: false
        schema:
          type: boolean
          description: Get folders from Root (false) / Recycle Bin (true). This parameter
            does not affect method's mode.
      - name: contractTypes
        in: query
        description: |-
          Contract type filter
          * `Billable` - Billable
          * `NonBillable` - Non-Billable
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Contract type filter
              items:
                $ref: '#/components/schemas/ContractType'
      - name: plainTextCustomFields
        in: query
        description: Strip HTML tags from custom fields
        required: false
        schema:
          type: boolean
          description: Strip HTML tags from custom fields
      - name: customItemTypes
        in: query
        description: "Custom item types filter. Standard types (project, folder) IDs\
          \ are not allowed. Limit : 1000"
        required: false
        content:
          application/json:
            schema:
              maxItems: 1000
              type: array
              description: "Custom item types filter. Standard types (project, folder)\
                \ IDs are not allowed."
              items:
                $ref: '#/components/schemas/EntityTypeId'
      - name: pageSize
        in: query
        description: The number of folders to return (max 1000 items per page). Only
          'folders' kind is supported
        required: false
        schema:
          type: number
          description: The number of folders to return (max 1000 items per page).
            Only 'folders' kind is supported
      - name: nextPageToken
        in: query
        description: "A pagination request will return a token that applies an offset\
          \ to the next page. The returned value should be used as an input parameter\
          \ in the next request. Parameter pageSize can be omitted in this case. If\
          \ you included optional fields to the first request, you will need to include\
          \ those in each new call. Only 'folders' kind is supported"
        required: false
        schema:
          type: string
          description: "A pagination request will return a token that applies an offset\
            \ to the next page. The returned value should be used as an input parameter\
            \ in the next request. Parameter pageSize can be omitted in this case.\
            \ If you included optional fields to the first request, you will need\
            \ to include those in each new call. Only 'folders' kind is supported"
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `superParentIds` - List of super parent folder IDs (applicable to 'Selective Sharing' labs feature)
          * `metadata` - Folder metadata entries
          * `customItemTypeId` - Work Item custom item type Id
          * `customFields` - Custom fields
          * `customColumnIds` - Associated custom field IDs
          * `contractType` - Contract type
          * `description` - Description
          * `attachmentCount` - Attachment count
          * `hasAttachments` - Has attachments
          * `briefDescription` - Brief description
          * `space` - Is folder a space
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - superParentIds
                - metadata
                - customItemTypeId
                - customFields
                - customColumnIds
                - contractType
                - description
                - attachmentCount
                - hasAttachments
                - briefDescription
                - space
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Folder'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /folders/{folderIds}/folders_history:
    get:
      tags:
      - Folders & Projects
      summary: Query Folders fields history
      description: Query Folders fields history.
      operationId: GET:/folders/multi/folders_history
      parameters:
      - name: folderIds
        in: path
        description: "Comma-separated list of ids. Limit : 1000"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 1000
              type: array
              items:
                $ref: '#/components/schemas/FolderId'
      - name: updatedDate
        in: query
        description: Update date filter
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `plannedCost` - Planned cost change history
          * `plannedFees` - Planned fees change history
          * `actualFees` - Actual fees change history
          * `actualCost` - Actual cost change history
          * `budget` - Budget change history
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - plannedCost
                - plannedFees
                - actualFees
                - actualCost
                - budget
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FolderChangeHistory'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /folders/{folderIds}:
    get:
      tags:
      - Folders & Projects
      summary: Get Folder
      description: Returns complete information about specified folders.
      operationId: GET:/folders/multi
      parameters:
      - name: folderIds
        in: path
        description: "Comma-separated list of ids. Limit : 1000"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 1000
              type: array
              items:
                $ref: '#/components/schemas/FolderId'
      - name: withInvitations
        in: query
        description: Include invitations in sharedIds list
        required: false
        schema:
          type: boolean
          description: Include invitations in sharedIds list
      - name: plainTextCustomFields
        in: query
        description: Strip HTML tags from custom fields
        required: false
        schema:
          type: boolean
          description: Strip HTML tags from custom fields
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `accessRoles` - Folder Access Roles
          * `customItemTypeId` - Work Item custom item type Id
          * `customColumnIds` - Associated custom field IDs
          * `contractType` - Contract type
          * `attachmentCount` - Attachment count
          * `briefDescription` - Get brief description
          * `finance` - Project Finance fields
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - accessRoles
                - customItemTypeId
                - customColumnIds
                - contractType
                - attachmentCount
                - briefDescription
                - finance
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Folder'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
    put:
      tags:
      - Folders & Projects
      summary: Modify Folder
      description: Update folders.
      operationId: PUT:/folders/multi
      parameters:
      - name: folderIds
        in: path
        description: "Comma-separated list of ids. Limit : 100"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 100
              type: array
              items:
                $ref: '#/components/schemas/FolderId'
      - name: customFields
        in: query
        description: "Custom fields to be updated or deleted (null value removes field).\
          \ Limit : 100"
        required: false
        content:
          application/json:
            schema:
              maxItems: 100
              type: array
              description: Custom fields to be updated or deleted (null value removes
                field)
              items:
                $ref: '#/components/schemas/CustomField'
      - name: convertToCustomItemType
        in: query
        description: Custom Item Type id
        required: false
        schema:
          $ref: '#/components/schemas/EntityTypeId'
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `contractType` - Contract type
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - contractType
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Folder'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /copy_folder/{folderId}:
    post:
      tags:
      - Folders & Projects
      summary: Copy Folder
      description: "Copy folder subtree, returns parent folder subtree."
      operationId: POST:/copy_folder/single
      parameters:
      - name: folderId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FolderId'
      - name: parent
        in: query
        description: ID of parent folder
        required: true
        schema:
          $ref: '#/components/schemas/FolderId'
      - name: title
        in: query
        description: "Title, cannot be empty"
        required: true
        schema:
          type: string
          description: "Title, cannot be empty"
      - name: titlePrefix
        in: query
        description: Title prefix for all copied tasks
        required: false
        schema:
          type: string
          description: Title prefix for all copied tasks
      - name: copyDescriptions
        in: query
        description: Copy descriptions or leave empty
        required: false
        schema:
          type: boolean
          description: Copy descriptions or leave empty
      - name: copyResponsibles
        in: query
        description: Copy responsibles
        required: false
        schema:
          type: boolean
          description: Copy responsibles
      - name: addResponsibles
        in: query
        description: Add specified users to task responsible list
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Add specified users to task responsible list
              items:
                $ref: '#/components/schemas/UserId'
      - name: removeResponsibles
        in: query
        description: Remove specified users from task responsible list
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Remove specified users from task responsible list
              items:
                $ref: '#/components/schemas/UserId'
      - name: copyCustomFields
        in: query
        description: Copy custom fields
        required: false
        schema:
          type: boolean
          description: Copy custom fields
      - name: copyCustomStatuses
        in: query
        description: Copy custom statuses or set according to workflow otherwise
        required: false
        schema:
          type: boolean
          description: Copy custom statuses or set according to workflow otherwise
      - name: copyStatuses
        in: query
        description: Copy task statuses or set to Active otherwise
        required: false
        schema:
          type: boolean
          description: Copy task statuses or set to Active otherwise
      - name: copyParents
        in: query
        description: Preserve parent folders
        required: false
        schema:
          type: boolean
          description: Preserve parent folders
      - name: rescheduleDate
        in: query
        description: "Date to use in task rescheduling. Note that only active tasks\
          \ can be rescheduled. To activate and reschedule all tasks, use 'rescheduleDate'\
          \ in combination with copyStatuses = false"
        required: false
        schema:
          type: string
          description: "Date to use in task rescheduling. Note that only active tasks\
            \ can be rescheduled. To activate and reschedule all tasks, use 'rescheduleDate'\
            \ in combination with copyStatuses = false"
      - name: rescheduleMode
        in: query
        description: |-
          Mode to be used for rescheduling (based on first or last date), has effect only if reschedule date is specified.
          * `Start` - Tasks in scope are rescheduled starting from reschedule date
          * `End` - Tasks in scope are rescheduled ending with reschedule date
        required: false
        schema:
          $ref: '#/components/schemas/RescheduleMode'
      - name: entryLimit
        in: query
        description: "Limit maximum allowed number for tasks/folders in tree for copy,\
          \ operation will fail if limit is exceeded, should be 1..250"
        required: false
        schema:
          type: number
          description: "Limit maximum allowed number for tasks/folders in tree for\
            \ copy, operation will fail if limit is exceeded, should be 1..250"
      - name: plainTextCustomFields
        in: query
        description: Strip HTML tags from custom fields
        required: false
        schema:
          type: boolean
          description: Strip HTML tags from custom fields
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Folder'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /copy_folder_async/{folderId}:
    post:
      tags:
      - Folders & Projects
      summary: Copy Folder async
      description: "Copy folder subtree, returns async job."
      operationId: POST:/copy_folder_async/single
      parameters:
      - name: folderId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FolderId'
      - name: parent
        in: query
        description: ID of parent folder
        required: true
        schema:
          $ref: '#/components/schemas/FolderId'
      - name: title
        in: query
        description: "Title, cannot be empty"
        required: true
        schema:
          type: string
          description: "Title, cannot be empty"
      - name: titlePrefix
        in: query
        description: Title prefix for all copied tasks
        required: false
        schema:
          type: string
          description: Title prefix for all copied tasks
      - name: copyDescriptions
        in: query
        description: Copy descriptions or leave empty
        required: false
        schema:
          type: boolean
          description: Copy descriptions or leave empty
      - name: copyResponsibles
        in: query
        description: Copy responsibles
        required: false
        schema:
          type: boolean
          description: Copy responsibles
      - name: addResponsibles
        in: query
        description: Add specified users to task responsible list
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Add specified users to task responsible list
              items:
                $ref: '#/components/schemas/UserId'
      - name: removeResponsibles
        in: query
        description: Remove specified users from task responsible list
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Remove specified users from task responsible list
              items:
                $ref: '#/components/schemas/UserId'
      - name: copyCustomFields
        in: query
        description: Copy custom fields
        required: false
        schema:
          type: boolean
          description: Copy custom fields
      - name: copyCustomStatuses
        in: query
        description: Copy custom statuses or set according to workflow otherwise
        required: false
        schema:
          type: boolean
          description: Copy custom statuses or set according to workflow otherwise
      - name: copyStatuses
        in: query
        description: Copy task statuses or set to Active otherwise
        required: false
        schema:
          type: boolean
          description: Copy task statuses or set to Active otherwise
      - name: copyParents
        in: query
        description: Preserve parent folders
        required: false
        schema:
          type: boolean
          description: Preserve parent folders
      - name: rescheduleDate
        in: query
        description: "Date to use in task rescheduling. Note that only active tasks\
          \ can be rescheduled. To activate and reschedule all tasks, use 'rescheduleDate'\
          \ in combination with copyStatuses = false"
        required: false
        schema:
          type: string
          description: "Date to use in task rescheduling. Note that only active tasks\
            \ can be rescheduled. To activate and reschedule all tasks, use 'rescheduleDate'\
            \ in combination with copyStatuses = false"
      - name: rescheduleMode
        in: query
        description: |-
          Mode to be used for rescheduling (based on first or last date), has effect only if reschedule date is specified.
          * `Start` - Tasks in scope are rescheduled starting from reschedule date
          * `End` - Tasks in scope are rescheduled ending with reschedule date
        required: false
        schema:
          $ref: '#/components/schemas/RescheduleMode'
      - name: entryLimit
        in: query
        description: "Limit maximum allowed number for tasks/folders in tree for copy,\
          \ operation will fail if limit is exceeded, should be 1..250"
        required: false
        schema:
          type: number
          description: "Limit maximum allowed number for tasks/folders in tree for\
            \ copy, operation will fail if limit is exceeded, should be 1..250"
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AsyncJob'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /folders/{folderId}:
    put:
      tags:
      - Folders & Projects
      summary: Modify Folder
      description: Update folder.
      operationId: PUT:/folders/single
      parameters:
      - name: folderId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FolderId'
      - name: title
        in: query
        description: Title
        required: false
        schema:
          type: string
          description: Title
      - name: description
        in: query
        description: Folder description
        required: false
        schema:
          type: string
          description: Folder description
      - name: addParents
        in: query
        description: "Parent folders from same account to add, cannot contain rootFolderId\
          \ and recycleBinId"
        required: false
        content:
          application/json:
            schema:
              type: array
              description: "Parent folders from same account to add, cannot contain\
                \ rootFolderId and recycleBinId"
              items:
                $ref: '#/components/schemas/FolderId'
      - name: removeParents
        in: query
        description: "Parent folders from same account to remove, cannot contain rootFolderId\
          \ and recycleBinId"
        required: false
        content:
          application/json:
            schema:
              type: array
              description: "Parent folders from same account to remove, cannot contain\
                \ rootFolderId and recycleBinId"
              items:
                $ref: '#/components/schemas/FolderId'
      - name: addShareds
        in: query
        description: Share folder with specified users or invitations
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Share folder with specified users or invitations
              items:
                $ref: '#/components/schemas/UserId'
      - name: removeShareds
        in: query
        description: Unshare folder from specified users or invitations
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Unshare folder from specified users or invitations
              items:
                $ref: '#/components/schemas/UserId'
      - name: metadata
        in: query
        description: "Metadata to be updated. Limit : 100"
        required: false
        content:
          application/json:
            schema:
              maxItems: 100
              type: array
              description: Metadata to be updated
              items:
                $ref: '#/components/schemas/Metadata'
      - name: restore
        in: query
        description: Restore folder from Recycled Bin
        required: false
        schema:
          type: boolean
          description: Restore folder from Recycled Bin
      - name: customFields
        in: query
        description: "Custom fields to be updated or deleted (null value removes field).\
          \ Limit : 100"
        required: false
        content:
          application/json:
            schema:
              maxItems: 100
              type: array
              description: Custom fields to be updated or deleted (null value removes
                field)
              items:
                $ref: '#/components/schemas/CustomField'
      - name: customColumns
        in: query
        description: List of custom fields associated with folder
        required: false
        content:
          application/json:
            schema:
              type: array
              description: List of custom fields associated with folder
              items:
                $ref: '#/components/schemas/CustomFieldId'
      - name: clearCustomColumns
        in: query
        description: Remove all custom fields associated with folder
        required: false
        schema:
          type: boolean
          description: Remove all custom fields associated with folder
      - name: project
        in: query
        description: Project settings (update project or convert folder to project).
          Use null value to convert project to folder
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FolderProjectUpdate'
      - name: addAccessRoles
        in: query
        description: Specifies users with Access Roles for folder
        required: false
        schema:
          $ref: '#/components/schemas/UserId'
      - name: removeAccessRoles
        in: query
        description: Specifies users whose Access Roles should be removed
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Specifies users whose Access Roles should be removed
              items:
                $ref: '#/components/schemas/UserId'
      - name: withInvitations
        in: query
        description: Include invitations in ownerIds & sharedIds list
        required: true
        schema:
          type: boolean
          description: Include invitations in ownerIds & sharedIds list
      - name: convertToCustomItemType
        in: query
        description: Custom Item Type id
        required: false
        schema:
          $ref: '#/components/schemas/EntityTypeId'
      - name: plainTextCustomFields
        in: query
        description: Strip HTML tags from custom fields
        required: false
        schema:
          type: boolean
          description: Strip HTML tags from custom fields
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `contractType` - Contract type
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - contractType
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Folder'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
    delete:
      tags:
      - Folders & Projects
      summary: Delete Folder
      description: Move folder and all descendant folders and tasks to Recycle Bin
        unless they have parents outside of deletion scope.
      operationId: DELETE:/folders/single
      parameters:
      - name: folderId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FolderId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Folder'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /groups/{groupId}:
    get:
      tags:
      - Groups
      summary: Query Groups
      description: Returns complete information about single group.
      operationId: GET:/groups/single
      parameters:
      - name: groupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `metadata` - Group metadata entries
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - metadata
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadOnlyGroup
        - amReadWriteGroup
    put:
      tags:
      - Groups
      summary: Modify Groups
      description: Update group by id.
      operationId: PUT:/groups/single
      parameters:
      - name: groupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      - name: title
        in: query
        description: Title of group
        required: false
        schema:
          type: string
          description: Title of group
      - name: addMembers
        in: query
        description: Add specified users to group
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Add specified users to group
              items:
                $ref: '#/components/schemas/UserId'
      - name: removeMembers
        in: query
        description: Remove specified users from group
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Remove specified users from group
              items:
                $ref: '#/components/schemas/UserId'
      - name: addInvitations
        in: query
        description: Add specified invitations to group
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Add specified invitations to group
              items:
                $ref: '#/components/schemas/InvitationId'
      - name: removeInvitations
        in: query
        description: Remove specified invitations from group
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Remove specified invitations from group
              items:
                $ref: '#/components/schemas/InvitationId'
      - name: parent
        in: query
        description: Parent group
        required: false
        schema:
          $ref: '#/components/schemas/UserId'
      - name: avatar
        in: query
        description: Info for group avatar creation
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Avatar'
      - name: metadata
        in: query
        description: "Metadata to be updated. Limit : 100"
        required: false
        content:
          application/json:
            schema:
              maxItems: 100
              type: array
              description: Metadata to be updated
              items:
                $ref: '#/components/schemas/Metadata'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadWriteGroup
    delete:
      tags:
      - Groups
      summary: Delete Groups
      description: Delete group by Id.
      operationId: DELETE:/groups/single
      parameters:
      - name: groupId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      - name: test
        in: query
        description: Check that group can be removed
        required: false
        schema:
          type: boolean
          description: Check that group can be removed
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadWriteGroup
  /groups:
    get:
      tags:
      - Groups
      summary: Query Groups
      description: Returns all groups in the account.
      operationId: GET:/groups/empty
      parameters:
      - name: metadata
        in: query
        description: "Metadata filter, exact match for metadata key or key-value pair"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      - name: pageSize
        in: query
        description: Page size
        required: false
        schema:
          type: number
          description: Page size
      - name: pageToken
        in: query
        description: "Page token, overrides any other parameters in request"
        required: false
        schema:
          type: string
          description: "Page token, overrides any other parameters in request"
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `metadata` - Group metadata
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - metadata
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadOnlyGroup
        - amReadWriteGroup
    post:
      tags:
      - Groups
      summary: Create Groups
      description: Create group in account.
      operationId: POST:/groups/empty
      parameters:
      - name: title
        in: query
        description: "Title of group, required"
        required: true
        schema:
          type: string
          description: "Title of group, required"
      - name: members
        in: query
        description: Group users
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Group users
              items:
                $ref: '#/components/schemas/UserId'
      - name: parent
        in: query
        description: Parent group
        required: false
        schema:
          $ref: '#/components/schemas/UserId'
      - name: avatar
        in: query
        description: Info for group avatar creation
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Avatar'
      - name: metadata
        in: query
        description: "Metadata to be added to newly created group. Limit : 100"
        required: false
        content:
          application/json:
            schema:
              maxItems: 100
              type: array
              description: Metadata to be added to newly created group
              items:
                $ref: '#/components/schemas/Metadata'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadWriteGroup
  /groups_bulk:
    put:
      tags:
      - Groups
      summary: Bulk modify groups
      description: Update groups.
      operationId: PUT:/groups_bulk/empty
      parameters:
      - name: members
        in: query
        description: "Update group members. Limit 20. Limit : 20"
        required: true
        content:
          application/json:
            schema:
              maxItems: 20
              type: array
              description: Update group members. Limit 20
              items:
                $ref: '#/components/schemas/GroupModify'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadWriteGroup
  /contacts/{contactIds}/hourly_rates:
    get:
      tags:
      - Hourly rates
      summary: Get Budget Rates
      description: Load budget rates for specified contacts.
      operationId: GET:/contacts/multi/hourly_rates
      parameters:
      - name: contactIds
        in: path
        description: "Comma-separated list of ids. Limit : 1000"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 1000
              type: array
              items:
                oneOf:
                - $ref: '#/components/schemas/UserId'
                - $ref: '#/components/schemas/InvitationId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BudgetRatesAggregated'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /folders/{folderId}/hourly_rates:
    get:
      tags:
      - Hourly rates
      summary: Get Budget Rates
      description: Return project hourly rates.
      operationId: GET:/folders/single/hourly_rates
      parameters:
      - name: folderId
        in: path
        description: "Comma-separated list of ids. Limit : 1000"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 1000
              type: array
              items:
                $ref: '#/components/schemas/FolderId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BudgetRatesAggregated'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
    put:
      tags:
      - Hourly rates
      summary: Modify Budget Rates
      description: "Provision hourly rates to subject (user, placeholder) in specific\
        \ project. Max 100 items per request."
      operationId: PUT:/folders/single/hourly_rates
      parameters:
      - name: folderId
        in: path
        description: "Comma-separated list of ids. Limit : 100"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 100
              type: array
              items:
                $ref: '#/components/schemas/FolderId'
      - name: rates
        in: query
        description: "Provision hourly rates to users. Max 100 users per request.\
          \ Limit : 100"
        required: true
        content:
          application/json:
            schema:
              maxItems: 100
              type: array
              description: Provision hourly rates to users. Max 100 users per request
              items:
                $ref: '#/components/schemas/BudgetRate'
      - name: enableCalculations
        in: query
        description: Trigger rates recalculation
        required: false
        schema:
          type: boolean
          description: Trigger rates recalculation
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BudgetRatesAggregated'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /placeholders/{placeholderIds}/hourly_rates:
    get:
      tags:
      - Hourly rates
      summary: Get Budget Rates
      description: Load budget rates for specified placeholders.
      operationId: GET:/placeholders/multi/hourly_rates
      parameters:
      - name: placeholderIds
        in: path
        description: "Comma-separated list of ids. Limit : 1000"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 1000
              type: array
              items:
                $ref: '#/components/schemas/PlaceholderId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BudgetRatesAggregated'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /hourly_rates:
    put:
      tags:
      - Hourly rates
      summary: Modify Budget Rates
      description: Provision hourly rates to users and placeholders. Max 100 items
        per request.
      operationId: PUT:/hourly_rates/empty
      parameters:
      - name: rates
        in: query
        description: "Provision hourly rates to users. Max 100 users per request.\
          \ Limit : 100"
        required: true
        content:
          application/json:
            schema:
              maxItems: 100
              type: array
              description: Provision hourly rates to users. Max 100 users per request
              items:
                $ref: '#/components/schemas/BudgetRate'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BudgetRatesAggregated'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /folders/{folderId}/project_team_members:
    delete:
      tags:
      - Hourly rates
      summary: Exclude team members
      description: Exclude team member from the project. Max 100 items per request.
      operationId: DELETE:/folders/single/project_team_members
      parameters:
      - name: folderId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FolderId'
      - name: rateSubjects
        in: query
        description: "Project team members to remove. Max 100 per request. Limit :\
          \ 100"
        required: true
        content:
          application/json:
            schema:
              maxItems: 100
              type: array
              description: Project team members to remove. Max 100 per request
              items:
                $ref: '#/components/schemas/UserId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      type: string
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /contacts/{contactIds}/hourly_rates_provision:
    put:
      tags:
      - Hourly rates provision
      summary: Provision
      description: Provision hourly rates to users. Max 100 users per request.
      operationId: PUT:/contacts/multi/hourly_rates_provision
      parameters:
      - name: contactIds
        in: path
        description: "Comma-separated list of ids. Limit : 100"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 100
              type: array
              items:
                oneOf:
                - $ref: '#/components/schemas/UserId'
                - $ref: '#/components/schemas/InvitationId'
      - name: userRates
        in: query
        description: "Provision hourly rates to users. Max 100 users per request.\
          \ Limit : 100"
        required: true
        content:
          application/json:
            schema:
              maxItems: 100
              type: array
              description: Provision hourly rates to users. Max 100 users per request
              items:
                $ref: '#/components/schemas/BudgetRateProvision'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Rates'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /ids:
    get:
      tags:
      - IDs
      summary: Legacy API v2 IDs converter
      description: Convert APIv2 legacy IDs to APIv4 format for specific entity type.
      operationId: GET:/ids/empty
      parameters:
      - name: type
        in: query
        description: |-
          Entity type
          * `ApiV2Task` - API v2 task
          * `ApiV2Attachment` - API v2 attachment
          * `ApiV2Comment` - API v2 comment
          * `ApiV2Folder` - API v2 folder
          * `ApiV2Timelog` - API v2 timelog entry
          * `ApiV2User` - API v2 user or group
          * `ApiV2Account` - API v2 account
        required: true
        schema:
          $ref: '#/components/schemas/IdsType'
      - name: ids
        in: query
        description: "List of APIv2 legacy IDs. Limit : 1000"
        required: true
        content:
          application/json:
            schema:
              maxItems: 1000
              type: array
              description: List of APIv2 legacy IDs
              items:
                type: string
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Apiv3Apiv2Id'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /invitations:
    get:
      tags:
      - Invitations
      summary: Query Invitations
      description: Get all invitations for current account.
      operationId: GET:/invitations/empty
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Invitation'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadOnlyInvitation
        - amReadWriteInvitation
    post:
      tags:
      - Invitations
      summary: Create Invitation
      description: Create an invitation into the current account.
      operationId: POST:/invitations/empty
      parameters:
      - name: email
        in: query
        description: Create an invitation for current email
        required: true
        schema:
          type: string
          description: Create an invitation for current email
      - name: firstName
        in: query
        description: First name of invited user
        required: false
        schema:
          type: string
          description: First name of invited user
      - name: lastName
        in: query
        description: Last name of invited user
        required: false
        schema:
          type: string
          description: Last name of invited user
      - name: role
        in: query
        description: "[Deprecated] It is recommended to use 'userTypeId' parameter\
          \ instead. Set user role in account. Mutually exclusive with userTypeId\
          \ param\n* `User` - \n* `Collaborator` - "
        required: false
        schema:
          $ref: '#/components/schemas/UserRole'
      - name: external
        in: query
        description: "[Deprecated] It is recommended to use 'userTypeId' parameter\
          \ instead. Set external flag for invited user. Flag 'External' can be applied\
          \ only to the role 'User'. Mutually exclusive with userTypeId param"
        required: false
        schema:
          type: boolean
          description: "[Deprecated] It is recommended to use 'userTypeId' parameter\
            \ instead. Set external flag for invited user. Flag 'External' can be\
            \ applied only to the role 'User'. Mutually exclusive with userTypeId\
            \ param"
      - name: subject
        in: query
        description: Custom message subject. Not available for free accounts
        required: false
        schema:
          type: string
          description: Custom message subject. Not available for free accounts
      - name: message
        in: query
        description: Custom message body. Not available for free accounts
        required: false
        schema:
          type: string
          description: Custom message body. Not available for free accounts
      - name: userTypeId
        in: query
        description: Set user type in account. Mutually exclusive with role and external
          params
        required: false
        schema:
          type: string
          description: Set user type in account. Mutually exclusive with role and
            external params
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Invitation'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadWriteInvitation
  /invitations/{invitationId}:
    put:
      tags:
      - Invitations
      summary: Update Invitation
      description: Update invitation by ID and/or resend invitation.
      operationId: PUT:/invitations/single
      parameters:
      - name: invitationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/InvitationId'
      - name: resend
        in: query
        description: Resend invitation
        required: false
        schema:
          type: boolean
          description: Resend invitation
      - name: role
        in: query
        description: "[Deprecated] It is recommended to use 'userTypeId' parameter\
          \ instead. Change role of user in account for pending invitation. Mutually\
          \ exclusive with userTypeId param. \n* `User` - \n* `Collaborator` - "
        required: false
        schema:
          $ref: '#/components/schemas/UserRole'
      - name: external
        in: query
        description: "[Deprecated] It is recommended to use 'userTypeId' parameter\
          \ instead. Change external flag for pending invitation. Flag 'External'\
          \ can be applied only to the role 'User'. Mutually exclusive with userTypeId\
          \ param"
        required: false
        schema:
          type: boolean
          description: "[Deprecated] It is recommended to use 'userTypeId' parameter\
            \ instead. Change external flag for pending invitation. Flag 'External'\
            \ can be applied only to the role 'User'. Mutually exclusive with userTypeId\
            \ param"
      - name: userTypeId
        in: query
        description: Change user type of user in account for pending invitation. Mutually
          exclusive with role and external params
        required: false
        schema:
          type: string
          description: Change user type of user in account for pending invitation.
            Mutually exclusive with role and external params
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Invitation'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadWriteInvitation
    delete:
      tags:
      - Invitations
      summary: Delete Invitation
      description: Delete invitation by ID.
      operationId: DELETE:/invitations/single
      parameters:
      - name: invitationId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/InvitationId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Invitation'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadWriteInvitation
  /jobroles:
    get:
      tags:
      - Job Roles
      summary: Query Job Roles
      description: Returns list of all job roles in account.
      operationId: GET:/jobroles/empty
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobRole'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadOnlyUser
        - amReadWriteUser
    post:
      tags:
      - Job Roles
      summary: Create Job Role
      description: Create Job Role.
      operationId: POST:/jobroles/empty
      parameters:
      - name: title
        in: query
        description: Name of Job Role
        required: true
        schema:
          type: string
          description: Name of Job Role
      - name: shortTitle
        in: query
        description: Short name of Job Role
        required: false
        schema:
          type: string
          description: Short name of Job Role
      - name: avatarColor
        in: query
        description: |-
          Job Role Avatar color
          * `Purple1` - #BA68C8
          * `Purple2` - #8E24AA
          * `Blue1` - #64B5F6
          * `Pink1` - #F06292
          * `Pink2` - #D81B60
          * `Red1` - #E57373
          * `Red2` - #E53935
          * `Turquoise1` - #4DD0E1
          * `Turquoise2` - #00ACC1
          * `Blue2` - #1E88E5
          * `DarkBlue1` - #7986CB
          * `Green2` - #43A047
          * `DarkBlue2` - #3949AB
          * `Green1` - #81C784
          * `Yellow1` - #FBC02D
          * `Yellow2` - #F9A825
          * `Orange2` - #F57C00
          * `DarkCyan2` - #00897B
          * `Orange1` - #FF9800
          * `DarkCyan1` - #4DB6AC
          * `YellowGreen2` - #AFB42B
          * `YellowGreen1` - #C0CA33
        required: false
        schema:
          $ref: '#/components/schemas/UserAvatarColor'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobRole'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadWriteUser
  /jobroles/{jobroleIds}:
    get:
      tags:
      - Job Roles
      summary: Query Job Roles
      description: Get job roles list.
      operationId: GET:/jobroles/multi
      parameters:
      - name: jobroleIds
        in: path
        description: "Comma-separated list of ids. Limit : 1000"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 1000
              type: array
              items:
                $ref: '#/components/schemas/JobRoleId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobRole'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadOnlyUser
        - amReadWriteUser
  /jobroles/{jobroleId}:
    put:
      tags:
      - Job Roles
      summary: Update Job Role
      description: Create Job Role.
      operationId: PUT:/jobroles/single
      parameters:
      - name: jobroleId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/JobRoleId'
      - name: title
        in: query
        description: Name of Job Role
        required: false
        schema:
          type: string
          description: Name of Job Role
      - name: shortTitle
        in: query
        description: Short name of Job Role
        required: false
        schema:
          type: string
          description: Short name of Job Role
      - name: avatarColor
        in: query
        description: Job Role Avatar color
        required: false
        schema:
          type: string
          description: Job Role Avatar color
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobRole'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadWriteUser
    delete:
      tags:
      - Job Roles
      summary: Delete Job Role
      description: Delete job role by Id.
      operationId: DELETE:/jobroles/single
      parameters:
      - name: jobroleId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/JobRoleId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/JobRole'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadWriteUser
  /placeholders:
    get:
      tags:
      - Placeholders
      summary: Query Placeholders
      description: Returns list of all placeholders in account.
      operationId: GET:/placeholders/empty
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Placeholder'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadOnlyUser
        - amReadWriteUser
  /placeholders/{placeholderIds}:
    get:
      tags:
      - Placeholders
      summary: Query Placeholders
      description: Get placeholders list.
      operationId: GET:/placeholders/multi
      parameters:
      - name: placeholderIds
        in: path
        description: "Comma-separated list of ids. Limit : 1000"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 1000
              type: array
              items:
                $ref: '#/components/schemas/PlaceholderId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Placeholder'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadOnlyUser
        - amReadWriteUser
  /folders/{folderId}/rollups:
    get:
      tags:
      - Rollups
      summary: Query rollup settings for items
      description: Get rollup settings for folders.
      operationId: GET:/folders/single/rollups
      parameters:
      - name: folderId
        in: path
        description: "Comma-separated list of ids. Limit : 1000"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 1000
              type: array
              items:
                $ref: '#/components/schemas/FolderId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RollupSettings'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
    put:
      tags:
      - Rollups
      summary: Change rollup settings for item
      description: Update folder rollup state.
      operationId: PUT:/folders/single/rollups
      parameters:
      - name: folderId
        in: path
        description: "Comma-separated list of ids. Limit : 100"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 100
              type: array
              items:
                $ref: '#/components/schemas/FolderId'
      - name: rollups
        in: query
        description: "Rollup settings updates. Limit : 20"
        required: true
        content:
          application/json:
            schema:
              maxItems: 20
              type: array
              description: Rollup settings updates
              items:
                $ref: '#/components/schemas/ModifyFieldRollupSettings'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RollupSettings'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /tasks/{taskId}/rollups:
    get:
      tags:
      - Rollups
      summary: Query rollup settings for items
      description: Get rollup settings for tasks.
      operationId: GET:/tasks/single/rollups
      parameters:
      - name: taskId
        in: path
        description: "Comma-separated list of ids. Limit : 1000"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 1000
              type: array
              items:
                $ref: '#/components/schemas/TaskId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RollupSettings'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
    put:
      tags:
      - Rollups
      summary: Change rollup settings for item
      description: Update task rollup state.
      operationId: PUT:/tasks/single/rollups
      parameters:
      - name: taskId
        in: path
        description: "Comma-separated list of ids. Limit : 100"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 100
              type: array
              items:
                $ref: '#/components/schemas/TaskId'
      - name: rollups
        in: query
        description: "Rollup settings updates. Limit : 20"
        required: true
        content:
          application/json:
            schema:
              maxItems: 20
              type: array
              description: Rollup settings updates
              items:
                $ref: '#/components/schemas/ModifyFieldRollupSettings'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RollupSettings'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /spaces:
    get:
      tags:
      - Spaces
      summary: Get Spaces
      description: Returns a list of spaces.
      operationId: GET:/spaces/empty
      parameters:
      - name: withArchived
        in: query
        description: Include archived spaces
        required: false
        schema:
          type: boolean
          description: Include archived spaces
      - name: userIsMember
        in: query
        description: Include only spaces where user is member
        required: false
        schema:
          type: boolean
          description: Include only spaces where user is member
      - name: withInvitations
        in: query
        description: Include invitations in space members list
        required: false
        schema:
          type: boolean
          description: Include invitations in space members list
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `members` - Space members
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - members
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Space'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
    post:
      tags:
      - Spaces
      summary: Create Space
      description: Create a space. Available for all plans except Team.
      operationId: POST:/spaces/empty
      parameters:
      - name: accessType
        in: query
        description: "Type of the space\n* `Locked` - \n* `Personal` - \n* `Private`\
          \ - \n* `Public` - "
        required: true
        schema:
          $ref: '#/components/schemas/SpaceAccessType'
      - name: title
        in: query
        description: Title of the space
        required: true
        schema:
          type: string
          description: Title of the space
      - name: description
        in: query
        description: Description of the space
        required: false
        schema:
          type: string
          description: Description of the space
      - name: members
        in: query
        description: "Space members. More than 1 member with the same ID is not allowed.\
          \ Limit : 1000"
        required: false
        content:
          application/json:
            schema:
              maxItems: 1000
              type: array
              description: Space members. More than 1 member with the same ID is not
                allowed
              items:
                $ref: '#/components/schemas/SpaceMember'
      - name: guestRoleId
        in: query
        description: Space guest role. Available only for a public space
        required: false
        schema:
          $ref: '#/components/schemas/AccessRoleId'
      - name: defaultProjectWorkflowId
        in: query
        description: Set default project workflow for a space
        required: false
        schema:
          $ref: '#/components/schemas/WorkflowId'
      - name: suggestedProjectWorkflows
        in: query
        description: "Suggested project workflows for a space. A workflow can only\
          \ be included in a request once. Limit : 100"
        required: false
        content:
          application/json:
            schema:
              maxItems: 100
              type: array
              description: Suggested project workflows for a space. A workflow can
                only be included in a request once
              items:
                $ref: '#/components/schemas/WorkflowId'
      - name: defaultTaskWorkflowId
        in: query
        description: Set default task workflow for a space
        required: false
        schema:
          $ref: '#/components/schemas/WorkflowId'
      - name: suggestedTaskWorkflows
        in: query
        description: Suggested task workflows for a space. A workflow can only be
          included in a request once
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Suggested task workflows for a space. A workflow can only
                be included in a request once
              items:
                $ref: '#/components/schemas/WorkflowId'
      - name: withInvitations
        in: query
        description: Include invitations in space members list
        required: false
        schema:
          type: boolean
          description: Include invitations in space members list
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `suggestedTaskWorkflows` - Suggested task workflows for a space
          * `suggestedProjectWorkflows` - Suggested project workflows for a space
          * `members` - Space members
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - suggestedTaskWorkflows
                - suggestedProjectWorkflows
                - members
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Space'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /spaces/{spaceId}:
    get:
      tags:
      - Spaces
      summary: Get Space
      description: Returns info about a space.
      operationId: GET:/spaces/single
      parameters:
      - name: spaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SpaceId'
      - name: withInvitations
        in: query
        description: Include invitations in space members list
        required: false
        schema:
          type: boolean
          description: Include invitations in space members list
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `suggestedTaskWorkflows` - Suggested task workflows for a space
          * `suggestedProjectWorkflows` - Suggested project workflows for a space
          * `members` - Space members
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - suggestedTaskWorkflows
                - suggestedProjectWorkflows
                - members
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Space'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
    put:
      tags:
      - Spaces
      summary: Update Space
      description: Update a space.
      operationId: PUT:/spaces/single
      parameters:
      - name: spaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SpaceId'
      - name: accessType
        in: query
        description: "Type of the space\n* `Locked` - \n* `Personal` - \n* `Private`\
          \ - \n* `Public` - "
        required: false
        schema:
          $ref: '#/components/schemas/SpaceAccessType'
      - name: title
        in: query
        description: Title of the space
        required: false
        schema:
          type: string
          description: Title of the space
      - name: description
        in: query
        description: Description of the space
        required: false
        schema:
          type: string
          description: Description of the space
      - name: membersAdd
        in: query
        description: "Space members to add. A member should be passed only once in\
          \ request. Limit : 1000"
        required: false
        content:
          application/json:
            schema:
              maxItems: 1000
              type: array
              description: Space members to add. A member should be passed only once
                in request
              items:
                $ref: '#/components/schemas/SpaceMember'
      - name: membersUpdate
        in: query
        description: Space members to update. A member should be passed only once
          in request
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Space members to update. A member should be passed only
                once in request
              items:
                $ref: '#/components/schemas/SpaceMember'
      - name: membersRemove
        in: query
        description: "Space members to remove. A member should be passed only once\
          \ in request. Limit : 1000"
        required: false
        content:
          application/json:
            schema:
              maxItems: 1000
              type: array
              description: Space members to remove. A member should be passed only
                once in request
              items:
                $ref: '#/components/schemas/UserId'
      - name: guestRoleId
        in: query
        description: Space guest role. Available only for a public space
        required: false
        schema:
          $ref: '#/components/schemas/AccessRoleId'
      - name: defaultProjectWorkflowId
        in: query
        description: Set default project workflow for a space
        required: false
        schema:
          $ref: '#/components/schemas/WorkflowId'
      - name: suggestedProjectWorkflowsAdd
        in: query
        description: "Add workflows to Suggested project workflows. A workflow can\
          \ only be included in a request once. Limit : 100"
        required: false
        content:
          application/json:
            schema:
              maxItems: 100
              type: array
              description: Add workflows to Suggested project workflows. A workflow
                can only be included in a request once
              items:
                $ref: '#/components/schemas/WorkflowId'
      - name: suggestedProjectWorkflowsRemove
        in: query
        description: Remove workflows from Suggested project workflows. A workflow
          can only be included in a request once
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Remove workflows from Suggested project workflows. A workflow
                can only be included in a request once
              items:
                $ref: '#/components/schemas/WorkflowId'
      - name: defaultTaskWorkflowId
        in: query
        description: Set default task workflow for a space
        required: false
        schema:
          $ref: '#/components/schemas/WorkflowId'
      - name: suggestedTaskWorkflowsAdd
        in: query
        description: Add workflows to Suggested task workflows. A workflow can only
          be included in a request once
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Add workflows to Suggested task workflows. A workflow can
                only be included in a request once
              items:
                $ref: '#/components/schemas/WorkflowId'
      - name: suggestedTaskWorkflowsRemove
        in: query
        description: Remove workflows from Suggested task workflows. A workflow can
          only be included in a request once
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Remove workflows from Suggested task workflows. A workflow
                can only be included in a request once
              items:
                $ref: '#/components/schemas/WorkflowId'
      - name: withInvitations
        in: query
        description: Include invitations in space members list
        required: false
        schema:
          type: boolean
          description: Include invitations in space members list
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `suggestedTaskWorkflows` - Space task suggested workflows
          * `suggestedProjectWorkflows` - Space project suggested workflows
          * `members` - Space members
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - suggestedTaskWorkflows
                - suggestedProjectWorkflows
                - members
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Space'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
    delete:
      tags:
      - Spaces
      summary: Delete Space
      description: Delete a space.
      operationId: DELETE:/spaces/single
      parameters:
      - name: spaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SpaceId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      type: string
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /task_blueprints:
    get:
      tags:
      - Task Blueprints
      summary: Get Task Blueprints
      description: Account-level Task Blueprints.
      operationId: GET:/task_blueprints/empty
      parameters:
      - name: limit
        in: query
        description: Limit on number of returned task blueprints. It is ignored if
          pagination is requested.
        required: false
        schema:
          type: number
          description: Limit on number of returned task blueprints. It is ignored
            if pagination is requested.
      - name: pageSize
        in: query
        description: Page size.
        required: false
        schema:
          type: number
          description: Page size.
      - name: nextPageToken
        in: query
        description: Next page token
        required: false
        schema:
          type: string
          description: Next page token
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskBlueprint'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /spaces/{spaceId}/task_blueprints:
    get:
      tags:
      - Task Blueprints
      summary: Get Task Blueprints
      description: Space-level Task Blueprints.
      operationId: GET:/spaces/single/task_blueprints
      parameters:
      - name: spaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SpaceId'
      - name: limit
        in: query
        description: Limit on number of returned task blueprints. It is ignored if
          pagination is requested.
        required: false
        schema:
          type: number
          description: Limit on number of returned task blueprints. It is ignored
            if pagination is requested.
      - name: pageSize
        in: query
        description: Page size.
        required: false
        schema:
          type: number
          description: Page size.
      - name: nextPageToken
        in: query
        description: Next page token
        required: false
        schema:
          type: string
          description: Next page token
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskBlueprint'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /task_blueprints/{taskBlueprintId}/launch_async:
    post:
      tags:
      - Task Blueprints
      summary: Async Work Creation
      description: "Task Blueprint Launch, returns async job."
      operationId: POST:/task_blueprints/single/launch_async
      parameters:
      - name: taskBlueprintId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaskBlueprintId'
      - name: superTaskId
        in: query
        description: ID of parent task. Set this to add work from the task-based template
          as a subtask. Either this parameter or parentId  is required. parentId and
          superTaskId cannot be set simultaneously.
        required: false
        schema:
          $ref: '#/components/schemas/TaskId'
      - name: parentId
        in: query
        description: ID of parent folder or project.  Set this to put work from the
          template to the specific folder or project. Either this parameter or superTaskId  is
          required. parentId and superTaskId cannot be set simultaneously
        required: false
        schema:
          $ref: '#/components/schemas/FolderId'
      - name: title
        in: query
        description: Title (required)
        required: true
        schema:
          type: string
          description: Title (required)
      - name: titlePrefix
        in: query
        description: Title prefix for all copied tasks
        required: false
        schema:
          type: string
          description: Title prefix for all copied tasks
      - name: copyDescriptions
        in: query
        description: Copy descriptions or leave empty
        required: false
        schema:
          type: boolean
          description: Copy descriptions or leave empty
      - name: notifyResponsibles
        in: query
        description: Notify those responsible
        required: false
        schema:
          type: boolean
          description: Notify those responsible
      - name: copyResponsibles
        in: query
        description: Copy those responsible
        required: false
        schema:
          type: boolean
          description: Copy those responsible
      - name: copyCustomFields
        in: query
        description: Copy custom fields
        required: false
        schema:
          type: boolean
          description: Copy custom fields
      - name: copyAttachments
        in: query
        description: Copy attachments
        required: false
        schema:
          type: boolean
          description: Copy attachments
      - name: rescheduleDate
        in: query
        description: "Date to use in task rescheduling. Note: Only active tasks can\
          \ be rescheduled. Format: yyyy-MM-dd"
        required: false
        schema:
          type: string
          description: "Date to use in task rescheduling. Note: Only active tasks\
            \ can be rescheduled. Format: yyyy-MM-dd"
      - name: rescheduleMode
        in: query
        description: |-
          Mode to be used for rescheduling (based on first or last date). Used only if reschedule date is specified.
          * `Start` - Tasks in scope are rescheduled starting from reschedule date
          * `End` - Tasks in scope are rescheduled ending with reschedule date
        required: false
        schema:
          $ref: '#/components/schemas/RescheduleMode'
      - name: entryLimit
        in: query
        description: Maximum number of tasks/folders in tree for copy. The operation
          will fail if limit is exceeded. This should be 1..250
        required: false
        schema:
          type: number
          description: Maximum number of tasks/folders in tree for copy. The operation
            will fail if limit is exceeded. This should be 1..250
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AsyncJob'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /tasks:
    get:
      tags:
      - Tasks
      summary: Query Tasks
      description: Search among all tasks in current account.
      operationId: GET:/tasks/empty
      parameters:
      - name: descendants
        in: query
        description: "Adds all descendant folders to search scope. Applicable only\
          \ for GET/folders/{folderId}/tasks and GET/spaces/{spaceId}/tasks endpoints"
        required: false
        schema:
          type: boolean
          description: "Adds all descendant folders to search scope. Applicable only\
            \ for GET/folders/{folderId}/tasks and GET/spaces/{spaceId}/tasks endpoints"
      - name: title
        in: query
        description: "Title filter, contains match"
        required: false
        schema:
          type: string
          description: "Title filter, contains match"
      - name: status
        in: query
        description: |-
          Status filter, match with any of specified constants
          * `Active` - Active
          * `Deferred` - Deferred
          * `Completed` - Completed
          * `Cancelled` - Cancelled
        required: false
        content:
          application/json:
            schema:
              type: array
              description: "Status filter, match with any of specified constants"
              items:
                $ref: '#/components/schemas/TaskStatus'
      - name: importance
        in: query
        description: "Importance filter, exact match\n* `High` - \n* `Low` - \n* `Normal`\
          \ - "
        required: false
        schema:
          $ref: '#/components/schemas/TaskImportance'
      - name: startDate
        in: query
        description: "Start date filter, date match or range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalDateTimeRange'
      - name: dueDate
        in: query
        description: "Due date filter, date match or range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalDateTimeRange'
      - name: scheduledDate
        in: query
        description: |-
          Scheduled date filter. Both dates should be set in ranged version.
          Returns all tasks that have schedule intersecting with specified interval, date match or range
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalDateRange'
      - name: createdDate
        in: query
        description: "Created date filter, range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: updatedDate
        in: query
        description: "Updated date filter, range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: completedDate
        in: query
        description: "Completed date filter, range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: authors
        in: query
        description: "Authors filter, match of any"
        required: false
        content:
          application/json:
            schema:
              type: array
              description: "Authors filter, match of any"
              items:
                $ref: '#/components/schemas/UserId'
      - name: responsibles
        in: query
        description: "Assignees filter with specified users or invitations, match\
          \ of any"
        required: false
        content:
          application/json:
            schema:
              type: array
              description: "Assignees filter with specified users or invitations,\
                \ match of any"
              items:
                $ref: '#/components/schemas/UserId'
      - name: responsiblePlaceholders
        in: query
        description: "Assignee Placeholders filter, match of any"
        required: false
        content:
          application/json:
            schema:
              type: array
              description: "Assignee Placeholders filter, match of any"
              items:
                $ref: '#/components/schemas/PlaceholderId'
      - name: permalink
        in: query
        description: "Task permalink, exact match"
        required: false
        schema:
          type: string
          description: "Task permalink, exact match"
      - name: type
        in: query
        description: "Task type\n* `Milestone` - \n* `Backlog` - \n* `Planned` - "
        required: false
        schema:
          $ref: '#/components/schemas/TaskDatesType'
      - name: limit
        in: query
        description: Limit on number of returned tasks
        required: false
        schema:
          type: number
          description: Limit on number of returned tasks
      - name: sortField
        in: query
        description: |-
          Sort field
          * `Status` - Sort by status
          * `Importance` - Sort by importance
          * `UpdatedDate` - Sort by updated date
          * `Priority` - Sort by priority (as ordered in workspace tasklist)
          * `CreatedDate` - Sort by created date
          * `Title` - Lexicographic sorting by title
          * `StartFinishInterval` - Sort by start-finish interval
          * `DueDate` - Sort by due date
          * `LastAccessDate` - Sort by last access date
          * `CompletedDate` - Sort by completed date
        required: false
        schema:
          $ref: '#/components/schemas/TaskSortField'
      - name: sortOrder
        in: query
        description: |-
          Sort order
          * `Asc` - Ascending sort order
          * `Desc` - Descending sort order
        required: false
        schema:
          $ref: '#/components/schemas/SortOrder'
      - name: subTasks
        in: query
        description: Adds subtasks to search scope
        required: false
        schema:
          type: boolean
          description: Adds subtasks to search scope
      - name: pageSize
        in: query
        description: The number of tasks to return (max 1000 items per page)
        required: false
        schema:
          type: number
          description: The number of tasks to return (max 1000 items per page)
      - name: nextPageToken
        in: query
        description: "A pagination request will return a token that applies an offset\
          \ to the next page. The returned value should be used as an input parameter\
          \ in the next request. Parameter pageSize can be omitted in this case. If\
          \ you included optional fields to the first request, you will need to include\
          \ those  in each new call"
        required: false
        schema:
          type: string
          description: "A pagination request will return a token that applies an offset\
            \ to the next page. The returned value should be used as an input parameter\
            \ in the next request. Parameter pageSize can be omitted in this case.\
            \ If you included optional fields to the first request, you will need\
            \ to include those  in each new call"
      - name: metadata
        in: query
        description: Task metadata filter
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      - name: customField
        in: query
        description: "[Deprecated] It is recommended to use 'customFields' parameter.\
          \ Custom field filter"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldFilter'
      - name: customFields
        in: query
        description: "Custom field filters, exact match"
        required: false
        content:
          application/json:
            schema:
              type: array
              description: "Custom field filters, exact match"
              items:
                $ref: '#/components/schemas/CustomFieldFilter'
      - name: customStatuses
        in: query
        description: Custom statuses filter
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Custom statuses filter
              items:
                $ref: '#/components/schemas/CustomStatusId'
      - name: withInvitations
        in: query
        description: Include invitations in sharedIds & responsibleIds lists
        required: false
        schema:
          type: boolean
          description: Include invitations in sharedIds & responsibleIds lists
      - name: billingTypes
        in: query
        description: |-
          Timelog billing types filter
          * `Billable` - Billable
          * `NonBillable` - Non-Billable
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Timelog billing types filter
              items:
                $ref: '#/components/schemas/BillingType'
      - name: plainTextCustomFields
        in: query
        description: Strip HTML tags from custom fields
        required: false
        schema:
          type: boolean
          description: Strip HTML tags from custom fields
      - name: customItemTypes
        in: query
        description: "Custom item types filter. Standard type (task) ID is not allowed.\
          \ Filtering by deleted custom item types is not supported. Limit : 1000"
        required: false
        content:
          application/json:
            schema:
              maxItems: 1000
              type: array
              description: Custom item types filter. Standard type (task) ID is not
                allowed. Filtering by deleted custom item types is not supported.
              items:
                $ref: '#/components/schemas/EntityTypeId'
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `metadata` - Task metadata entries
          * `responsibleIds` - List of assignee user IDs
          * `customItemTypeId` - Work Item custom item type Id
          * `customFields` - Custom fields
          * `followerIds` - List of user IDs, who follows task, and the additional flag "followedByMe", that indicates if a task is followed by user
          * `parentIds` - List of task parent folder
          * `sharedIds` - List of user IDs, who have task share
          * `description` - Description
          * `superTaskIds` - List of supertask IDs
          * `responsiblePlaceholderIds` - List of placeholder assignee IDs
          * `superParentIds` - List of folder IDs inherited from parent task
          * `dependencyIds` - Dependency IDs
          * `billingType` - Billing type
          * `attachmentCount` - Attachment count
          * `effortAllocation` - Effort Allocation
          * `hasAttachments` - Has attachments
          * `subTaskIds` - List of subtask IDs
          * `recurrent` - Is a task recurrent
          * `authorIds` - Author IDs
          * `briefDescription` - Brief description
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - metadata
                - responsibleIds
                - customItemTypeId
                - customFields
                - followerIds
                - parentIds
                - sharedIds
                - description
                - superTaskIds
                - responsiblePlaceholderIds
                - superParentIds
                - dependencyIds
                - billingType
                - attachmentCount
                - effortAllocation
                - hasAttachments
                - subTaskIds
                - recurrent
                - authorIds
                - briefDescription
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /folders/{folderId}/tasks:
    get:
      tags:
      - Tasks
      summary: Query Tasks
      description: Search among tasks in the folder.
      operationId: GET:/folders/single/tasks
      parameters:
      - name: folderId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FolderId'
      - name: descendants
        in: query
        description: "Adds all descendant folders to search scope. Applicable only\
          \ for GET/folders/{folderId}/tasks and GET/spaces/{spaceId}/tasks endpoints"
        required: false
        schema:
          type: boolean
          description: "Adds all descendant folders to search scope. Applicable only\
            \ for GET/folders/{folderId}/tasks and GET/spaces/{spaceId}/tasks endpoints"
      - name: title
        in: query
        description: "Title filter, contains match"
        required: false
        schema:
          type: string
          description: "Title filter, contains match"
      - name: status
        in: query
        description: |-
          Status filter, match with any of specified constants
          * `Active` - Active
          * `Deferred` - Deferred
          * `Completed` - Completed
          * `Cancelled` - Cancelled
        required: false
        content:
          application/json:
            schema:
              type: array
              description: "Status filter, match with any of specified constants"
              items:
                $ref: '#/components/schemas/TaskStatus'
      - name: importance
        in: query
        description: "Importance filter, exact match\n* `High` - \n* `Low` - \n* `Normal`\
          \ - "
        required: false
        schema:
          $ref: '#/components/schemas/TaskImportance'
      - name: startDate
        in: query
        description: "Start date filter, date match or range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalDateTimeRange'
      - name: dueDate
        in: query
        description: "Due date filter, date match or range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalDateTimeRange'
      - name: scheduledDate
        in: query
        description: |-
          Scheduled date filter. Both dates should be set in ranged version.
          Returns all tasks that have schedule intersecting with specified interval, date match or range
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalDateRange'
      - name: createdDate
        in: query
        description: "Created date filter, range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: updatedDate
        in: query
        description: "Updated date filter, range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: completedDate
        in: query
        description: "Completed date filter, range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: authors
        in: query
        description: "Authors filter, match of any"
        required: false
        content:
          application/json:
            schema:
              type: array
              description: "Authors filter, match of any"
              items:
                $ref: '#/components/schemas/UserId'
      - name: responsibles
        in: query
        description: "Assignees filter with specified users or invitations, match\
          \ of any"
        required: false
        content:
          application/json:
            schema:
              type: array
              description: "Assignees filter with specified users or invitations,\
                \ match of any"
              items:
                $ref: '#/components/schemas/UserId'
      - name: responsiblePlaceholders
        in: query
        description: "Assignee Placeholders filter, match of any"
        required: false
        content:
          application/json:
            schema:
              type: array
              description: "Assignee Placeholders filter, match of any"
              items:
                $ref: '#/components/schemas/PlaceholderId'
      - name: permalink
        in: query
        description: "Task permalink, exact match"
        required: false
        schema:
          type: string
          description: "Task permalink, exact match"
      - name: type
        in: query
        description: "Task type\n* `Milestone` - \n* `Backlog` - \n* `Planned` - "
        required: false
        schema:
          $ref: '#/components/schemas/TaskDatesType'
      - name: limit
        in: query
        description: Limit on number of returned tasks
        required: false
        schema:
          type: number
          description: Limit on number of returned tasks
      - name: sortField
        in: query
        description: |-
          Sort field
          * `Status` - Sort by status
          * `Importance` - Sort by importance
          * `UpdatedDate` - Sort by updated date
          * `Priority` - Sort by priority (as ordered in workspace tasklist)
          * `CreatedDate` - Sort by created date
          * `Title` - Lexicographic sorting by title
          * `StartFinishInterval` - Sort by start-finish interval
          * `DueDate` - Sort by due date
          * `LastAccessDate` - Sort by last access date
          * `CompletedDate` - Sort by completed date
        required: false
        schema:
          $ref: '#/components/schemas/TaskSortField'
      - name: sortOrder
        in: query
        description: |-
          Sort order
          * `Asc` - Ascending sort order
          * `Desc` - Descending sort order
        required: false
        schema:
          $ref: '#/components/schemas/SortOrder'
      - name: subTasks
        in: query
        description: Adds subtasks to search scope
        required: false
        schema:
          type: boolean
          description: Adds subtasks to search scope
      - name: pageSize
        in: query
        description: The number of tasks to return (max 1000 items per page)
        required: false
        schema:
          type: number
          description: The number of tasks to return (max 1000 items per page)
      - name: nextPageToken
        in: query
        description: "A pagination request will return a token that applies an offset\
          \ to the next page. The returned value should be used as an input parameter\
          \ in the next request. Parameter pageSize can be omitted in this case. If\
          \ you included optional fields to the first request, you will need to include\
          \ those  in each new call"
        required: false
        schema:
          type: string
          description: "A pagination request will return a token that applies an offset\
            \ to the next page. The returned value should be used as an input parameter\
            \ in the next request. Parameter pageSize can be omitted in this case.\
            \ If you included optional fields to the first request, you will need\
            \ to include those  in each new call"
      - name: metadata
        in: query
        description: Task metadata filter
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      - name: customField
        in: query
        description: "[Deprecated] It is recommended to use 'customFields' parameter.\
          \ Custom field filter"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldFilter'
      - name: customFields
        in: query
        description: "Custom field filters, exact match"
        required: false
        content:
          application/json:
            schema:
              type: array
              description: "Custom field filters, exact match"
              items:
                $ref: '#/components/schemas/CustomFieldFilter'
      - name: customStatuses
        in: query
        description: Custom statuses filter
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Custom statuses filter
              items:
                $ref: '#/components/schemas/CustomStatusId'
      - name: withInvitations
        in: query
        description: Include invitations in sharedIds & responsibleIds lists
        required: false
        schema:
          type: boolean
          description: Include invitations in sharedIds & responsibleIds lists
      - name: billingTypes
        in: query
        description: |-
          Timelog billing types filter
          * `Billable` - Billable
          * `NonBillable` - Non-Billable
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Timelog billing types filter
              items:
                $ref: '#/components/schemas/BillingType'
      - name: plainTextCustomFields
        in: query
        description: Strip HTML tags from custom fields
        required: false
        schema:
          type: boolean
          description: Strip HTML tags from custom fields
      - name: customItemTypes
        in: query
        description: "Custom item types filter. Standard type (task) ID is not allowed.\
          \ Filtering by deleted custom item types is not supported. Limit : 1000"
        required: false
        content:
          application/json:
            schema:
              maxItems: 1000
              type: array
              description: Custom item types filter. Standard type (task) ID is not
                allowed. Filtering by deleted custom item types is not supported.
              items:
                $ref: '#/components/schemas/EntityTypeId'
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `metadata` - Task metadata entries
          * `responsibleIds` - List of assignee user IDs
          * `customItemTypeId` - Work Item custom item type Id
          * `customFields` - Custom fields
          * `followerIds` - List of user IDs, who follows task, and the additional flag "followedByMe", that indicates if a task is followed by user
          * `parentIds` - List of task parent folder
          * `sharedIds` - List of user IDs, who have task share
          * `description` - Description
          * `superTaskIds` - List of supertask IDs
          * `responsiblePlaceholderIds` - List of placeholder assignee IDs
          * `superParentIds` - List of folder IDs inherited from parent task
          * `dependencyIds` - Dependency IDs
          * `billingType` - Billing type
          * `attachmentCount` - Attachment count
          * `effortAllocation` - Effort Allocation
          * `hasAttachments` - Has attachments
          * `subTaskIds` - List of subtask IDs
          * `recurrent` - Is a task recurrent
          * `authorIds` - Author IDs
          * `briefDescription` - Brief description
          * `finance` - Task Finance fields
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - metadata
                - responsibleIds
                - customItemTypeId
                - customFields
                - followerIds
                - parentIds
                - sharedIds
                - description
                - superTaskIds
                - responsiblePlaceholderIds
                - superParentIds
                - dependencyIds
                - billingType
                - attachmentCount
                - effortAllocation
                - hasAttachments
                - subTaskIds
                - recurrent
                - authorIds
                - briefDescription
                - finance
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
    post:
      tags:
      - Tasks
      summary: Create Task
      description: "Create a task in a folder. The folder specified by {folderId}\
        \ will become the 'parent' folder for the new task. To create a task in the\
        \ account root, use the Root Folder API ID. When creating a subtask, use the\
        \ Root API ID as {folderId} and specify the parent task in the 'superTasks'\
        \ parameter."
      operationId: POST:/folders/single/tasks
      parameters:
      - name: folderId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FolderId'
      - name: title
        in: query
        description: "Title of task, required"
        required: true
        schema:
          type: string
          description: "Title of task, required"
      - name: description
        in: query
        description: "Description of task, will be left blank, if not set"
        required: false
        schema:
          type: string
          description: "Description of task, will be left blank, if not set"
      - name: status
        in: query
        description: |-
          Status of task. Not available for the Team plan
          * `Active` - Active
          * `Deferred` - Deferred
          * `Completed` - Completed
          * `Cancelled` - Cancelled
        required: false
        schema:
          $ref: '#/components/schemas/TaskStatus'
      - name: importance
        in: query
        description: "Importance of task\n* `High` - \n* `Low` - \n* `Normal` - "
        required: false
        schema:
          $ref: '#/components/schemas/TaskImportance'
      - name: dates
        in: query
        description: "Task dates. If not specified, a backlogged task is created"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskDates'
      - name: shareds
        in: query
        description: Shares task with specified users or invitations. The task is
          always shared with the author.
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Shares task with specified users or invitations. The task
                is always shared with the author.
              items:
                $ref: '#/components/schemas/UserId'
      - name: parents
        in: query
        description: Parent folders for newly created task. Can not contain recycleBinId
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Parent folders for newly created task. Can not contain
                recycleBinId
              items:
                $ref: '#/components/schemas/FolderId'
      - name: responsibles
        in: query
        description: Makes specified users or invitations assignee for the task
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Makes specified users or invitations assignee for the task
              items:
                $ref: '#/components/schemas/UserId'
      - name: responsiblePlaceholders
        in: query
        description: Makes specified placeholders assignee for the task
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Makes specified placeholders assignee for the task
              items:
                $ref: '#/components/schemas/PlaceholderId'
      - name: followers
        in: query
        description: Add specified users to task followers
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Add specified users to task followers
              items:
                $ref: '#/components/schemas/UserId'
      - name: follow
        in: query
        description: Follow task
        required: false
        schema:
          type: boolean
          description: Follow task
      - name: priorityBefore
        in: query
        description: Put newly created task before specified task in task list
        required: false
        schema:
          $ref: '#/components/schemas/TaskId'
      - name: priorityAfter
        in: query
        description: Put newly created task after specified task in task list
        required: false
        schema:
          $ref: '#/components/schemas/TaskId'
      - name: superTasks
        in: query
        description: Add the task as subtask to specified tasks
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Add the task as subtask to specified tasks
              items:
                $ref: '#/components/schemas/TaskId'
      - name: metadata
        in: query
        description: "Metadata to be added to newly created task. Limit : 100"
        required: false
        content:
          application/json:
            schema:
              maxItems: 100
              type: array
              description: Metadata to be added to newly created task
              items:
                $ref: '#/components/schemas/Metadata'
      - name: customFields
        in: query
        description: "List of custom fields to set in newly created task. Limit :\
          \ 100"
        required: false
        content:
          application/json:
            schema:
              maxItems: 100
              type: array
              description: List of custom fields to set in newly created task
              items:
                $ref: '#/components/schemas/CustomField'
      - name: customStatus
        in: query
        description: Custom status ID
        required: false
        schema:
          $ref: '#/components/schemas/CustomStatusId'
      - name: effortAllocation
        in: query
        description: "Set Task Effort fields: mode, total Effort"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskEffort'
      - name: billingType
        in: query
        description: |-
          Task's timelogs billing type
          * `Billable` - Billable
          * `NonBillable` - Non-Billable
        required: false
        schema:
          $ref: '#/components/schemas/BillingType'
      - name: withInvitations
        in: query
        description: Include invitations in sharedIds & responsibleIds lists
        required: false
        schema:
          type: boolean
          description: Include invitations in sharedIds & responsibleIds lists
      - name: customItemTypeId
        in: query
        description: Custom Item Type ID to create a task from
        required: false
        schema:
          type: string
          description: Custom Item Type ID to create a task from
      - name: plainTextCustomFields
        in: query
        description: Strip HTML tags from custom fields
        required: false
        schema:
          type: boolean
          description: Strip HTML tags from custom fields
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `customItemTypeId` - Custom Item Type ID
          * `billingType` - Billing type
          * `effortAllocation` - Effort Allocation
          * `responsiblePlaceholderIds` - List of placeholder assignee IDs
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - customItemTypeId
                - billingType
                - effortAllocation
                - responsiblePlaceholderIds
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /spaces/{spaceId}/tasks:
    get:
      tags:
      - Tasks
      summary: Query Tasks
      description: Search among tasks in space.
      operationId: GET:/spaces/single/tasks
      parameters:
      - name: spaceId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/SpaceId'
      - name: descendants
        in: query
        description: "Adds all descendant folders to search scope. Applicable only\
          \ for GET/folders/{folderId}/tasks and GET/spaces/{spaceId}/tasks endpoints"
        required: false
        schema:
          type: boolean
          description: "Adds all descendant folders to search scope. Applicable only\
            \ for GET/folders/{folderId}/tasks and GET/spaces/{spaceId}/tasks endpoints"
      - name: title
        in: query
        description: "Title filter, contains match"
        required: false
        schema:
          type: string
          description: "Title filter, contains match"
      - name: status
        in: query
        description: |-
          Status filter, match with any of specified constants
          * `Active` - Active
          * `Deferred` - Deferred
          * `Completed` - Completed
          * `Cancelled` - Cancelled
        required: false
        content:
          application/json:
            schema:
              type: array
              description: "Status filter, match with any of specified constants"
              items:
                $ref: '#/components/schemas/TaskStatus'
      - name: importance
        in: query
        description: "Importance filter, exact match\n* `High` - \n* `Low` - \n* `Normal`\
          \ - "
        required: false
        schema:
          $ref: '#/components/schemas/TaskImportance'
      - name: startDate
        in: query
        description: "Start date filter, date match or range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalDateTimeRange'
      - name: dueDate
        in: query
        description: "Due date filter, date match or range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalDateTimeRange'
      - name: scheduledDate
        in: query
        description: |-
          Scheduled date filter. Both dates should be set in ranged version.
          Returns all tasks that have schedule intersecting with specified interval, date match or range
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalDateRange'
      - name: createdDate
        in: query
        description: "Created date filter, range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: updatedDate
        in: query
        description: "Updated date filter, range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: completedDate
        in: query
        description: "Completed date filter, range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: authors
        in: query
        description: "Authors filter, match of any"
        required: false
        content:
          application/json:
            schema:
              type: array
              description: "Authors filter, match of any"
              items:
                $ref: '#/components/schemas/UserId'
      - name: responsibles
        in: query
        description: "Assignees filter with specified users or invitations, match\
          \ of any"
        required: false
        content:
          application/json:
            schema:
              type: array
              description: "Assignees filter with specified users or invitations,\
                \ match of any"
              items:
                $ref: '#/components/schemas/UserId'
      - name: responsiblePlaceholders
        in: query
        description: "Assignee Placeholders filter, match of any"
        required: false
        content:
          application/json:
            schema:
              type: array
              description: "Assignee Placeholders filter, match of any"
              items:
                $ref: '#/components/schemas/PlaceholderId'
      - name: permalink
        in: query
        description: "Task permalink, exact match"
        required: false
        schema:
          type: string
          description: "Task permalink, exact match"
      - name: type
        in: query
        description: "Task type\n* `Milestone` - \n* `Backlog` - \n* `Planned` - "
        required: false
        schema:
          $ref: '#/components/schemas/TaskDatesType'
      - name: limit
        in: query
        description: Limit on number of returned tasks
        required: false
        schema:
          type: number
          description: Limit on number of returned tasks
      - name: sortField
        in: query
        description: |-
          Sort field
          * `Status` - Sort by status
          * `Importance` - Sort by importance
          * `UpdatedDate` - Sort by updated date
          * `Priority` - Sort by priority (as ordered in workspace tasklist)
          * `CreatedDate` - Sort by created date
          * `Title` - Lexicographic sorting by title
          * `StartFinishInterval` - Sort by start-finish interval
          * `DueDate` - Sort by due date
          * `LastAccessDate` - Sort by last access date
          * `CompletedDate` - Sort by completed date
        required: false
        schema:
          $ref: '#/components/schemas/TaskSortField'
      - name: sortOrder
        in: query
        description: |-
          Sort order
          * `Asc` - Ascending sort order
          * `Desc` - Descending sort order
        required: false
        schema:
          $ref: '#/components/schemas/SortOrder'
      - name: subTasks
        in: query
        description: Adds subtasks to search scope
        required: false
        schema:
          type: boolean
          description: Adds subtasks to search scope
      - name: pageSize
        in: query
        description: The number of tasks to return (max 1000 items per page)
        required: false
        schema:
          type: number
          description: The number of tasks to return (max 1000 items per page)
      - name: nextPageToken
        in: query
        description: "A pagination request will return a token that applies an offset\
          \ to the next page. The returned value should be used as an input parameter\
          \ in the next request. Parameter pageSize can be omitted in this case. If\
          \ you included optional fields to the first request, you will need to include\
          \ those  in each new call"
        required: false
        schema:
          type: string
          description: "A pagination request will return a token that applies an offset\
            \ to the next page. The returned value should be used as an input parameter\
            \ in the next request. Parameter pageSize can be omitted in this case.\
            \ If you included optional fields to the first request, you will need\
            \ to include those  in each new call"
      - name: metadata
        in: query
        description: Task metadata filter
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata'
      - name: customField
        in: query
        description: "[Deprecated] It is recommended to use 'customFields' parameter.\
          \ Custom field filter"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldFilter'
      - name: customFields
        in: query
        description: "Custom field filters, exact match"
        required: false
        content:
          application/json:
            schema:
              type: array
              description: "Custom field filters, exact match"
              items:
                $ref: '#/components/schemas/CustomFieldFilter'
      - name: customStatuses
        in: query
        description: Custom statuses filter
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Custom statuses filter
              items:
                $ref: '#/components/schemas/CustomStatusId'
      - name: withInvitations
        in: query
        description: Include invitations in sharedIds & responsibleIds lists
        required: false
        schema:
          type: boolean
          description: Include invitations in sharedIds & responsibleIds lists
      - name: billingTypes
        in: query
        description: |-
          Timelog billing types filter
          * `Billable` - Billable
          * `NonBillable` - Non-Billable
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Timelog billing types filter
              items:
                $ref: '#/components/schemas/BillingType'
      - name: plainTextCustomFields
        in: query
        description: Strip HTML tags from custom fields
        required: false
        schema:
          type: boolean
          description: Strip HTML tags from custom fields
      - name: customItemTypes
        in: query
        description: "Custom item types filter. Standard type (task) ID is not allowed.\
          \ Filtering by deleted custom item types is not supported. Limit : 1000"
        required: false
        content:
          application/json:
            schema:
              maxItems: 1000
              type: array
              description: Custom item types filter. Standard type (task) ID is not
                allowed. Filtering by deleted custom item types is not supported.
              items:
                $ref: '#/components/schemas/EntityTypeId'
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `metadata` - Task metadata entries
          * `responsibleIds` - List of assignee user IDs
          * `customItemTypeId` - Work Item custom item type Id
          * `customFields` - Custom fields
          * `followerIds` - List of user IDs, who follows task, and the additional flag "followedByMe", that indicates if a task is followed by user
          * `parentIds` - List of task parent folder
          * `sharedIds` - List of user IDs, who have task share
          * `description` - Description
          * `superTaskIds` - List of supertask IDs
          * `responsiblePlaceholderIds` - List of placeholder assignee IDs
          * `superParentIds` - List of folder IDs inherited from parent task
          * `dependencyIds` - Dependency IDs
          * `billingType` - Billing type
          * `attachmentCount` - Attachment count
          * `effortAllocation` - Effort Allocation
          * `hasAttachments` - Has attachments
          * `subTaskIds` - List of subtask IDs
          * `recurrent` - Is a task recurrent
          * `authorIds` - Author IDs
          * `briefDescription` - Brief description
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - metadata
                - responsibleIds
                - customItemTypeId
                - customFields
                - followerIds
                - parentIds
                - sharedIds
                - description
                - superTaskIds
                - responsiblePlaceholderIds
                - superParentIds
                - dependencyIds
                - billingType
                - attachmentCount
                - effortAllocation
                - hasAttachments
                - subTaskIds
                - recurrent
                - authorIds
                - briefDescription
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /tasks/{taskIds}:
    get:
      tags:
      - Tasks
      summary: Query Tasks
      description: Returns complete information about single or multiple tasks.
      operationId: GET:/tasks/multi
      parameters:
      - name: taskIds
        in: path
        description: "Comma-separated list of ids. Limit : 1000"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 1000
              type: array
              items:
                $ref: '#/components/schemas/TaskId'
      - name: withInvitations
        in: query
        description: Include invitations in sharedIds & responsibleIds lists
        required: false
        schema:
          type: boolean
          description: Include invitations in sharedIds & responsibleIds lists
      - name: plainTextCustomFields
        in: query
        description: Strip HTML tags from custom fields
        required: false
        schema:
          type: boolean
          description: Strip HTML tags from custom fields
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `customItemTypeId` - Work Item custom item type Id
          * `billingType` - Billing type
          * `attachmentCount` - Attachment count
          * `responsiblePlaceholderIds` - List of placeholder responsible IDs
          * `effortAllocation` - Effort Allocation
          * `recurrent` - Add field to indicate if task is recurrent
          * `finance` - Task Finance fields
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - customItemTypeId
                - billingType
                - attachmentCount
                - responsiblePlaceholderIds
                - effortAllocation
                - recurrent
                - finance
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
    put:
      tags:
      - Tasks
      summary: Modify Tasks
      description: Update tasks.
      operationId: PUT:/tasks/multi
      parameters:
      - name: taskIds
        in: path
        description: "Comma-separated list of ids. Limit : 100"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 100
              type: array
              items:
                $ref: '#/components/schemas/TaskId'
      - name: customFields
        in: query
        description: "Custom fields to be updated or deleted (null value removes field).\
          \ Limit : 100"
        required: false
        content:
          application/json:
            schema:
              maxItems: 100
              type: array
              description: Custom fields to be updated or deleted (null value removes
                field)
              items:
                $ref: '#/components/schemas/CustomField'
      - name: effortAllocation
        in: query
        description: "Set Task Effort fields: mode, total Effort"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskEffort'
      - name: convertToCustomItemType
        in: query
        description: Custom Item Type id
        required: false
        schema:
          $ref: '#/components/schemas/EntityTypeId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /tasks/{taskIds}/tasks_history:
    get:
      tags:
      - Tasks
      summary: Query Tasks fields history
      description: Query Tasks fields history.
      operationId: GET:/tasks/multi/tasks_history
      parameters:
      - name: taskIds
        in: path
        description: "Comma-separated list of ids. Limit : 1000"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 1000
              type: array
              items:
                $ref: '#/components/schemas/TaskId'
      - name: updatedDate
        in: query
        description: Update date filter
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `plannedCost` - Planned cost change history
          * `plannedFees` - Planned fees change history
          * `actualFees` - Actual fees change history
          * `actualCost` - Actual cost change history
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - plannedCost
                - plannedFees
                - actualFees
                - actualCost
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskChangeHistory'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /tasks/{taskId}:
    put:
      tags:
      - Tasks
      summary: Modify Tasks
      description: Update task.
      operationId: PUT:/tasks/single
      parameters:
      - name: taskId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaskId'
      - name: title
        in: query
        description: Title of task
        required: false
        schema:
          type: string
          description: Title of task
      - name: description
        in: query
        description: Task Description
        required: false
        schema:
          type: string
          description: Task Description
      - name: status
        in: query
        description: |-
          Task status. Not available for the Team plan
          * `Active` - Active
          * `Deferred` - Deferred
          * `Completed` - Completed
          * `Cancelled` - Cancelled
        required: false
        schema:
          $ref: '#/components/schemas/TaskStatus'
      - name: importance
        in: query
        description: "Task importance\n* `High` - \n* `Low` - \n* `Normal` - "
        required: false
        schema:
          $ref: '#/components/schemas/TaskImportance'
      - name: dates
        in: query
        description: Reschedule task and/or change task type
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskDates'
      - name: addParents
        in: query
        description: Put task into specified folders of same account. Cannot contain
          RecycleBin folder
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Put task into specified folders of same account. Cannot
                contain RecycleBin folder
              items:
                $ref: '#/components/schemas/FolderId'
      - name: removeParents
        in: query
        description: Remove task from specified folders. Can not contain RecycleBin
          folder
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Remove task from specified folders. Can not contain RecycleBin
                folder
              items:
                $ref: '#/components/schemas/FolderId'
      - name: addShareds
        in: query
        description: Shared task with specified users or invitations
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Shared task with specified users or invitations
              items:
                $ref: '#/components/schemas/UserId'
      - name: removeShareds
        in: query
        description: Unshare task from specified users or invitations
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Unshare task from specified users or invitations
              items:
                $ref: '#/components/schemas/UserId'
      - name: addResponsibles
        in: query
        description: Add specified users or invitations to assignee list
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Add specified users or invitations to assignee list
              items:
                $ref: '#/components/schemas/UserId'
      - name: removeResponsibles
        in: query
        description: Remove specified users or invitations from assignee list
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Remove specified users or invitations from assignee list
              items:
                $ref: '#/components/schemas/UserId'
      - name: addResponsiblePlaceholders
        in: query
        description: Add specified placeholders to placeholder assignee list
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Add specified placeholders to placeholder assignee list
              items:
                $ref: '#/components/schemas/PlaceholderId'
      - name: removeResponsiblePlaceholders
        in: query
        description: Remove specified placeholders from placeholder assignee list
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Remove specified placeholders from placeholder assignee
                list
              items:
                $ref: '#/components/schemas/PlaceholderId'
      - name: addFollowers
        in: query
        description: Add specified users to task followers
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Add specified users to task followers
              items:
                $ref: '#/components/schemas/UserId'
      - name: follow
        in: query
        description: Follow task
        required: false
        schema:
          type: boolean
          description: Follow task
      - name: priorityBefore
        in: query
        description: Put task in task list before specified task
        required: false
        schema:
          $ref: '#/components/schemas/TaskId'
      - name: priorityAfter
        in: query
        description: Put task in task list after specified task
        required: false
        schema:
          $ref: '#/components/schemas/TaskId'
      - name: addSuperTasks
        in: query
        description: Add the task as subtask to specified tasks
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Add the task as subtask to specified tasks
              items:
                $ref: '#/components/schemas/TaskId'
      - name: removeSuperTasks
        in: query
        description: Remove the task form specified tasks subtasks
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Remove the task form specified tasks subtasks
              items:
                $ref: '#/components/schemas/TaskId'
      - name: metadata
        in: query
        description: "Metadata to be updated (null value removes entry). Limit : 100"
        required: false
        content:
          application/json:
            schema:
              maxItems: 100
              type: array
              description: Metadata to be updated (null value removes entry)
              items:
                $ref: '#/components/schemas/Metadata'
      - name: customFields
        in: query
        description: "Custom fields to be updated or deleted (null value removes field).\
          \ Limit : 100"
        required: false
        content:
          application/json:
            schema:
              maxItems: 100
              type: array
              description: Custom fields to be updated or deleted (null value removes
                field)
              items:
                $ref: '#/components/schemas/CustomField'
      - name: customStatus
        in: query
        description: Custom status ID
        required: false
        schema:
          $ref: '#/components/schemas/CustomStatusId'
      - name: restore
        in: query
        description: Restore task from Recycled Bin
        required: false
        schema:
          type: boolean
          description: Restore task from Recycled Bin
      - name: effortAllocation
        in: query
        description: "Set Task Effort fields: mode, total Effort"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskEffort'
      - name: billingType
        in: query
        description: |-
          Task's timelogs billing type
          * `Billable` - Billable
          * `NonBillable` - Non-Billable
        required: false
        schema:
          $ref: '#/components/schemas/BillingType'
      - name: withInvitations
        in: query
        description: Include invitations in sharedIds & responsibleIds lists
        required: false
        schema:
          type: boolean
          description: Include invitations in sharedIds & responsibleIds lists
      - name: convertToCustomItemType
        in: query
        description: Custom Item Type id
        required: false
        schema:
          $ref: '#/components/schemas/EntityTypeId'
      - name: plainTextCustomFields
        in: query
        description: Strip HTML tags from custom fields
        required: false
        schema:
          type: boolean
          description: Strip HTML tags from custom fields
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `billingType` - Billing type
          * `effortAllocation` - Effort Allocation
          * `responsiblePlaceholderIds` - List of placeholder assignee IDs
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - billingType
                - effortAllocation
                - responsiblePlaceholderIds
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
    delete:
      tags:
      - Tasks
      summary: Delete Tasks
      description: Delete task by Id.
      operationId: DELETE:/tasks/single
      parameters:
      - name: taskId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaskId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /timelog_categories:
    get:
      tags:
      - Timelog categories
      summary: Query Timelog categories
      description: Get timelog categories in account.
      operationId: GET:/timelog_categories/empty
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TimelogCategory'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - amReadOnlyTimelogCategory
        - amReadWriteTimelogCategory
        - wsReadOnly
        - wsReadWrite
  /timelogs:
    get:
      tags:
      - Timelogs
      summary: Query Timelogs
      description: Get all timelog records in current account.
      operationId: GET:/timelogs/empty
      parameters:
      - name: createdDate
        in: query
        description: "Created date filter, exact match or range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: updatedDate
        in: query
        description: "Last updated date filter, exact match or range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: trackedDate
        in: query
        description: "Tracked date filter, exact match or range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalDateTimeRange'
      - name: me
        in: query
        description: If present - only timelogs created by current user are returned
        required: false
        schema:
          type: boolean
          description: If present - only timelogs created by current user are returned
      - name: descendants
        in: query
        description: Adds all descendant tasks to search scope
        required: false
        schema:
          type: boolean
          description: Adds all descendant tasks to search scope
      - name: plainText
        in: query
        description: "Get comment text as plain text, HTML otherwise"
        required: false
        schema:
          type: boolean
          description: "Get comment text as plain text, HTML otherwise"
      - name: timelogCategories
        in: query
        description: "Get timelog records for specified categories. Limit : 1000"
        required: false
        content:
          application/json:
            schema:
              maxItems: 1000
              type: array
              description: Get timelog records for specified categories
              items:
                $ref: '#/components/schemas/TimelogCategoryId'
      - name: billingTypes
        in: query
        description: |-
          Billing type filter
          * `Billable` - Billable
          * `NonBillable` - Non-Billable
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Billing type filter
              items:
                $ref: '#/components/schemas/BillingType'
      - name: approvalStatuses
        in: query
        description: "Approval status filter\n* `Draft` - \n* `Approved` - \n* `Rejected`\
          \ - \n* `Cancelled` - \n* `Pending` - "
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Approval status filter
              items:
                $ref: '#/components/schemas/ApprovalStatus'
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `approvalStatus` - Timesheet approval status
          * `billingType` - Timelog billing type
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - approvalStatus
                - billingType
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Timelog'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /contacts/{contactId}/timelogs:
    get:
      tags:
      - Timelogs
      summary: Query Timelogs
      description: Get all timelog records that were created by the user.
      operationId: GET:/contacts/single/timelogs
      parameters:
      - name: contactId
        in: path
        required: true
        schema:
          oneOf:
          - $ref: '#/components/schemas/UserId'
          - $ref: '#/components/schemas/InvitationId'
      - name: createdDate
        in: query
        description: "Created date filter, exact match or range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: updatedDate
        in: query
        description: "Last updated date filter, exact match or range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: trackedDate
        in: query
        description: "Tracked date filter, exact match or range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalDateTimeRange'
      - name: me
        in: query
        description: If present - only timelogs created by current user are returned
        required: false
        schema:
          type: boolean
          description: If present - only timelogs created by current user are returned
      - name: descendants
        in: query
        description: Adds all descendant tasks to search scope
        required: false
        schema:
          type: boolean
          description: Adds all descendant tasks to search scope
      - name: plainText
        in: query
        description: "Get comment text as plain text, HTML otherwise"
        required: false
        schema:
          type: boolean
          description: "Get comment text as plain text, HTML otherwise"
      - name: timelogCategories
        in: query
        description: "Get timelog records for specified categories. Limit : 1000"
        required: false
        content:
          application/json:
            schema:
              maxItems: 1000
              type: array
              description: Get timelog records for specified categories
              items:
                $ref: '#/components/schemas/TimelogCategoryId'
      - name: billingTypes
        in: query
        description: |-
          Billing type filter
          * `Billable` - Billable
          * `NonBillable` - Non-Billable
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Billing type filter
              items:
                $ref: '#/components/schemas/BillingType'
      - name: approvalStatuses
        in: query
        description: "Approval status filter\n* `Draft` - \n* `Approved` - \n* `Rejected`\
          \ - \n* `Cancelled` - \n* `Pending` - "
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Approval status filter
              items:
                $ref: '#/components/schemas/ApprovalStatus'
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `approvalStatus` - Timesheet approval status
          * `billingType` - Timelog billing type
          * `finance` - Timelog Finance fields
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - approvalStatus
                - billingType
                - finance
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Timelog'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /folders/{folderId}/timelogs:
    get:
      tags:
      - Timelogs
      summary: Query Timelogs
      description: Get all timelog records for a folder.
      operationId: GET:/folders/single/timelogs
      parameters:
      - name: folderId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/FolderId'
      - name: createdDate
        in: query
        description: "Created date filter, exact match or range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: updatedDate
        in: query
        description: "Last updated date filter, exact match or range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: trackedDate
        in: query
        description: "Tracked date filter, exact match or range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalDateTimeRange'
      - name: me
        in: query
        description: If present - only timelogs created by current user are returned
        required: false
        schema:
          type: boolean
          description: If present - only timelogs created by current user are returned
      - name: descendants
        in: query
        description: Adds all descendant tasks to search scope
        required: false
        schema:
          type: boolean
          description: Adds all descendant tasks to search scope
      - name: plainText
        in: query
        description: "Get comment text as plain text, HTML otherwise"
        required: false
        schema:
          type: boolean
          description: "Get comment text as plain text, HTML otherwise"
      - name: timelogCategories
        in: query
        description: "Get timelog records for specified categories. Limit : 1000"
        required: false
        content:
          application/json:
            schema:
              maxItems: 1000
              type: array
              description: Get timelog records for specified categories
              items:
                $ref: '#/components/schemas/TimelogCategoryId'
      - name: billingTypes
        in: query
        description: |-
          Billing type filter
          * `Billable` - Billable
          * `NonBillable` - Non-Billable
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Billing type filter
              items:
                $ref: '#/components/schemas/BillingType'
      - name: approvalStatuses
        in: query
        description: "Approval status filter\n* `Draft` - \n* `Approved` - \n* `Rejected`\
          \ - \n* `Cancelled` - \n* `Pending` - "
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Approval status filter
              items:
                $ref: '#/components/schemas/ApprovalStatus'
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `approvalStatus` - Timesheet approval status
          * `billingType` - Timelog billing type
          * `finance` - Timelog Finance fields
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - approvalStatus
                - billingType
                - finance
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Timelog'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /tasks/{taskId}/timelogs:
    get:
      tags:
      - Timelogs
      summary: Query Timelogs
      description: Get all timelog records for a task.
      operationId: GET:/tasks/single/timelogs
      parameters:
      - name: taskId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaskId'
      - name: createdDate
        in: query
        description: "Created date filter, exact match or range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: updatedDate
        in: query
        description: "Last updated date filter, exact match or range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: trackedDate
        in: query
        description: "Tracked date filter, exact match or range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalDateTimeRange'
      - name: me
        in: query
        description: If present - only timelogs created by current user are returned
        required: false
        schema:
          type: boolean
          description: If present - only timelogs created by current user are returned
      - name: descendants
        in: query
        description: Adds all descendant tasks to search scope
        required: false
        schema:
          type: boolean
          description: Adds all descendant tasks to search scope
      - name: plainText
        in: query
        description: "Get comment text as plain text, HTML otherwise"
        required: false
        schema:
          type: boolean
          description: "Get comment text as plain text, HTML otherwise"
      - name: timelogCategories
        in: query
        description: "Get timelog records for specified categories. Limit : 1000"
        required: false
        content:
          application/json:
            schema:
              maxItems: 1000
              type: array
              description: Get timelog records for specified categories
              items:
                $ref: '#/components/schemas/TimelogCategoryId'
      - name: billingTypes
        in: query
        description: |-
          Billing type filter
          * `Billable` - Billable
          * `NonBillable` - Non-Billable
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Billing type filter
              items:
                $ref: '#/components/schemas/BillingType'
      - name: approvalStatuses
        in: query
        description: "Approval status filter\n* `Draft` - \n* `Approved` - \n* `Rejected`\
          \ - \n* `Cancelled` - \n* `Pending` - "
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Approval status filter
              items:
                $ref: '#/components/schemas/ApprovalStatus'
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `approvalStatus` - Timesheet approval status
          * `billingType` - Timelog billing type
          * `finance` - Timelog Finance fields
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - approvalStatus
                - billingType
                - finance
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Timelog'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
    post:
      tags:
      - Timelogs
      summary: Create Timelog
      description: Create timelog record for task.
      operationId: POST:/tasks/single/timelogs
      parameters:
      - name: taskId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TaskId'
      - name: comment
        in: query
        description: Timelog record comment
        required: true
        schema:
          type: string
          description: Timelog record comment
      - name: hours
        in: query
        description: Time to log in hours
        required: true
        schema:
          type: number
          description: Time to log in hours
      - name: trackedDate
        in: query
        description: Date to register time
        required: true
        schema:
          type: string
          description: Date to register time
      - name: plainText
        in: query
        description: "Get comment text as plain text, HTML otherwise"
        required: false
        schema:
          type: boolean
          description: "Get comment text as plain text, HTML otherwise"
      - name: categoryId
        in: query
        description: Timelog category
        required: false
        schema:
          $ref: '#/components/schemas/TimelogCategoryId'
      - name: onBehalfOf
        in: query
        description: Create a time entry for another user
        required: false
        schema:
          $ref: '#/components/schemas/UserId'
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `approvalStatus` - Timesheet approval status
          * `billingType` - Timelog billing type
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - approvalStatus
                - billingType
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Timelog'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /timelog_categories/{timelogCategoryId}/timelogs:
    get:
      tags:
      - Timelogs
      summary: Query Timelogs
      description: Get all timelog records with specific timelog category.
      operationId: GET:/timelog_categories/single/timelogs
      parameters:
      - name: timelogCategoryId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TimelogCategoryId'
      - name: createdDate
        in: query
        description: "Created date filter, exact match or range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: updatedDate
        in: query
        description: "Last updated date filter, exact match or range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantRange'
      - name: trackedDate
        in: query
        description: "Tracked date filter, exact match or range"
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalDateTimeRange'
      - name: me
        in: query
        description: If present - only timelogs created by current user are returned
        required: false
        schema:
          type: boolean
          description: If present - only timelogs created by current user are returned
      - name: descendants
        in: query
        description: Adds all descendant tasks to search scope
        required: false
        schema:
          type: boolean
          description: Adds all descendant tasks to search scope
      - name: plainText
        in: query
        description: "Get comment text as plain text, HTML otherwise"
        required: false
        schema:
          type: boolean
          description: "Get comment text as plain text, HTML otherwise"
      - name: timelogCategories
        in: query
        description: "Get timelog records for specified categories. Limit : 1000"
        required: false
        content:
          application/json:
            schema:
              maxItems: 1000
              type: array
              description: Get timelog records for specified categories
              items:
                $ref: '#/components/schemas/TimelogCategoryId'
      - name: billingTypes
        in: query
        description: |-
          Billing type filter
          * `Billable` - Billable
          * `NonBillable` - Non-Billable
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Billing type filter
              items:
                $ref: '#/components/schemas/BillingType'
      - name: approvalStatuses
        in: query
        description: "Approval status filter\n* `Draft` - \n* `Approved` - \n* `Rejected`\
          \ - \n* `Cancelled` - \n* `Pending` - "
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Approval status filter
              items:
                $ref: '#/components/schemas/ApprovalStatus'
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `approvalStatus` - Timesheet approval status
          * `billingType` - Timelog billing type
          * `finance` - Timelog Finance fields
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - approvalStatus
                - billingType
                - finance
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Timelog'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /timelogs/{timelogIds}:
    get:
      tags:
      - Timelogs
      summary: Query Timelogs
      description: Get timelog record by IDs.
      operationId: GET:/timelogs/multi
      parameters:
      - name: timelogIds
        in: path
        description: "Comma-separated list of ids. Limit : 1000"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 1000
              type: array
              items:
                $ref: '#/components/schemas/TimelogId'
      - name: plainText
        in: query
        description: "Get comment text as plain text, HTML otherwise"
        required: false
        schema:
          type: boolean
          description: "Get comment text as plain text, HTML otherwise"
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `approvalStatus` - Timesheet approval status
          * `billingType` - Timelog billing type
          * `finance` - Timelog Finance fields
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - approvalStatus
                - billingType
                - finance
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Timelog'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /timelogs/{timelogId}:
    put:
      tags:
      - Timelogs
      summary: Modify Timelog
      description: Update timelog by Id.
      operationId: PUT:/timelogs/single
      parameters:
      - name: timelogId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TimelogId'
      - name: comment
        in: query
        description: Timelog comment
        required: false
        schema:
          type: string
          description: Timelog comment
      - name: hours
        in: query
        description: New timelog tracked hours
        required: false
        schema:
          type: number
          description: New timelog tracked hours
      - name: trackedDate
        in: query
        description: New timelog date
        required: false
        schema:
          type: string
          description: New timelog date
      - name: plainText
        in: query
        description: "Get comment text as plain text, HTML otherwise"
        required: false
        schema:
          type: boolean
          description: "Get comment text as plain text, HTML otherwise"
      - name: categoryId
        in: query
        description: Timelog category
        required: false
        schema:
          $ref: '#/components/schemas/TimelogCategoryId'
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `approvalStatus` - Timesheet approval status
          * `billingType` - Timelog billing type
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - approvalStatus
                - billingType
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Timelog'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
    delete:
      tags:
      - Timelogs
      summary: Delete Timelog
      description: Delete Timelog record by ID.
      operationId: DELETE:/timelogs/single
      parameters:
      - name: timelogId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/TimelogId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      type: string
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /timesheet_submission_rules:
    get:
      tags:
      - Timesheet Submission Rules
      summary: Get Timesheet Submission Rules
      description: List all timesheet submission rules in account.
      operationId: GET:/timesheet_submission_rules/empty
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TimesheetSubmissionRule'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
  /workschedules/{workscheduleId}/timesheet_submission_rules:
    get:
      tags:
      - Timesheet Submission Rules
      summary: Get Timesheet Submission Rules
      description: Get timesheet submission rule.
      operationId: GET:/workschedules/single/timesheet_submission_rules
      parameters:
      - name: workscheduleId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkScheduleId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TimesheetSubmissionRule'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadOnly
        - wsReadWrite
    put:
      tags:
      - Timesheet Submission Rules
      summary: Update Timesheet Submission Rules
      description: Update timesheet submission rule.
      operationId: PUT:/workschedules/single/timesheet_submission_rules
      parameters:
      - name: workscheduleId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkScheduleId'
      - name: enabled
        in: query
        description: Switch to toggle on/off timesheet submission rule
        required: false
        schema:
          type: boolean
          description: Switch to toggle on/off timesheet submission rule
      - name: ruleType
        in: query
        description: |-
          Type of timesheet submission rule
          * `Hard` - Hard
          * `Soft` - Soft
        required: false
        schema:
          $ref: '#/components/schemas/TimesheetSubmissionRuleType'
      - name: frequency
        in: query
        description: |-
          Frequency for timesheet submission rule
          * `Week` - Week
          * `Day` - Day
        required: false
        schema:
          $ref: '#/components/schemas/TimesheetSubmissionRuleFrequency'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TimesheetSubmissionRule'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - wsReadWrite
  /user_schedule_exclusions:
    get:
      tags:
      - User Schedule exceptions
      summary: Query User Schedule exception
      description: Get exceptions for given users and date range.
      operationId: GET:/user_schedule_exclusions/empty
      parameters:
      - name: dateRange
        in: query
        description: Query exceptions for given date range
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalDateRange'
      - name: userIds
        in: query
        description: "Query exceptions for given user ids. Limit : 100000"
        required: false
        content:
          application/json:
            schema:
              maxItems: 100000
              type: array
              description: Query exceptions for given user ids
              items:
                $ref: '#/components/schemas/UserId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserScheduleException'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadOnlyWorkSchedule
        - amReadWriteWorkSchedule
    post:
      tags:
      - User Schedule exceptions
      summary: Create User Schedule exception
      description: Create new exception for given user.
      operationId: POST:/user_schedule_exclusions/empty
      parameters:
      - name: userId
        in: query
        description: User id to add new exception
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      - name: fromDate
        in: query
        description: New exception from date
        required: true
        schema:
          type: string
          description: New exception from date
      - name: toDate
        in: query
        description: New exception to date
        required: true
        schema:
          type: string
          description: New exception to date
      - name: exclusionType
        in: query
        description: |-
          Type of new exception
          * `VacationPTO` - Paid vacations
          * `Overtime` - Additional working days
          * `OtherNonWorking` - Other non-working days
        required: true
        schema:
          $ref: '#/components/schemas/UserScheduleExclusionType'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserScheduleException'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadWriteWorkSchedule
  /user_schedule_exclusions/{userScheduleExclusionId}:
    get:
      tags:
      - User Schedule exceptions
      summary: Query User Schedule exception
      description: Get exception by Id.
      operationId: GET:/user_schedule_exclusions/single
      parameters:
      - name: userScheduleExclusionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserScheduleExclusionId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserScheduleException'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadOnlyWorkSchedule
        - amReadWriteWorkSchedule
    put:
      tags:
      - User Schedule exceptions
      summary: Update User Schedule exception
      description: Update exception for given user.
      operationId: PUT:/user_schedule_exclusions/single
      parameters:
      - name: userScheduleExclusionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserScheduleExclusionId'
      - name: fromDate
        in: query
        description: Exception from date
        required: false
        schema:
          type: string
          description: Exception from date
      - name: toDate
        in: query
        description: Exception to date
        required: false
        schema:
          type: string
          description: Exception to date
      - name: exclusionType
        in: query
        description: |-
          Type of exception
          * `VacationPTO` - Paid vacations
          * `Overtime` - Additional working days
          * `OtherNonWorking` - Other non-working days
        required: false
        schema:
          $ref: '#/components/schemas/UserScheduleExclusionType'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserScheduleException'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadWriteWorkSchedule
    delete:
      tags:
      - User Schedule exceptions
      summary: Delete User Schedule exception
      description: Delete exception.
      operationId: DELETE:/user_schedule_exclusions/single
      parameters:
      - name: userScheduleExclusionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserScheduleExclusionId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserScheduleException'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadWriteWorkSchedule
  /user_types:
    get:
      tags:
      - User Types
      summary: Get User Types
      description: User types.
      operationId: GET:/user_types/empty
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserType'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadOnlyAccessRole
  /users/{userId}:
    get:
      tags:
      - Users
      summary: Query User
      description: Returns information about single user.
      operationId: GET:/users/single
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadOnlyUser
        - amReadWriteUser
    put:
      tags:
      - Users
      summary: Modify User
      description: Update users by ID (accessible to Admins only).
      operationId: PUT:/users/single
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      - name: profile
        in: query
        description: "[Deprecated] It is recommended to use 'userTypeId' parameter\
          \ instead. Profile to be updated. Mutually exclusive with other params"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
      - name: userTypeId
        in: query
        description: Change user type of user in account. Mutually exclusive with
          other params
        required: false
        schema:
          type: string
          description: Change user type of user in account. Mutually exclusive with
            other params
      - name: active
        in: query
        description: Activate or deactivate user. Mutually exclusive with other params
        required: false
        schema:
          type: boolean
          description: Activate or deactivate user. Mutually exclusive with other
            params
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadWriteUser
  /users/{userIds}:
    put:
      tags:
      - Users
      summary: Modify User
      description: Activate/deactivate users in account by ID (accessible to Admins
        only).
      operationId: PUT:/users/multi
      parameters:
      - name: userIds
        in: path
        description: "Comma-separated list of ids. Limit : 100"
        required: true
        content:
          text/csv:
            schema:
              maxItems: 100
              type: array
              items:
                $ref: '#/components/schemas/UserId'
      - name: active
        in: query
        description: Activate or deactivate user. Mutually exclusive with other params
        required: false
        schema:
          type: boolean
          description: Activate or deactivate user. Mutually exclusive with other
            params
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadWriteUser
  /version:
    get:
      tags:
      - Version
      summary: API Version
      description: Returns current API version info.
      operationId: GET:/version/empty
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Apiv3Version'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
  /workschedule_exclusions/{workscheduleExclusionId}:
    get:
      tags:
      - Work Schedule exceptions
      summary: Query Work Schedule exceptions
      description: Get exception by Id.
      operationId: GET:/workschedule_exclusions/single
      parameters:
      - name: workscheduleExclusionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkScheduleExclusionId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorkScheduleException'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadOnlyWorkSchedule
        - amReadWriteWorkSchedule
    put:
      tags:
      - Work Schedule exceptions
      summary: Update Work Schedule exception
      description: Update exception by Id.
      operationId: PUT:/workschedule_exclusions/single
      parameters:
      - name: workscheduleExclusionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkScheduleExclusionId'
      - name: fromDate
        in: query
        description: Exception from date
        required: false
        schema:
          type: string
          description: Exception from date
      - name: toDate
        in: query
        description: Exception to date
        required: false
        schema:
          type: string
          description: Exception to date
      - name: exclusionType
        in: query
        description: |-
          Type of exception
          * `PublicHolidays` - Non-working days because of public holidays
          * `OtherEvent` - Non-working days because of some company or private event
          * `AdditionalWorkDays` - Additional working days, i.e. during weekends
        required: false
        schema:
          $ref: '#/components/schemas/WorkScheduleExclusionType'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorkScheduleException'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadWriteWorkSchedule
    delete:
      tags:
      - Work Schedule exceptions
      summary: Delete Work Schedule exception
      description: Delete exception by id.
      operationId: DELETE:/workschedule_exclusions/single
      parameters:
      - name: workscheduleExclusionId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkScheduleExclusionId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorkScheduleException'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadWriteWorkSchedule
  /workschedules/{workscheduleId}/workschedule_exclusions:
    get:
      tags:
      - Work Schedule exceptions
      summary: Query Work Schedule exceptions
      description: Get all exceptions for given schedule.
      operationId: GET:/workschedules/single/workschedule_exclusions
      parameters:
      - name: workscheduleId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkScheduleId'
      - name: dateRange
        in: query
        description: Date range to query exceptions
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalDateRange'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorkScheduleException'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadOnlyWorkSchedule
        - amReadWriteWorkSchedule
    post:
      tags:
      - Work Schedule exceptions
      summary: Create Work Schedule exception
      description: Create exception for given schedule.
      operationId: POST:/workschedules/single/workschedule_exclusions
      parameters:
      - name: workscheduleId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkScheduleId'
      - name: fromDate
        in: query
        description: New exception from date
        required: true
        schema:
          type: string
          description: New exception from date
      - name: toDate
        in: query
        description: New exception to date
        required: true
        schema:
          type: string
          description: New exception to date
      - name: exclusionType
        in: query
        description: |-
          Type of new exception
          * `PublicHolidays` - Non-working days because of public holidays
          * `OtherEvent` - Non-working days because of some company or private event
          * `AdditionalWorkDays` - Additional working days, i.e. during weekends
        required: true
        schema:
          $ref: '#/components/schemas/WorkScheduleExclusionType'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorkScheduleException'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadWriteWorkSchedule
  /workschedules:
    get:
      tags:
      - Work Schedules
      summary: Query Work Schedules
      description: Returns list of all work schedules in account.
      operationId: GET:/workschedules/empty
      parameters:
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `userIds` - Users assigned to WorkSchedule
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - userIds
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorkSchedule'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadOnlyWorkSchedule
        - amReadWriteWorkSchedule
    post:
      tags:
      - Work Schedules
      summary: Create Work Schedule
      description: Create schedule in account.
      operationId: POST:/workschedules/empty
      parameters:
      - name: title
        in: query
        description: Name of schedule
        required: true
        schema:
          type: string
          description: Name of schedule
      - name: workweek
        in: query
        description: "Work week: working and non-working days. Limit : 7"
        required: true
        content:
          application/json:
            schema:
              maxItems: 7
              type: array
              description: "Work week: working and non-working days"
              items:
                $ref: '#/components/schemas/WorkWeekUpdate'
      - name: addUsers
        in: query
        description: "User ids to assign to the schedule. Limit : 100000"
        required: false
        content:
          application/json:
            schema:
              maxItems: 100000
              type: array
              description: User ids to assign to the schedule
              items:
                $ref: '#/components/schemas/UserId'
      - name: capacityMinutes
        in: query
        description: Custom capacity in minutes
        required: false
        schema:
          type: number
          description: Custom capacity in minutes
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `userIds` - Users assigned to WorkSchedule
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - userIds
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorkSchedule'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadWriteWorkSchedule
  /workschedules/{workscheduleId}:
    get:
      tags:
      - Work Schedules
      summary: Query Work Schedules
      description: Get work schedule by Id.
      operationId: GET:/workschedules/single
      parameters:
      - name: workscheduleId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkScheduleId'
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `userIds` - Users assigned to WorkSchedule
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - userIds
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorkSchedule'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadOnlyWorkSchedule
        - amReadWriteWorkSchedule
    put:
      tags:
      - Work Schedules
      summary: Update Work Schedule
      description: Create work schedule in account.
      operationId: PUT:/workschedules/single
      parameters:
      - name: workscheduleId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkScheduleId'
      - name: title
        in: query
        description: Name of work schedule
        required: false
        schema:
          type: string
          description: Name of work schedule
      - name: workweek
        in: query
        description: "Work week: working and non-working days. Limit : 7"
        required: false
        content:
          application/json:
            schema:
              maxItems: 7
              type: array
              description: "Work week: working and non-working days"
              items:
                $ref: '#/components/schemas/WorkWeekUpdate'
      - name: addUsers
        in: query
        description: "User ids to assign to the schedule. Limit : 100000"
        required: false
        content:
          application/json:
            schema:
              maxItems: 100000
              type: array
              description: User ids to assign to the schedule
              items:
                $ref: '#/components/schemas/UserId'
      - name: removeUsers
        in: query
        description: User ids to unassign from the schedule
        required: false
        content:
          application/json:
            schema:
              type: array
              description: User ids to unassign from the schedule
              items:
                $ref: '#/components/schemas/UserId'
      - name: capacityMinutes
        in: query
        description: Custom capacity in minutes
        required: false
        schema:
          type: number
          description: Custom capacity in minutes
      - name: fields
        in: query
        description: |-
          Json string array of optional fields to be included in the response model
          * `userIds` - Users assigned to WorkSchedule
        required: false
        content:
          application/json:
            schema:
              type: array
              description: Json string array of optional fields to be included in
                the response model
              items:
                type: string
                enum:
                - userIds
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorkSchedule'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadWriteWorkSchedule
    delete:
      tags:
      - Work Schedules
      summary: Delete Work Schedule
      description: Delete work schedule from account.
      operationId: DELETE:/workschedules/single
      parameters:
      - name: workscheduleId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkScheduleId'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorkSchedule'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadWriteWorkSchedule
  /workflows:
    get:
      tags:
      - Workflows
      summary: Query Workflows
      description: Returns list of workflows with custom statuses. Only account-wide
        workflows are returned.
      operationId: GET:/workflows/empty
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Workflow'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - Default
        - amReadOnlyWorkflow
        - amReadWriteWorkflow
        - wsReadOnly
        - wsReadWrite
    post:
      tags:
      - Workflows
      summary: Create Workflow
      description: Create workflow in account.
      operationId: POST:/workflows/empty
      parameters:
      - name: name
        in: query
        description: "Name of workflow, required"
        required: true
        schema:
          type: string
          description: "Name of workflow, required"
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Workflow'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadWriteWorkflow
  /workflows/{workflowId}:
    put:
      tags:
      - Workflows
      summary: Modify Workflow
      description: Update workflow or custom statuses.
      operationId: PUT:/workflows/single
      parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/WorkflowId'
      - name: name
        in: query
        description: Name of workflow (128 symbols max)
        required: false
        schema:
          type: string
          description: Name of workflow (128 symbols max)
      - name: hidden
        in: query
        description: Workflow is hidden
        required: false
        schema:
          type: boolean
          description: Workflow is hidden
      - name: customStatus
        in: query
        description: Custom status
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomStatusInput'
      responses:
        "2XX":
          description: success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  kind:
                    $ref: '#/components/schemas/ResponseKind'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Workflow'
        "4XX":
          description: client-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "5XX":
          description: server-side error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
      - HTTP: []
      - OAUTH2:
        - amReadWriteWorkflow
components:
  schemas:
    Account:
      type: object
      properties:
        metadata:
          type: array
          description: List of account metadata entries. Entries could be read by
            all users of account and modified by admins only
          items:
            $ref: '#/components/schemas/Metadata'
        createdDate:
          type: string
          description: Registration date
        workDays:
          type: array
          description: "List of weekdays, not empty. These days are used in task duration\
            \ computation"
          items:
            $ref: '#/components/schemas/WeekDay'
        dateFormat:
          type: string
          description: "Date format: dd/MM/yyyy or MM/dd/yyyy"
        firstDayOfWeek:
          $ref: '#/components/schemas/WeekDay'
        customFields:
          type: array
          description: List of custom fields accessible for requesting user in the
            account
          items:
            $ref: '#/components/schemas/CustomFieldInfo'
        name:
          type: string
          description: Name of account
        recycleBinId:
          $ref: '#/components/schemas/FolderId'
        rootFolderId:
          $ref: '#/components/schemas/FolderId'
        id:
          $ref: '#/components/schemas/AccountId'
        subscription:
          $ref: '#/components/schemas/AccountSubscription'
        joinedDate:
          type: string
          description: Date when the user has joined the account
    FolderColor:
      type: string
      enum:
      - Indigo4
      - Gray3
      - Indigo2
      - Indigo3
      - Gray2
      - Gray1
      - Yellow1
      - Yellow2
      - Yellow3
      - Blue1
      - Yellow4
      - Blue2
      - Green4
      - Blue3
      - Green3
      - Blue4
      - Green2
      - Green1
      - Orange4
      - Orange3
      - Orange2
      - Orange1
      - Person
      - Purple1
      - Purple2
      - Purple3
      - Pink1
      - Red3
      - Pink2
      - Red4
      - Pink3
      - Red1
      - Pink4
      - Red2
      - Purple4
      - DarkBlue1
      - DarkBlue3
      - DarkBlue2
      - DarkBlue4
      - YellowGreen4
      - YellowGreen3
      - YellowGreen2
      - YellowGreen1
      - Turquoise3
      - Turquoise4
      - Turquoise1
      - Turquoise2
      - Indigo1
      - DarkCyan2
      - None
      - DarkCyan1
      - DarkCyan4
      - DarkCyan3
    CustomStatus:
      required:
      - standardName
      - standard
      - id
      - name
      - group
      - hidden
      type: object
      properties:
        standard:
          type: boolean
          description: Defines default custom status (ignored in requests)
        standardName:
          type: boolean
          description: Whether status name is default or not
        color:
          $ref: '#/components/schemas/StatusColor'
        hidden:
          type: boolean
          description: Custom status is hidden
        name:
          type: string
          description: Name (128 symbols max)
        id:
          $ref: '#/components/schemas/CustomStatusId'
        group:
          $ref: '#/components/schemas/TaskStatus'
      description: |-
        ID and group cannot be set simultaneously in request parameter,
        but ID is required for update, and group is required for insert
    ResponseKind:
      type: string
      enum:
      - accounts
      - users
      - contacts
      - eDiscoveryReport
      - folders
      - folderTree
      - tasks
      - taskIds
      - timelogs
      - timelogCategories
      - timelogLockPeriods
      - timetrackerTimers
      - comments
      - attachments
      - url
      - version
      - dataExport
      - dataExportSchema
      - auditLog
      - accessRoles
      - stream
      - changes
      - posts
      - mailSettings
      - integrationInfo
      - gmailIntegrationSettings
      - workTypesForIntegrations
      - ids
      - backups
      - domains
      - dependencies
      - workflows
      - workschedules
      - workscheduleExclusions
      - workscheduleUserExclusions
      - customfields
      - customfieldIds
      - customstatuses
      - invitations
      - notifications
      - jobroles
      - placeholders
      - groups
      - session
      - dashboards
      - widgets
      - taskCreationSettings
      - colors
      - experiments
      - topics
      - topicComments
      - webhooks
      - reviews
      - boards
      - textSearch
      - chatChannels
      - chatMessages
      - forms
      - requestForms
      - request
      - report
      - platformWidgets
      - platformWidgetInstances
      - spaces
      - pdf
      - customerSatisfaction
      - asyncJob
      - approvals
      - highlights
      - highlightsList
      - highlightsSettings
      - highlightsCard
      - timesheet
      - timesheetSubmissionRule
      - mobileFeatures
      - mobileSettings
      - folderBlueprintTree
      - taskBlueprintTree
      - feedback
      - timeline_snapshot
      - contactIds
      - bookings
      - integrateThreshold
      - hourlyRatesProvision
      - hourlyRates
      - projectTeamMembers
      - contactsHistory
      - tasksHistory
      - foldersHistory
      - activityDigest
      - workItemTemplates
      - workTemplates
      - workItemMetadata
      - workItem
      - customItemTypes
      - verificationCode
      - views
      - listView
      - tableView
      - userTypes
      - reactions
      - externalRequesters
      - rollups
    DataExportStatus:
      type: string
      enum:
      - Scheduled
      - Failed
      - Completed
      - InProgress
      - Cancelled
    TaskEffort:
      required:
      - mode
      type: object
      properties:
        dailyAllocationPercentage:
          type: number
          description: "Allocation in percentages per day, for effort daily mode"
        mode:
          $ref: '#/components/schemas/EffortMode'
        allocatedEffort:
          type: number
          description: Allocated Effort in minutes
        totalEffort:
          type: number
          description: Total Effort in minutes
        responsibleAllocation:
          type: array
          description: Responsible allocations by day
          items:
            $ref: '#/components/schemas/ResponsibleAllocation'
    CustomFieldApplicableEntityType:
      type: string
      enum:
      - User
      - WorkItem
    CustomFieldId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    AuditLogOperation:
      type: string
      enum:
      - SecondFactorEnabled
      - CustomFieldRemoved
      - CalendarExternalLinksActivated
      - TaskDuplication
      - GanttSnapshotDeleted
      - CalendarExternalLinkDeleted
      - TaskRestored
      - CalendarExternalLinksDeactivated
      - PowerBIPublicLinkDeleted
      - ApprovalCanceled
      - RequestFormCreated
      - SamlClearPasswordForSamlUsers
      - OneTimePasswordUsed
      - AnalyzeWidgetPublicLinkCreated
      - TaskErased
      - InvitationPolicyChanged
      - CalendarExternalLinkCreated
      - UserTaskGroupRolesChanged
      - UserJoinedSpace
      - SamlSSOSettingsChanged
      - UserFailLogin
      - SamlSSODisabled
      - AdminMailSettingsChanged
      - CustomFieldRemovedFromFolder
      - UserLoggedIn
      - UserRoleChanged
      - CustomFieldAddedToFolder
      - UserTypeModified
      - AccessCodeAccepted
      - PublicLinkExpirationChanged
      - UserLogout
      - PowerBIPublicLinkCreated
      - GuestReviewerRevoked
      - ApprovedIpRangesOrSubnetsChanged
      - TaskScheduleChanged
      - CustomFieldRestored
      - AccountDeleted
      - UserAdminPermissionsChanged
      - AttachDeleted
      - SpaceDeleted
      - AuditReportCreated
      - UserTypeCreated
      - ExcelExportCreated
      - AdminLoggedInAsUser
      - WorkflowCreated
      - TaskUnsharedFromAuthor
      - AccessAuditReportCsvExport
      - AttachMarkAsFinal
      - OneTimePasswordStatusSwitched
      - ApproverAdded
      - UserLeftSpace
      - TaskUnarchived
      - ApprovalDescriptionChanged
      - GroupParentRemoved
      - GuestReviewAccountSettingsChanged
      - WorkflowDeleted
      - PasswordPolicyModified
      - GroupInviteeAdded
      - UserRestored
      - ApprovalDueDateChanged
      - AnalyzeWidgetPublicLinkDeleted
      - SpaceArchivedUnarchived
      - TaskStatusChanged
      - TaskCommentChanged
      - AccessRoleDeleted
      - TaskUnassigned
      - AnalyzePublicLinkCreated
      - GuestReviewRejected
      - TaskUnshared
      - PasswordChanged
      - RequestFormDeleted
      - AttemptDownloadInfectedAttach
      - InvitationSend
      - AccessRoleModified
      - SpaceCreated
      - ApprovedDomainsChanged
      - TimesheetStatusChanged
      - TimelogLocked
      - UserRevokeAdmin
      - RecycleBinErased
      - ApproverRemoved
      - UserDeleted
      - GanttSnapshotCreated
      - GroupMemberRemoved
      - UserProfileUpdated
      - SecondFactorUsageReportCreated
      - SecondFactorDisabled
      - AttachViewed
      - AccessRoleCreated
      - GroupMemberAdded
      - AccountDataExportRequested
      - SamlSSOMetadataChanged
      - GroupRenamed
      - PublicLinkCreated
      - TaskShared
      - AccountModified
      - PublicLinkPasswordRequested
      - WorkflowModified
      - PublicLinkDeleted
      - AccessCodeDeclined
      - AnalyzeWidgetPublicLinkAccessed
      - ApprovalCreated
      - Oauth2AccessRevoked
      - TaskParentRemoved
      - AntivirusDeletedInfectedAttach
      - RequestFormModified
      - GroupInviteeRemoved
      - GuestReviewerInvited
      - TaskArchived
      - AccountBackupCreated
      - FeedCreated
      - AccessCodeGenerated
      - UserDeactivated
      - AttachCopied
      - GroupParentAdded
      - GuestReviewerChanged
      - TimelogUnlocked
      - TaskCreated
      - OneTimePasswordRevoked
      - ApprovalFinished
      - TaskAssigned
      - OneTimePasswordCreated
      - GroupCreated
      - TimesheetCreated
      - UsersAndGroupsExported
      - AttachMoved
      - CustomFieldCreated
      - AutomatedIntegrationsExecution
      - PowerBIPublicLinkAccessed
      - AttachUnmarkAsFinal
      - AnalyzePublicLinkAccessed
      - GroupDeleted
      - CustomFieldModified
      - TaskCommentDeleted
      - AnalyzePublicLinkDeleted
      - UserTypeDeleted
      - Oauth2AccessGranted
      - UserGrantAdmin
      - PublicLinksAccountSettingsChanged
      - TaskDeleted
      - InvitationAccepted
      - AccountDataExportGenerated
      - SamlSSOEnabled
      - PublicLinkPasswordChanged
      - TaskParentAdded
      - ApprovalDecisionMade
      - GuestReviewAccepted
      - UserCustomFieldValueChanged
      - UserActivated
      - AttachUploaded
      - AttachDownloaded
    AccountSubscriptionType:
      type: string
      enum:
      - CreativeBusiness
      - CreativeEnterprise
      - Enterprise
      - Premium
      - Free
      - Business
    DataExportOperation:
      type: object
      properties:
        resources:
          type: array
          description: List of exported resources
          items:
            $ref: '#/components/schemas/DataExportResource'
        id:
          $ref: '#/components/schemas/DataExportId'
        completedDate:
          type: string
          description: The date when data export was finished
        status:
          $ref: '#/components/schemas/DataExportStatus'
    WorkflowId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    ApprovalStatus:
      type: string
      enum:
      - Draft
      - Approved
      - Rejected
      - Cancelled
      - Pending
    WorkScheduleType:
      type: string
      enum:
      - Custom
      - Default
    CustomFieldSettings:
      required:
      - readOnly
      type: object
      properties:
        optionColorsEnabled:
          type: boolean
          description: Is colors for options enabled (only for DropDown and MultipleSelect
            type). Use parameter 'options' to specify colors
        linkToDatabaseInfo:
          $ref: '#/components/schemas/CustomFieldLinkToDatabaseField'
        timezone:
          type: string
          description: "Timezone Id, e.g 'America/New_York' (only for Date type)"
        values:
          type: array
          description: Dropdown values without colors (only for DropDown and MultipleSelect
            type)
          items:
            type: string
        aggregation:
          $ref: '#/components/schemas/CustomFieldAggregationType'
        readOnly:
          type: boolean
          description: Is field value read only
        allowOtherValues:
          type: boolean
          description: Allow users to input other values (only for DropDown type)
        useThousandsSeparator:
          type: boolean
          description: Use thousands separator (only for Numeric type)
        decimalPlaces:
          type: number
          description: "Decimal places (only for Numeric, Percentage and Currency\
            \ types)"
        options:
          type: array
          description: |
            Dropdown options with colors (only for DropDown and MultipleSelect type). Array of objects:
            {"value": "string", "color": "enum: Brown, Red, Purple, Indigo, DarkBlue, Blue, Turquoise, DarkCyan, Green, YellowGreen, Yellow, Orange, Gray, DarkRed"}
          items:
            $ref: '#/components/schemas/CustomFieldDropdownOption'
        currency:
          $ref: '#/components/schemas/CustomFieldCurrency'
        allowTime:
          type: boolean
          description: Allow users to input time (only for Date type)
        mirrorInfo:
          $ref: '#/components/schemas/CustomFieldMirrorField'
        applicableEntityTypes:
          type: array
          description: Applicable entity types
          items:
            $ref: '#/components/schemas/CustomFieldApplicableEntityType'
        contacts:
          type: array
          description: Allowed users or invitations (only for Users type)
          items:
            $ref: '#/components/schemas/UserId'
        inheritanceType:
          $ref: '#/components/schemas/CustomFieldInheritanceType'
    InvitationStatus:
      type: string
      enum:
      - Declined
      - Cancelled
      - Pending
      - Accepted
    CustomStatusInput:
      required:
      - id
      - name
      - group
      - hidden
      type: object
      properties:
        color:
          $ref: '#/components/schemas/StatusColor'
        hidden:
          type: boolean
          description: Custom status is hidden
        name:
          type: string
          description: Name (128 symbols max)
        id:
          $ref: '#/components/schemas/CustomStatusId'
        group:
          $ref: '#/components/schemas/TaskStatus'
      description: |-
        ID and group cannot be set simultaneously in request parameter,
        but ID is required for update, and group is required for insert
    UserScheduleExclusionId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    AsyncJobType:
      type: string
      enum:
      - TaskBlueprintLaunch
      - WorkTemplateLaunch
      - SubmitRequestForm
      - CopyFolder
      - FolderBlueprintLaunch
    AccessRoleId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    ApprovalType:
      type: string
      enum:
      - FilesOnly
      - Regular
    Approval:
      type: object
      properties:
        dueDate:
          type: string
          description: "Due date, if exists"
        description:
          type: string
          description: Description
        finished:
          type: boolean
          description: Is approval finished
        updatedDate:
          type: string
          description: Update date
        authorId:
          $ref: '#/components/schemas/UserId'
        title:
          type: string
          description: "Title. Empty by default, set via workflow automation or by\
            \ user on the portal"
        type:
          $ref: '#/components/schemas/ApprovalType'
        autoFinishOnReject:
          type: boolean
          description: Is approval would be finished automatically on reaching Rejected
            status
        folderId:
          $ref: '#/components/schemas/FolderId'
        finisherId:
          $ref: '#/components/schemas/UserId'
        autoFinishOnApprove:
          type: boolean
          description: Is approval would be finished automatically on reaching Approved
            status
        decisions:
          type: array
          description: Approvers and their decisions
          items:
            $ref: '#/components/schemas/ApprovalDecision'
        attachmentIds:
          type: array
          description: ID of origin version attachments in review
          items:
            $ref: '#/components/schemas/AttachmentId'
        id:
          $ref: '#/components/schemas/ApprovalId'
        taskId:
          $ref: '#/components/schemas/TaskId'
        status:
          $ref: '#/components/schemas/ApprovalStatus'
    CopyFolderAsyncResult:
      type: object
      properties:
        folderId:
          type: string
      description: Async copy folder result
      oneOf: []
    BudgetRateProvision:
      required:
      - contact
      - rateType
      - rateSource
      type: object
      properties:
        rateValue:
          type: number
          description: Rate value is displayed to 2 decimal places. More digits will
            be rounded arithmetically to 2 decimal places. No need to specify rate
            value if rate source is "job role"
        rateType:
          $ref: '#/components/schemas/BudgetRateType'
        contact:
          $ref: '#/components/schemas/UserId'
        rateSource:
          $ref: '#/components/schemas/BudgetRateSource'
    RollupSettings:
      type: object
      properties:
        itemId:
          $ref: '#/components/schemas/TaskId'
        rollupSettings:
          type: array
          description: Rollup settings for fields
          items:
            $ref: '#/components/schemas/FieldRollupSettings'
    CustomFieldCurrency:
      type: string
      enum:
      - CHF
      - ARS
      - MXN
      - QAR
      - SAR
      - CLP
      - ZAR
      - INR
      - VND
      - THB
      - CNY
      - AUD
      - ILS
      - KRW
      - JPY
      - PLN
      - GBP
      - IDR
      - HUF
      - AMD
      - PHP
      - BYR
      - TRY
      - BWP
      - RUB
      - AED
      - HKD
      - TWD
      - EUR
      - COP
      - DKK
      - USD
      - CAD
      - MYR
      - NOK
      - RON
      - SGD
      - CZK
      - AZN
      - PEN
      - SEK
      - NZD
      - BRL
      - UAH
    Space:
      type: object
      properties:
        accessType:
          $ref: '#/components/schemas/SpaceAccessType'
        archived:
          type: boolean
          description: Space is archived
        defaultTaskWorkflowId:
          $ref: '#/components/schemas/WorkflowId'
        guestRoleId:
          $ref: '#/components/schemas/AccessRoleId'
        avatarUrl:
          type: string
          description: Avatar URL
        members:
          type: array
          description: Space members
          items:
            $ref: '#/components/schemas/SpaceMember'
        description:
          type: string
          description: Description
        suggestedProjectWorkflowIds:
          type: array
          description: Suggested project workflows IDs for a space.
          items:
            $ref: '#/components/schemas/WorkflowId'
        id:
          $ref: '#/components/schemas/SpaceId'
        suggestedTaskWorkflowIds:
          type: array
          description: Suggested task workflows IDs for a space
          items:
            $ref: '#/components/schemas/WorkflowId'
        title:
          type: string
          description: Title
        defaultProjectWorkflowId:
          $ref: '#/components/schemas/WorkflowId'
    AuditLogId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    FolderProjectCreate:
      type: object
      properties:
        ownerIds:
          type: array
          description: List of project owner IDs
          items:
            $ref: '#/components/schemas/UserId'
        endDate:
          type: string
          description: Project end date
        contractType:
          $ref: '#/components/schemas/ContractType'
        customStatusId:
          type: string
          description: Project custom status ID. Use this parameter if status value
            is not one of specified above
        startDate:
          type: string
          description: Project start date
        status:
          $ref: '#/components/schemas/ProjectStatus'
        budget:
          type: number
          description: Budget
    Workflow:
      type: object
      properties:
        standard:
          type: boolean
          description: Defines default workflow
        hidden:
          type: boolean
          description: Workflow is hidden
        customStatuses:
          type: array
          description: Custom statuses
          items:
            $ref: '#/components/schemas/CustomStatus'
        name:
          type: string
          description: Name (128 symbols max)
        id:
          $ref: '#/components/schemas/WorkflowId'
    Booking:
      type: object
      properties:
        responsiblePlaceholderId:
          $ref: '#/components/schemas/PlaceholderId'
        bookingDates:
          $ref: '#/components/schemas/BookingDates'
        responsibleId:
          $ref: '#/components/schemas/UserId'
        id:
          $ref: '#/components/schemas/BookingId'
        effortAllocation:
          $ref: '#/components/schemas/BookingEffort'
        title:
          type: string
          description: Title
        folderId:
          type: string
          description: Folder ID
    WorkWeek:
      required:
      - workDays
      type: object
      properties:
        workDays:
          type: array
          description: List of work days
          items:
            $ref: '#/components/schemas/WeekDay'
        capacityMinutes:
          type: number
          description: Custom capacity in minutes
    FolderId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    Dependency:
      type: object
      properties:
        relationType:
          $ref: '#/components/schemas/DependencyRelationType'
        successorId:
          $ref: '#/components/schemas/TaskId'
        lagTime:
          type: number
          description: "Always in minutes, positive numbers are lag time and negative\
            \ numbers are lead time"
        id:
          $ref: '#/components/schemas/DependencyId'
        predecessorId:
          $ref: '#/components/schemas/TaskId'
    EDiscoveryScope:
      type: string
      enum:
      - task
      - folder
      - attachment
      - project
      - space
    BookingEffort:
      required:
      - mode
      type: object
      properties:
        mode:
          $ref: '#/components/schemas/EffortMode'
        totalEffort:
          type: number
          description: Total Effort in minutes
        responsibleAllocation:
          type: array
          description: Responsible allocations by day
          items:
            $ref: '#/components/schemas/ResponsibleAllocation'
    CustomFieldAggregationType:
      type: string
      enum:
      - Average
      - Sum
      - None
    AsyncJobResult:
      type: object
      oneOf:
      - $ref: '#/components/schemas/CopyFolderAsyncResult'
    JobRole:
      type: object
      properties:
        isDeleted:
          type: boolean
          description: Job Role is deleted
        avatarUrl:
          type: string
          description: Avatar URL
        id:
          $ref: '#/components/schemas/JobRoleId'
        shortTitle:
          type: string
          description: Short title
        title:
          type: string
          description: Title
    InstantRange:
      type: object
      properties:
        start:
          type: string
          description: Range start
        end:
          type: string
          description: Range end
    DependencyId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    IdsType:
      type: string
      enum:
      - ApiV2Task
      - ApiV2Attachment
      - ApiV2Comment
      - ApiV2Folder
      - ApiV2Timelog
      - ApiV2User
      - ApiV2Account
    SpaceAccessType:
      type: string
      enum:
      - Locked
      - Personal
      - Private
      - Public
    CustomFieldSharing:
      type: object
      properties:
        readerIds:
          type: array
          description: |
            Users who can see the field.<br>
            <ul>
            <li>null – everyone can read values</li>
            <li>empty – available for space custom fields only. When readerIds is empty, spaceReaders must be non-null. It means that read access is granted only via space membership (spaceReaders)</li>
            </ul>
          items:
            $ref: '#/components/schemas/UserId'
        spaceReaders:
          $ref: '#/components/schemas/CustomFieldSharingSpaceMembership'
        spaceWriters:
          $ref: '#/components/schemas/CustomFieldSharingSpaceMembership'
        writerIds:
          type: array
          description: |
            Users who can edit field values.<br>
            <ul>
            <li>null – everyone can edit values. Allowed only when readerIds == null</li>
            <li>empty – if spaceWriters is null, then nobody can edit values. Otherwise, write access is granted only via space membership (spaceWriters)</li>
            </ul>
            <br>
            Various system actions (request form submission, automation action...) are not affected by this setting
          items:
            $ref: '#/components/schemas/UserId'
    TaskBlueprint:
      type: object
      properties:
        childIds:
          type: array
          description: Child Blueprint IDs
          items:
            $ref: '#/components/schemas/TaskBlueprintId'
        scope:
          $ref: '#/components/schemas/BlueprintTreeScope'
        id:
          $ref: '#/components/schemas/TaskBlueprintId'
        title:
          type: string
          description: Title
    Apiv3Version:
      type: object
      properties:
        major:
          type: number
          description: Major version number
        minor:
          type: number
          description: Minor version number
    UserType:
      type: string
      enum:
      - Group
      - Invitation
      - Person
    ApprovalDecision:
      required:
      - approverId
      - comment
      - status
      - updatedDate
      type: object
      properties:
        approverId:
          $ref: '#/components/schemas/UserId'
        comment:
          type: string
          description: comment
        updatedDate:
          type: string
          description: update date
        status:
          $ref: '#/components/schemas/ApprovalDecisionStatus'
    Group:
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        metadata:
          type: array
          description: List of group metadata entries
          items:
            $ref: '#/components/schemas/Metadata'
        childIds:
          type: array
          description: List of child group IDs
          items:
            $ref: '#/components/schemas/UserId'
        avatarUrl:
          type: string
          description: Avatar URL
        parentIds:
          type: array
          description: List of parent group IDs
          items:
            $ref: '#/components/schemas/UserId'
        myTeam:
          type: boolean
          description: Field is present and set to true for My Team (default) group
        id:
          $ref: '#/components/schemas/UserId'
        title:
          type: string
          description: Group title
        memberIds:
          type: array
          description: List of group members user IDs
          items:
            $ref: '#/components/schemas/UserId'
    Placeholder:
      type: object
      properties:
        deleted:
          type: boolean
          description: "True if Placeholder is deleted, false otherwise"
        avatarUrl:
          type: string
          description: Avatar URL
        jobRoleId:
          $ref: '#/components/schemas/JobRoleId'
        id:
          $ref: '#/components/schemas/PlaceholderId'
        shortTitle:
          type: string
          description: Short title
        title:
          type: string
          description: Title
    TaskId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    CustomFieldDescription:
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        spaceId:
          $ref: '#/components/schemas/SpaceId'
        settings:
          $ref: '#/components/schemas/CustomFieldSettings'
        sharedIds:
          type: array
          description: "Users with whom the custom field is shared. Field is obsolete,\
            \ use 'sharing' to get more relevant access settings"
          items:
            $ref: '#/components/schemas/UserId'
        id:
          $ref: '#/components/schemas/CustomFieldId'
        title:
          type: string
          description: Custom field title
        type:
          $ref: '#/components/schemas/CustomFieldType'
        sharing:
          $ref: '#/components/schemas/CustomFieldSharing'
    FieldRollupSettings:
      required:
      - fieldId
      - system
      - isEnabled
      - canToggle
      type: object
      properties:
        system:
          type: boolean
          description: System field
        isEnabled:
          type: boolean
          description: Rollup state for field
        canToggle:
          type: boolean
          description: Whether the rollup can be toggled for field
        fieldId:
          type: string
          description: |
            Id of field: custom field or one of system fields: StartDate, DueDate, Effort, BookedEffort, PlannedFees, ActualFees, PlannedCost, ActualCost, TimeSpent
    Metadata:
      required:
      - key
      - value
      type: object
      properties:
        value:
          type: string
          description: "Value should be less than 1000 symbols, compatible with JSON\
            \ string. Use JSON 'null' in order to remove metadata entry"
        key:
          type: string
          description: "Key should be less than 50 symbols and match following regular\
            \ expression ([A-Za-z0-9_-]+)"
      description: Metadata entries are isolated on per-client (application) basis
    BudgetRateHistoryItem:
      required:
      - rateSource
      - rateValue
      - startDate
      type: object
      properties:
        rateValue:
          type: number
          description: Rate value is displayed to 2 decimal places
        endDate:
          type: string
          description: The date when the rate became no longer effective and change
            to another rate
        rateSource:
          $ref: '#/components/schemas/BudgetRateSource'
        startDate:
          type: string
          description: The date when the rate became effective
    AsyncJobId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    UserAvatarColor:
      type: string
      enum:
      - Purple1
      - Purple2
      - Blue1
      - Pink1
      - Pink2
      - Red1
      - Red2
      - Turquoise1
      - Turquoise2
      - Blue2
      - DarkBlue1
      - Green2
      - DarkBlue2
      - Green1
      - Yellow1
      - Yellow2
      - Orange2
      - DarkCyan2
      - Orange1
      - DarkCyan1
      - YellowGreen2
      - YellowGreen1
    Folder:
      type: object
      properties:
        color:
          $ref: '#/components/schemas/FolderColor'
        customItemTypeId:
          $ref: '#/components/schemas/EntityTypeId'
        childIds:
          type: array
          description: Child folder IDs
          items:
            $ref: '#/components/schemas/FolderId'
        scope:
          $ref: '#/components/schemas/TreeScope'
        project:
          $ref: '#/components/schemas/FolderProject'
        id:
          $ref: '#/components/schemas/FolderId'
        title:
          type: string
          description: Title
        space:
          type: boolean
          description: Is folder a space
    CustomFieldLinkToDatabaseMirrorField:
      required:
      - dataHubFieldId
      - customFieldId
      type: object
      properties:
        dataHubFieldId:
          type: string
          description: DataHub field identifier in DataHub Public API format
        customFieldId:
          type: string
          description: Custom field id of this mirror
    CustomFieldComparator:
      type: string
      enum:
      - IsEmpty
      - ContainsAny
      - NotInRange
      - LessOrEqualTo
      - StartsWith
      - ContainsAll
      - EqualTo
      - LessThan
      - GreaterOrEqualTo
      - IsNotEmpty
      - GreaterThan
      - InRange
      - Contains
      - EndsWith
    CustomFieldMirrorField:
      required:
      - dataHubFieldId
      - linkToDatabaseCustomFieldId
      type: object
      properties:
        dataHubFieldId:
          type: string
          description: DataHub field identifier in DataHub Public API format
        linkToDatabaseCustomFieldId:
          type: string
          description: Link to Database custom field id  of this mirror
    RescheduleMode:
      type: string
      enum:
      - Start
      - End
    ErrorType:
      type: string
      enum:
      - invalid_request
      - invalid_parameter
      - parameter_required
      - not_authorized
      - access_forbidden
      - not_allowed
      - resource_not_found
      - method_not_found
      - too_many_requests
      - rate_limit_exceeded
      - server_error
    DailyAllocation:
      required:
      - date
      - effortMinutes
      type: object
      properties:
        date:
          type: string
          description: Allocation date
        effortMinutes:
          type: number
          description: Effort in minutes
    BudgetRate:
      required:
      - rateSource
      type: object
      properties:
        rateValue:
          type: number
          description: Rate value is displayed to 2 decimal places. More digits will
            be rounded arithmetically to 2 decimal places. No need to specify rate
            value if rate source is "job role"
        rateScope:
          $ref: '#/components/schemas/BudgetRateScope'
        rateSource:
          $ref: '#/components/schemas/BudgetRateSource'
    TaskDates:
      type: object
      properties:
        duration:
          type: number
          description: |-
            Duration in minutes. Duration is present in Planned tasks and is optional for Backlog tasks.<br>
            When updating duration, ensure to re-submit the start and due dates, even if they are to stay the same. Otherwise, the dates will be cleared.<br>
            When present for Planned tasks and due date is not given, this field limit is [1, 1800000).<br>
            Note that 1 day in Wrike is equal to 8 hours, or 480 minutes.
        due:
          type: string
          description: "Due date is present only in Planned and Milestone tasks. When\
            \ setting this field alone, the task will default to a milestone."
        start:
          type: string
          description: "Start date is present only in Planned tasks. Important: If\
            \ setting a start date, always include either a due date or duration."
        workOnWeekends:
          type: boolean
          description: Weekends are included in task scheduling
        type:
          $ref: '#/components/schemas/TaskDatesType'
      description: |-
        Field values limits:
        duration - [0, 1800000)
        start & due - [1970-01-01T00:00:00, 2100-01-01T00:00:00)
    EntityTypeId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    TaskBlueprintId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    CustomFieldInheritanceType:
      type: string
      enum:
      - All
      - Tasks
      - Projects
      - Folders
    CustomFieldLinkToDatabaseField:
      required:
      - dataHubDatabaseId
      - allowMultipleEntries
      type: object
      properties:
        allowMultipleEntries:
          type: boolean
          description: Allow linkage of multiple records
        dataHubDatabaseId:
          type: string
          description: DataHub database identifier in DataHub Public API format
        mirrorFields:
          type: array
          description: Mirror fields associated with this link
          items:
            $ref: '#/components/schemas/CustomFieldLinkToDatabaseMirrorField'
    BudgetRateSource:
      type: string
      enum:
      - JobRole
      - User
    TimelogFinance:
      type: object
      properties:
        currency:
          type: string
          description: Currency
        actualFees:
          type: number
          description: Actual fees
        actualCost:
          type: number
          description: Actual cost
    CustomFieldInfo:
      required:
      - id
      - accountId
      - title
      - type
      - sharedIds
      - sharing
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        spaceId:
          $ref: '#/components/schemas/SpaceId'
        settings:
          $ref: '#/components/schemas/CustomFieldSettings'
        sharedIds:
          type: array
          description: "Users with whom the custom field is shared. Field is obsolete,\
            \ use 'sharing' to get more relevant access settings"
          items:
            $ref: '#/components/schemas/UserId'
        id:
          $ref: '#/components/schemas/CustomFieldId'
        title:
          type: string
          description: Custom field title
        type:
          $ref: '#/components/schemas/CustomFieldType'
        sharing:
          $ref: '#/components/schemas/CustomFieldSharing'
    TaskDatesType:
      type: string
      enum:
      - Milestone
      - Backlog
      - Planned
    FolderBlueprintId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    DataExportForeignKeySchema:
      required:
      - tableId
      - columnId
      type: object
      properties:
        columnId:
          type: string
          description: Foreign column id
        tableId:
          type: string
          description: Foreign table id
    TaskFinance:
      type: object
      properties:
        plannedCost:
          type: number
          description: Planned cost
        plannedFees:
          type: number
          description: Planned fees
        currency:
          type: string
          description: Currency
        actualFees:
          type: number
          description: Actual fees
        actualCost:
          type: number
          description: Actual cost
    EffortMode:
      type: string
      enum:
      - Basic
      - Flexible
      - FullTime
      - None
    SpaceMember:
      required:
      - id
      - accessRoleId
      - isManager
      type: object
      properties:
        accessRoleId:
          $ref: '#/components/schemas/AccessRoleId'
        isManager:
          type: boolean
          description: User is Space manager
        id:
          $ref: '#/components/schemas/UserId'
    CustomFieldFilter:
      required:
      - id
      type: object
      properties:
        comparator:
          $ref: '#/components/schemas/CustomFieldComparator'
        minValue:
          type: string
          description: Custom field min value
        maxValue:
          type: string
          description: Custom field max value
        values:
          type: array
          description: Custom field possible values
          items:
            type: string
        id:
          $ref: '#/components/schemas/CustomFieldId'
        value:
          type: string
          description: Custom field value
    TimesheetApprovalStatus:
      type: string
      enum:
      - NotSubmitted
      - Approved
      - Rejected
      - Pending
    ApprovalId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    FolderProjectUpdate:
      type: object
      properties:
        ownersRemove:
          type: array
          description: List of userIds to be removed from owners
          items:
            $ref: '#/components/schemas/UserId'
        endDate:
          type: string
          description: Project end date (null value to remove)
        contractType:
          $ref: '#/components/schemas/ContractType'
        customStatusId:
          type: string
          description: Project custom status ID. Use this parameter if status value
            is not one of specified above
        ownersAdd:
          type: array
          description: List of userIds to be added as owners
          items:
            $ref: '#/components/schemas/UserId'
        startDate:
          type: string
          description: Project start date (null value to remove)
        status:
          $ref: '#/components/schemas/ProjectStatus'
        budget:
          type: number
          description: Budget
    TaskStatus:
      type: string
      enum:
      - Active
      - Deferred
      - Completed
      - Cancelled
    ResponsibleAllocation:
      required:
      - dailyAllocation
      type: object
      properties:
        placeholderId:
          $ref: '#/components/schemas/PlaceholderId'
        dailyAllocation:
          type: array
          description: Daily allocations
          items:
            $ref: '#/components/schemas/DailyAllocation'
        userId:
          $ref: '#/components/schemas/UserId'
    ErrorResponse:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/ErrorType'
        errorDescription:
          type: string
    ProjectStatus:
      type: string
      enum:
      - Red
      - OnHold
      - Yellow
      - Completed
      - Custom
      - Cancelled
      - Green
    CustomFieldSharingSpaceMembership:
      type: string
      enum:
      - Admin
      - Member
    AccountSubscription:
      required:
      - type
      - suspended
      - paid
      - userLimit
      type: object
      properties:
        paid:
          type: boolean
          description: Subscription is paid (available only to account admins)
        type:
          $ref: '#/components/schemas/AccountSubscriptionType'
        userLimit:
          type: number
          description: Limit of subscription users (available only to account admins)
        suspended:
          type: boolean
          description: Account is suspended
    LocalDateTimeRange:
      type: object
      properties:
        equal:
          type: string
          description: Date exact match value
        start:
          type: string
          description: Range start
        end:
          type: string
          description: Range end
    FolderChangeHistory:
      type: object
      properties:
        project:
          $ref: '#/components/schemas/FolderProjectHistory'
        id:
          $ref: '#/components/schemas/FolderId'
    Task:
      type: object
      properties:
        metadata:
          type: array
          description: List of task metadata entries
          items:
            $ref: '#/components/schemas/Metadata'
        importance:
          $ref: '#/components/schemas/TaskImportance'
        customFields:
          type: array
          description: Custom fields
          items:
            $ref: '#/components/schemas/CustomField'
        followerIds:
          type: array
          description: "List of user IDs, who follows task"
          items:
            $ref: '#/components/schemas/UserId'
        parentIds:
          type: array
          description: List of task parent folder IDs
          items:
            $ref: '#/components/schemas/FolderId'
        description:
          type: string
          description: Description
        responsiblePlaceholderIds:
          type: array
          description: List of placeholder assignee Ids
          items:
            $ref: '#/components/schemas/PlaceholderId'
        updatedDate:
          type: string
          description: Updated date
        title:
          type: string
          description: "Title, cannot be empty"
        followedByMe:
          type: boolean
          description: Is a task followed by me
        billingType:
          $ref: '#/components/schemas/BillingType'
        scope:
          $ref: '#/components/schemas/TreeScope'
        id:
          $ref: '#/components/schemas/TaskId'
        effortAllocation:
          $ref: '#/components/schemas/TaskEffort'
        hasAttachments:
          type: boolean
          description: Has attachments
        subTaskIds:
          type: array
          description: List of subtask IDs
          items:
            $ref: '#/components/schemas/TaskId'
        recurrent:
          type: boolean
          description: Is a task recurrent
        authorIds:
          type: array
          description: List of author IDs (currently contains 1 element)
          items:
            $ref: '#/components/schemas/UserId'
        responsibleIds:
          type: array
          description: List of assignee user IDs
          items:
            $ref: '#/components/schemas/UserId'
        customItemTypeId:
          $ref: '#/components/schemas/EntityTypeId'
        sharedIds:
          type: array
          description: Users with whom the task is shared
          items:
            $ref: '#/components/schemas/UserId'
        dates:
          $ref: '#/components/schemas/TaskDates'
        superTaskIds:
          type: array
          description: List of super task IDs
          items:
            $ref: '#/components/schemas/TaskId'
        priority:
          type: string
          description: Ordering key that defines task order in tasklist
        completedDate:
          type: string
          description: Completed date
        superParentIds:
          type: array
          description: List of folder IDs inherited from parent task
          items:
            $ref: '#/components/schemas/FolderId'
        accountId:
          $ref: '#/components/schemas/AccountId'
        dependencyIds:
          type: array
          description: List of dependency IDs
          items:
            $ref: '#/components/schemas/DependencyId'
        createdDate:
          type: string
          description: Created date
        customStatusId:
          $ref: '#/components/schemas/CustomStatusId'
        attachmentCount:
          type: number
          description: Total count of task attachments
        permalink:
          type: string
          description: "Link to open task in web workspace, if user has appropriate\
            \ access"
        briefDescription:
          type: string
          description: Brief description
        finance:
          $ref: '#/components/schemas/TaskFinance'
        status:
          $ref: '#/components/schemas/TaskStatus'
    AccountId:
      pattern: "^([A-Z0-9]){8}$"
      type: string
    Attachment:
      type: object
      properties:
        currentAttachmentId:
          $ref: '#/components/schemas/AttachmentId'
        originVersionId:
          $ref: '#/components/schemas/AttachmentId'
        reviewIds:
          type: array
          description: Review IDs
          items:
            $ref: '#/components/schemas/ReviewId'
        previewUrl:
          type: string
          description: Link to download external attachment preview (present if preview
            is available)
        playlistUrl:
          type: string
          description: Link to video playlist
        authorId:
          $ref: '#/components/schemas/UserId'
        type:
          $ref: '#/components/schemas/AttachmentType'
        version:
          type: number
          description: Attachment version
        folderId:
          type: string
          description: ID of related folder. Only one of taskId/folderId fields is
            present
        url:
          type: string
          description: Link to download attachment
        createdDate:
          type: string
          description: Upload date
        size:
          type: number
          description: "Size for Wrike Attachments. For external attachments, size\
            \ is equal to -1"
        name:
          type: string
          description: Attachment filename
        width:
          type: number
          description: "Attachment width, if image"
        commentId:
          type: string
          description: ID of related comment
        id:
          $ref: '#/components/schemas/AttachmentId'
        contentType:
          type: string
          description: Content type
        taskId:
          type: string
          description: ID of related task. Only one of taskId/folderId fields is present
        height:
          type: number
          description: "Attachment height, if image"
    CustomFieldDropdownOption:
      required:
      - value
      type: object
      properties:
        color:
          $ref: '#/components/schemas/DropdownOptionColor'
        value:
          type: string
          description: value
    AsyncJob:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/AsyncJobResult'
        processedCount:
          type: number
          description: Processed count
        errorMessage:
          type: string
          description: Error message
        progressPercent:
          type: number
          description: Progress percents
        id:
          $ref: '#/components/schemas/AsyncJobId'
        totalCount:
          type: number
          description: Total count
        type:
          $ref: '#/components/schemas/AsyncJobType'
        status:
          $ref: '#/components/schemas/AsyncJobStatus'
    AuditLog:
      type: object
      properties:
        ipAddress:
          type: string
          description: IP address from which an operation was performed
        objectName:
          type: string
          description: Object name
        userEmail:
          type: string
          description: Operational user e-mail
        details:
          type: object
          additionalProperties:
            type: string
        id:
          $ref: '#/components/schemas/AuditLogId'
        operation:
          $ref: '#/components/schemas/AuditLogOperation'
        userId:
          $ref: '#/components/schemas/UserId'
        objectId:
          type: string
          description: Object ID
        eventDate:
          type: string
          description: Date and time when operation was performed
        objectType:
          $ref: '#/components/schemas/AuditLogObjectType'
    BudgetRatesAggregated:
      type: object
      properties:
        billRate:
          $ref: '#/components/schemas/BudgetRate'
        costRate:
          $ref: '#/components/schemas/BudgetRate'
        rateSubjectId:
          $ref: '#/components/schemas/UserId'
        rateSubjectType:
          $ref: '#/components/schemas/BudgetRateSubjectType'
    CustomStatusId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    BookingId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    WorkItemMetadata:
      type: object
      properties:
        relatedType:
          $ref: '#/components/schemas/CustomItemTypeRelatedType'
        id:
          $ref: '#/components/schemas/TaskId'
    Apiv3Apiv2Id:
      type: object
      properties:
        id:
          type: string
          description: API v3 ID
        apiV2Id:
          type: string
          description: API v2 legacy ID
    WorkScheduleId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    AsyncJobStatus:
      type: string
      enum:
      - InQueue
      - Failed
      - Completed
      - InProgress
    BudgetRateSubjectType:
      type: string
      enum:
      - Placeholder
      - User
    TreeScope:
      type: string
      enum:
      - WsTask
      - RbRoot
      - RbFolder
      - WsFolder
      - WsRoot
      - RbTask
    ContactChangeHistory:
      type: object
      properties:
        costRateHistory:
          type: array
          description: Cost rate change history
          items:
            $ref: '#/components/schemas/BudgetRateHistoryItem'
        billRateHistory:
          type: array
          description: Bill rate change history
          items:
            $ref: '#/components/schemas/BudgetRateHistoryItem'
        id:
          $ref: '#/components/schemas/UserId'
    WorkWeekUpdate:
      required:
      - dayOfWeek
      - isWorkDay
      type: object
      properties:
        dayOfWeek:
          $ref: '#/components/schemas/WeekDay'
        isWorkDay:
          type: boolean
          description: Is it working day
    AccessRole:
      type: object
      properties:
        description:
          type: string
          description: Role description
        id:
          $ref: '#/components/schemas/AccessRoleId'
        title:
          type: string
          description: Role title
    ExternalRequesterId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    Invitation:
      type: object
      properties:
        userTypeId:
          type: string
          description: Invited User Type ID
        accountId:
          $ref: '#/components/schemas/AccountId'
        firstName:
          type: string
          description: First Name
        lastName:
          type: string
          description: LastName
        external:
          type: boolean
          description: Is user external
        inviterUserId:
          $ref: '#/components/schemas/UserId'
        role:
          $ref: '#/components/schemas/UserRole'
        id:
          $ref: '#/components/schemas/InvitationId'
        email:
          type: string
          description: Email
        status:
          $ref: '#/components/schemas/InvitationStatus'
        invitationDate:
          type: string
          description: Date when invitation was created
        resolvedDate:
          type: string
          description: Date when the invitation was resolved
    CustomFieldType:
      type: string
      enum:
      - Numeric
      - Multiple
      - Contacts
      - Percentage
      - Checkbox
      - Currency
      - Text
      - DropDown
      - Duration
      - LinkToDatabase
      - Date
    BookingDates:
      type: object
      properties:
        duration:
          type: number
          description: Duration in days
        workOnWeekends:
          type: boolean
          description: Weekends are included in booking scheduling
        finishDate:
          type: string
          description: Finish date
        startDate:
          type: string
          description: Start date
    UserScheduleException:
      type: object
      properties:
        fromDate:
          type: string
          description: ""
        isWorkDays:
          type: boolean
          description: True if this exception is for working days
        toDate:
          type: string
          description: ""
        exclusionType:
          $ref: '#/components/schemas/UserScheduleExclusionType'
        id:
          $ref: '#/components/schemas/UserScheduleExclusionId'
        userId:
          $ref: '#/components/schemas/UserId'
    BudgetRateScope:
      type: string
      enum:
      - Account
      - Project
    TaskImportance:
      type: string
      enum:
      - High
      - Low
      - Normal
    BudgetMetricHistoryItem:
      required:
      - value
      - startDate
      type: object
      properties:
        endDate:
          type: string
          description: Field's value for the selected end date
        value:
          type: number
          description: Field's value
        startDate:
          type: string
          description: Field's value for the selected start date
    WeekDay:
      type: string
      enum:
      - Thu
      - Tue
      - Wed
      - Sat
      - Fri
      - Sun
      - Mon
    DropdownOptionColor:
      type: string
      enum:
      - Brown
      - DarkCyan
      - Gray
      - Blue
      - DarkBlue
      - Orange
      - Red
      - YellowGreen
      - Purple
      - Yellow
      - Indigo
      - Turquoise
      - DarkRed
      - Green
    DataExportColumnSchema:
      required:
      - id
      - alias
      - dataType
      type: object
      properties:
        dataType:
          type: string
          description: Column data type
        alias:
          type: string
          description: Column alias
        id:
          type: string
          description: Column id
        foreignKey:
          $ref: '#/components/schemas/DataExportForeignKeySchema'
    CustomFieldScope:
      type: string
      enum:
      - Space
      - Account
    TimelogCategoryId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    TimesheetSubmissionRule:
      type: object
      properties:
        ruleType:
          $ref: '#/components/schemas/TimesheetSubmissionRuleType'
        workScheduleId:
          $ref: '#/components/schemas/WorkScheduleId'
        enabled:
          type: boolean
          description: Current state of timesheet submission rule
        frequency:
          $ref: '#/components/schemas/TimesheetSubmissionRuleFrequency'
    ContractType:
      type: string
      enum:
      - Billable
      - NonBillable
    WorkScheduleExclusionId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    PreviewSize:
      type: string
      enum:
      - w44
      - w300
      - w400
      - w100
      - h400
      - w200
      - full
    WorkScheduleExclusionType:
      type: string
      enum:
      - PublicHolidays
      - OtherEvent
      - AdditionalWorkDays
    InvitationId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    FolderProject:
      required:
      - ownerIds
      - status
      type: object
      properties:
        createdDate:
          type: string
          description: Project created date
        ownerIds:
          type: array
          description: List of project owner IDs
          items:
            $ref: '#/components/schemas/UserId'
        endDate:
          type: string
          description: Project end date
        contractType:
          $ref: '#/components/schemas/ContractType'
        customStatusId:
          $ref: '#/components/schemas/CustomStatusId'
        authorId:
          $ref: '#/components/schemas/UserId'
        startDate:
          type: string
          description: Project start date
        completedDate:
          type: string
          description: Project completed date
        finance:
          $ref: '#/components/schemas/FolderProjectFinance'
        status:
          $ref: '#/components/schemas/ProjectStatus'
    Rates:
      type: object
      properties:
        rateValue:
          type: number
          description: Rate value is displayed to 2 decimal places. More digits will
            be rounded arithmetically to 2 decimal places. No need to specify rate
            value if rate source is "job role"
        rateType:
          $ref: '#/components/schemas/BudgetRateType'
        contact:
          $ref: '#/components/schemas/UserId'
        rateSource:
          $ref: '#/components/schemas/BudgetRateSource'
    UserScheduleExclusionType:
      type: string
      enum:
      - VacationPTO
      - Overtime
      - OtherNonWorking
    DataExportId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    User:
      type: object
      properties:
        userTypeId:
          type: string
          description: User Type Id
        lastName:
          type: string
          description: Last name
        metadata:
          type: array
          description: "List of contact metadata entries. Requesting user has read/write\
            \ access to his own metadata, other entries are read-only"
          items:
            $ref: '#/components/schemas/Metadata'
        avatarUrl:
          type: string
          description: Avatar URL
        timezone:
          type: string
          description: "Timezone Id, e.g 'America/New_York'"
        companyName:
          type: string
          description: User Company Name
        profiles:
          type: array
          description: List of user profiles in accounts accessible for requesting
            user
          items:
            $ref: '#/components/schemas/UserProfile'
        type:
          $ref: '#/components/schemas/UserType'
        locale:
          type: string
          description: Locale
        title:
          type: string
          description: User Title
        firstName:
          type: string
          description: First name
        deleted:
          type: boolean
          description: "True if user is deleted, false otherwise"
        phone:
          type: string
          description: User phone
        me:
          type: boolean
          description: Field is present and set to true only for requesting user
        myTeam:
          type: boolean
          description: Field is present and set to true for My Team (default) group
        location:
          type: string
          description: User location
        id:
          $ref: '#/components/schemas/UserId'
        memberIds:
          type: array
          description: List of group members contact IDs (field is present only for
            groups)
          items:
            $ref: '#/components/schemas/UserId'
        primaryEmail:
          type: string
          description: Primary Email
    UserProfile:
      required:
      - accountId
      - email
      - role
      - external
      - admin
      - owner
      - active
      type: object
      properties:
        owner:
          type: boolean
          description: Is user account owner
        accountId:
          $ref: '#/components/schemas/AccountId'
        external:
          type: boolean
          description: Is user external
        role:
          $ref: '#/components/schemas/UserRole'
        admin:
          type: boolean
          description: Is user account admin
        active:
          type: boolean
          description: Is user active in account
        email:
          type: string
          description: Email address associated with account
    CustomItemTypeRelatedType:
      type: string
      enum:
      - Project
      - Task
      - Folder
    TaskSortField:
      type: string
      enum:
      - Status
      - Importance
      - UpdatedDate
      - Priority
      - CreatedDate
      - Title
      - StartFinishInterval
      - DueDate
      - LastAccessDate
      - CompletedDate
    BudgetRateType:
      type: string
      enum:
      - Bill
      - Cost
    ModifyFieldRollupSettings:
      required:
      - fieldId
      - isEnabled
      type: object
      properties:
        isEnabled:
          type: boolean
          description: Enable rollup for field
        fieldId:
          type: string
          description: |
            Id of field: custom field or one of system fields: StartDate, DueDate, Effort, BookedEffort, PlannedFees, ActualFees, PlannedCost, ActualCost, TimeSpent
    StatusColor:
      type: string
      enum:
      - Brown
      - DarkCyan
      - Gray
      - Blue
      - DarkBlue
      - Orange
      - Red
      - YellowGreen
      - Purple
      - Yellow
      - Indigo
      - DarkRed
      - Turquoise
      - Green
    FolderProjectFinance:
      type: object
      properties:
        plannedCost:
          type: number
          description: Planned cost
        plannedFees:
          type: number
          description: Planned fees
        currency:
          type: string
          description: Currency
        actualFees:
          type: number
          description: Actual fees
        actualCost:
          type: number
          description: Actual cost
        budget:
          type: number
          description: Budget
    Timelog:
      type: object
      properties:
        approvalStatus:
          $ref: '#/components/schemas/TimesheetApprovalStatus'
        hours:
          type: number
          description: "Hours tracked in timelog record, must be in [0..24] hours\
            \ range"
        createdDate:
          type: string
          description: Date of timelog was created
        billingType:
          $ref: '#/components/schemas/BillingType'
        trackedDate:
          type: string
          description: Date for which timelog was recorded
        comment:
          type: string
          description: Timelog record comment
        id:
          $ref: '#/components/schemas/TimelogId'
        updatedDate:
          type: string
          description: Date of timelog was updated
        userId:
          $ref: '#/components/schemas/UserId'
        taskId:
          $ref: '#/components/schemas/TaskId'
        categoryId:
          $ref: '#/components/schemas/TimelogCategoryId'
        finance:
          $ref: '#/components/schemas/TimelogFinance'
    CommentType:
      type: string
      enum:
      - Email
      - Regular
    DataExportTableSchema:
      type: object
      properties:
        columns:
          type: array
          description: List of exported columns
          items:
            $ref: '#/components/schemas/DataExportColumnSchema'
        alias:
          type: string
          description: Table alias
        id:
          type: string
          description: Table id
    TaskChangeHistory:
      type: object
      properties:
        plannedCost:
          type: array
          description: Planned cost change history
          items:
            $ref: '#/components/schemas/BudgetMetricHistoryItem'
        plannedFees:
          type: array
          description: Planned fees change history
          items:
            $ref: '#/components/schemas/BudgetMetricHistoryItem'
        id:
          $ref: '#/components/schemas/TaskId'
        actualFees:
          type: array
          description: Actual fees change history
          items:
            $ref: '#/components/schemas/BudgetMetricHistoryItem'
        actualCost:
          type: array
          description: Actual cost change history
          items:
            $ref: '#/components/schemas/BudgetMetricHistoryItem'
    BlueprintTreeScope:
      type: string
      enum:
      - TaskBp
      - BpRoot
      - FolderBp
    GroupModify:
      required:
      - id
      type: object
      properties:
        addMembers:
          type: array
          description: Add specified users to group
          items:
            $ref: '#/components/schemas/UserId'
        removeMembers:
          type: array
          description: Remove specified users from group
          items:
            $ref: '#/components/schemas/UserId'
        id:
          $ref: '#/components/schemas/UserId'
    TimelogCategory:
      type: object
      properties:
        hidden:
          type: boolean
          description: Timelog category is hidden
        name:
          type: string
          description: Name of the timelog record
        id:
          $ref: '#/components/schemas/TimelogCategoryId'
        order:
          type: number
          description: Order number of the timelog category in category list
    TimesheetSubmissionRuleFrequency:
      type: string
      enum:
      - Week
      - Day
    TimesheetSubmissionRuleType:
      type: string
      enum:
      - Hard
      - Soft
    DataExportVersion:
      type: string
      enum:
      - V0
      - V1
      - V2
    BillingType:
      type: string
      enum:
      - Billable
      - NonBillable
    Comment:
      type: object
      properties:
        externalRequester:
          $ref: '#/components/schemas/ExternalRequester'
        createdDate:
          type: string
          description: Created date
        id:
          $ref: '#/components/schemas/CommentId'
        text:
          type: string
          description: Comment text
        updatedDate:
          type: string
          description: Deprecated because this field gets created date instead of
            updated date. Please use the createdDate field instead.
        authorId:
          $ref: '#/components/schemas/UserId'
        type:
          $ref: '#/components/schemas/CommentType'
        emailSubject:
          type: string
          description: The subject in case of email comment
        taskId:
          type: string
          description: ID of related task. Only one of taskId/folderId fields is present
        folderId:
          type: string
          description: ID of related folder. Only one of taskId/folderId fields is
            present
        direction:
          type: string
          description: The direction (Outgoing/Incoming) in case of email comment
    AttachmentUrl:
      type: object
      properties:
        playlistUrl:
          type: string
          description: URL to video playlist of attachment
        url:
          type: string
          description: URL by which attachment can be accessed
    AttachmentType:
      type: string
      enum:
      - Google
      - DAM
      - OneDrive
      - Wrike
      - External
      - Box
      - SharePoint
      - DropBox
    ExternalRequester:
      required:
      - id
      - firstName
      - email
      type: object
      properties:
        firstName:
          type: string
          description: The first name of the external requester
        lastName:
          type: string
          description: The last name of the external requester
        id:
          $ref: '#/components/schemas/ExternalRequesterId'
        email:
          type: string
          description: The email address of the external requester
    TimelogId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    DataExportResource:
      required:
      - name
      - url
      type: object
      properties:
        name:
          type: string
          description: Name of exported resource
        url:
          type: string
          description: Link to a file of exported resource
    JobRoleId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    SpaceId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    ColorsInfo:
      type: object
      properties:
        name:
          type: string
          description: Color name
        hex:
          type: string
          description: HEX code
    SortOrder:
      type: string
      enum:
      - Asc
      - Desc
    ApprovalDecisionStatus:
      type: string
      enum:
      - Approved
      - Rejected
      - Pending
    AttachmentId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    Avatar:
      required:
      - letters
      - color
      type: object
      properties:
        color:
          type: string
          description: Hex color code
        letters:
          type: string
          description: Group letters (2 symbols max)
    CommentId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    Contact:
      type: object
      properties:
        lastName:
          type: string
          description: Last name
        metadata:
          type: array
          description: "List of contact metadata entries. Requesting user has read/write\
            \ access to his own metadata, other entries are read-only"
          items:
            $ref: '#/components/schemas/Metadata'
        avatarUrl:
          type: string
          description: Avatar URL
        timezone:
          type: string
          description: "Timezone Id, e.g 'America/New_York'"
        currentCostRate:
          $ref: '#/components/schemas/BudgetRate'
        customFields:
          type: array
          description: Custom fields
          items:
            $ref: '#/components/schemas/CustomField'
        companyName:
          type: string
          description: User Company Name
        profiles:
          type: array
          description: List of user profiles in accounts accessible for requesting
            user
          items:
            $ref: '#/components/schemas/UserProfile'
        type:
          $ref: '#/components/schemas/UserType'
        locale:
          type: string
          description: Locale
        title:
          type: string
          description: User Title
        firstName:
          type: string
          description: First name
        deleted:
          type: boolean
          description: "True if user is deleted, false otherwise"
        phone:
          type: string
          description: User phone
        currentBillRate:
          $ref: '#/components/schemas/BudgetRate'
        me:
          type: boolean
          description: Field is present and set to true only for requesting user
        myTeam:
          type: boolean
          description: Field is present and set to true for My Team (default) group
        jobRoleId:
          $ref: '#/components/schemas/JobRoleId'
        location:
          type: string
          description: User location
        workScheduleId:
          $ref: '#/components/schemas/WorkScheduleId'
        id:
          $ref: '#/components/schemas/UserId'
        memberIds:
          type: array
          description: List of group members contact IDs (field is present only for
            groups)
          items:
            $ref: '#/components/schemas/UserId'
        primaryEmail:
          type: string
          description: Primary Email
    WorkSchedule:
      type: object
      properties:
        scheduleType:
          $ref: '#/components/schemas/WorkScheduleType'
        workweek:
          type: array
          description: Work week
          items:
            $ref: '#/components/schemas/WorkWeek'
        userIds:
          type: array
          description: User ids assigned to schedule
          items:
            $ref: '#/components/schemas/UserId'
        id:
          $ref: '#/components/schemas/WorkScheduleId'
        title:
          type: string
          description: Title
    WorkScheduleException:
      type: object
      properties:
        fromDate:
          type: string
          description: ""
        isWorkDays:
          type: boolean
          description: True if this exception is for working days
        toDate:
          type: string
          description: ""
        exclusionType:
          $ref: '#/components/schemas/WorkScheduleExclusionType'
        id:
          $ref: '#/components/schemas/WorkScheduleExclusionId'
    PlaceholderId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    FolderProjectHistory:
      type: object
      properties:
        plannedCost:
          type: array
          description: Planned cost change history
          items:
            $ref: '#/components/schemas/BudgetMetricHistoryItem'
        plannedFees:
          type: array
          description: Planned fees change history
          items:
            $ref: '#/components/schemas/BudgetMetricHistoryItem'
        actualFees:
          type: array
          description: Actual fees change history
          items:
            $ref: '#/components/schemas/BudgetMetricHistoryItem'
        actualCost:
          type: array
          description: Actual cost change history
          items:
            $ref: '#/components/schemas/BudgetMetricHistoryItem'
        budget:
          type: array
          description: Budget change history
          items:
            $ref: '#/components/schemas/BudgetMetricHistoryItem'
    UserId:
      pattern: "^([A-Z0-9]){8}$"
      type: string
    UserRole:
      type: string
      enum:
      - User
      - Collaborator
    DependencyRelationType:
      type: string
      enum:
      - FinishToFinish
      - StartToStart
      - StartToFinish
      - FinishToStart
    CustomField:
      required:
      - id
      - value
      type: object
      properties:
        id:
          $ref: '#/components/schemas/CustomFieldId'
        value:
          type: string
          description: "Custom field value. 4000 characters max. Should be valid string\
            \ according to JSON RFC 8259. In particular, following characters must\
            \ be escaped: quotation mark, reverse solidus, and the control characters\
            \ (U+0000 through U+001F). Any character may be escaped, but unnecessarily\
            \ escaped character can be implicitly translated to it's unescaped version.\
            \ <br> In addition to RFC 8259 requirements, it is not recommended to\
            \ use any of control characters in CF value.<br>Wrike's API forbids using\
            \ U+0000 in every place and U+0011 at the beginning of the CF value string.<br>The\
            \ correct way for setting multiple values in the multiple select Custom\
            \ fields is ?customFields=[{\"id\":\"CustomFieldId\",\"value\":\"[\\\"\
            value1\\\",\\\"value2\\\"]\"}]<br>The correct way for setting values in\
            \ the people Custom fields is ?customFields=[{\"id\":\"CustomFieldId\"\
            ,\"value\":\"UserId1, UserId2\"}]<br> Note that if custom field values\
            \ are passed to API as URI param of request, they must be URI encoded.\
            \ Here are some examples:<br>\"%5c\" - reverse solidus (backslash)<br>\"\
            %5c%22\" - quotation mark<br>\"Vi%5Cu1ec7t\" - unicode-escaped character\
            \ in word \"Việt\"<br>"
    ReviewId:
      pattern: "^([A-Z0-9]){16}$"
      type: string
    AuditLogObjectType:
      type: string
      enum:
      - Account
      - Group
      - AnalyzeReportWidget
      - Task
      - User
      - WorkspaceSnapshot
      - CalendarExternalLink
      - Attachment
      - Folder
      - DataExport
      - PowerBIEntity
      - Space
      - Comment
      - RequestForm
      - AccessRole
      - Timesheet
      - Invitation
      - Workflow
      - AnalyzeReport
      - Oauth2Client
      - Project
      - PublicLink
      - UserRole
      - CustomField
      - UserType
    FolderBlueprint:
      type: object
      properties:
        childIds:
          type: array
          description: Child Blueprint IDs
          items:
            $ref: '#/components/schemas/FolderBlueprintId'
        scope:
          $ref: '#/components/schemas/BlueprintTreeScope'
        id:
          $ref: '#/components/schemas/FolderBlueprintId'
        title:
          type: string
          description: Title
    CustomItemType:
      type: object
      properties:
        spaceId:
          $ref: '#/components/schemas/SpaceId'
        relatedType:
          $ref: '#/components/schemas/CustomItemTypeRelatedType'
        customFieldIds:
          type: array
          description: Custom fields that are available
          items:
            $ref: '#/components/schemas/CustomFieldId'
        description:
          type: string
          description: Custom item type description
        id:
          $ref: '#/components/schemas/EntityTypeId'
        title:
          type: string
          description: Work type Title
    LocalDateRange:
      type: object
      properties:
        equal:
          type: string
          description: Date exact match value
        start:
          type: string
          description: Range start
        end:
          type: string
          description: Range end
  responses: {}
  securitySchemes:
    HTTP:
      type: http
      description: Use OAuth 2.0 access token or permanent access token for authorization.
      scheme: bearer
      bearerFormat: JWT
    OAUTH2:
      type: oauth2
      description: Wrike API uses the OAuth 2.0 protocol for authorization.
      flows:
        authorizationCode:
          authorizationUrl: https://login.wrike.com/oauth2/authorize/v4
          tokenUrl: https://login.wrike.com/oauth2/token
          refreshUrl: https://login.wrike.com/oauth2/token
          scopes:
            wsReadOnly: ""
            wsReadWrite: ""
            dataExportFull: ""
            amReadOnlyWorkflow: ""
            amReadWriteWorkflow: ""
            amReadOnlyInvitation: ""
            amReadWriteInvitation: ""
            amReadOnlyUser: ""
            amReadWriteUser: ""
            amReadOnlyGroup: ""
            amReadWriteGroup: ""
            amReadOnlyTimelogCategory: ""
            amReadWriteTimelogCategory: ""
            amReadOnlyAuditLog: ""
            amReadOnlyAccessRole: ""
            amReadOnlyWorkSchedule: ""
            amReadWriteWorkSchedule: ""
            marketingReadWrite: ""
            integrateManage: ""
            Default: ""
